using A1RConsole.ViewModel.Productions.Peeling;
using A1RConsole.Core;
using A1RConsole.Models.Capacity;
using A1RConsole.Models.Categories;
using A1RConsole.Models.Comments;
using A1RConsole.Models.Customers;
using A1RConsole.Models.Discounts;
using A1RConsole.Models.Dispatch;
using A1RConsole.Models.Formulas;
using A1RConsole.Models.Freights;
using A1RConsole.Models.Invoices;
using A1RConsole.Models.Machines;
using A1RConsole.Models.Meta;
using A1RConsole.Models.Orders;
using A1RConsole.Models.Production;
using A1RConsole.Models.Production.Grading;
using A1RConsole.Models.Production.Mixing;
using A1RConsole.Models.Production.Peeling;
using A1RConsole.Models.Production.ReRolling;
using A1RConsole.Models.Production.Slitting;
using A1RConsole.Models.Products;
using A1RConsole.Models.RawMaterials;
using A1RConsole.Models.Shifts;
using A1RConsole.Models.Stock;
using A1RConsole.Models.Transactions;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using A1RConsole.Models.Suppliers;
using System.Globalization;
using A1RConsole.ViewModels.Products;
using A1RConsole.ViewModels.Stock;
using A1RConsole.Models.Purchasing;
using A1RConsole.Models.Users;
using A1RConsole.Models.Quoting;
using A1RConsole.Models.Orders.OnlineOrders;
using System.Data;
using A1RConsole.PdfGeneration;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Org.BouncyCastle.Asn1.Ocsp;
using System.Security.Cryptography;
using A1RConsole.Models.Vjs;
using System.Windows.Markup;
using System.Collections;
using MigraDoc.DocumentObjectModel;
using Microsoft.Office.Interop.Excel;
using Comment = A1RConsole.Models.Comments.Comment;
using Global = A1RConsole.Core.Global;

namespace A1RConsole.DB
{
    public class CusAndPrePaid<T1, T2, T3>
    {
        public T1 CusID { get; set; }
        public T2 Name { get; set; }
        public T3 CusType { get; set; }
    }

   

    public static class DBAccess
    {

        public static T CheckNull<T>(object obj)
        {
            return (obj == DBNull.Value ? default(T) : (T)obj);

        }


        static bool TimeBetween(DateTime datetime, TimeSpan start, TimeSpan end)
        {
            // convert datetime to a TimeSpan
            TimeSpan now = datetime.TimeOfDay;
            // see if start comes before end
            if (start < end)
                return start <= now && now <= end;
            // start is after end, so do the inverse comparison
            return !(end < now && now < start);
        }

        public static List<UserPosition> GetAllUserPositions(string position)
        {
            List<UserPosition> userPositions = new List<UserPosition>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT UserPositions.id,UserPositions.position, " +
                                                           "Users.ID,Users.Username,Users.FirstName,Users.LastName,Users.State " +
                                                           "FROM UserPositions " +
                                                           "INNER JOIN Users ON UserPositions.user_id = Users.ID " +
                                                           "WHERE UserPositions.position=@PositionName ORDER BY Users.FirstName", conn);

                    cmdGetData.Parameters.AddWithValue("@PositionName", position);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                UserPosition up = new UserPosition();
                                up.ID = Convert.ToInt16(dr["id"]);
                                up.Position = dr["position"].ToString();
                                up.User = new User() { ID = Convert.ToInt16(dr["ID"]), Username = dr["Username"].ToString(), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), State = dr["State"].ToString() };
                                up.FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                                userPositions.Add(up);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return userPositions;
        }

        public static ObservableCollection<DiscountStructure> GetDiscountStructureByCustomerID(int cusId)
        {
            ObservableCollection<DiscountStructure> list = new ObservableCollection<DiscountStructure>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {

                    conn.Open();
                    SqlCommand cmdGetId = new SqlCommand("SELECT Discount.id,Discount.customer_id,Discount.category_id,Discount.Discount,Discount.comment,Discount.updated_by,Discount.updated_date,Discount.time_stamp, " +
	                                                     "Category.category_name,Category.category_document_path " +
                                                         "FROM Discount " +
                                                         "INNER JOIN Category ON Discount.category_id = Category.id " +
                                                         "WHERE customer_id =@CustomerID", conn);

                    cmdGetId.Parameters.AddWithValue("@CustomerID", cusId);
                    using (SqlDataReader dr = cmdGetId.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string vis = "Collapsed";
                                if (Convert.ToInt16(dr["category_id"]) != 0)
                                    {                                       
                                        if (Convert.ToInt16(dr["category_id"]) == 3)
                                        {
                                            if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                            {
                                                vis = "Visible";
                                            }
                                        }
                                    }
                                
                                    DiscountStructure d = new DiscountStructure();
                                    d.ID = Convert.ToInt32(dr["id"]);
                                    d.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                    d.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]), CategoryName = dr["category_name"].ToString(), DocumentPath = dr["category_document_path"].ToString() };
                                    d.Discount = Convert.ToInt16(dr["Discount"]);
                                    d.UpdatedBy = dr["updated_by"].ToString();
                                    d.UpdatedDate =Convert.ToDateTime(dr["updated_date"]);
                                    d.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    d.DiscountLabelVisibility = vis;                                   

                                    list.Add(d);
                            }
                        }
                    }


                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return list;
        }

        public static ObservableCollection<Customer> GetAllCustomers()
        {

            ObservableCollection<Customer> customerList = new ObservableCollection<Customer>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    SqlCommand cmdGetCustomers = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, " +
                                                         "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax,  " +
                                                         "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1,  " +
                                                         "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2,  " +
                                                         "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3,  " +
                                                         "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit,  " +
                                                         "Customers.primary_business,Category.category_name " +
                                                         "FROM dbo.Customers  " +
                                                         "INNER JOIN dbo.Category ON Customers.primary_business = Category.id  " +
                                                         "WHERE dbo.Customers.primary_business IS NOT NULL  " +
                                                         "ORDER BY dbo.Customers.company_name", conn);

                    using (SqlDataReader dr = cmdGetCustomers.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Customer customer = new Customer();
                                customer.CustomerId = Convert.ToInt16(dr["id"]);
                                customer.CustomerType = dr["customer_type"].ToString();
                                customer.CompanyName = dr["company_name"].ToString();
                                customer.CompanyAddress = dr["company_address"].ToString();
                                customer.CompanyCity = dr["company_city"].ToString();
                                customer.CompanyState = dr["company_state"].ToString();
                                customer.CompanyPostCode = dr["company_postcode"].ToString();
                                customer.CompanyCountry = dr["company_country"].ToString();
                                customer.CompanyEmail = dr["company_email"].ToString();
                                customer.CompanyTelephone = dr["company_telephone"].ToString();
                                customer.CompanyFax = dr["company_fax"].ToString();
                                customer.Designation1 = dr["designation1"].ToString();
                                customer.FirstName1 = dr["first_name1"].ToString();
                                customer.LastName1 = dr["last_name1"].ToString();
                                customer.Telephone1 = dr["telephone1"].ToString();
                                customer.Mobile1 = dr["mobile1"].ToString();
                                customer.Email1 = dr["email1"].ToString();
                                customer.Fax1 = dr["fax1"].ToString();
                                customer.Designation2 = dr["designation2"].ToString();
                                customer.FirstName2 = dr["first_name2"].ToString();
                                customer.LastName2 = dr["last_name2"].ToString();
                                customer.Telephone2 = dr["telephone2"].ToString();
                                customer.Mobile2 = dr["mobile2"].ToString();
                                customer.Email2 = dr["email2"].ToString();
                                customer.Fax2 = dr["fax2"].ToString();
                                customer.Designation3 = dr["designation3"].ToString();
                                customer.FirstName3 = dr["first_name3"].ToString();
                                customer.LastName3 = dr["last_name3"].ToString();
                                customer.Telephone3 = dr["telephone3"].ToString();
                                customer.Mobile3 = dr["mobile3"].ToString();
                                customer.Email3 = dr["email3"].ToString();
                                customer.Fax3 = dr["fax3"].ToString();
                                customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                customer.Debt = CheckNull<decimal>(dr["debt"]);
                                customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                //customer.CustomerCreditHistory = new CustomerCreditHistory() { CreditRemaining = Convert.ToDecimal(dr["credit_remaining"]) };
                                customer.ShipAddress = dr["ship_address"].ToString();
                                customer.ShipCity = dr["ship_city"].ToString();
                                customer.ShipState = dr["ship_state"].ToString();
                                customer.ShipPostCode = dr["ship_postcode"].ToString();
                                customer.ShipCountry = dr["ship_country"].ToString();
                                customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                customer.Active = Convert.ToBoolean(dr["active"]);
                                customer.StopCredit = dr["stop_credit"].ToString();
                                customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                customer.PrimaryBusiness = new Category();
                                customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                customer.PrimaryBusiness.CategoryName = dr["category_name"].ToString();
                                customerList.Add(customer);                                
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return customerList;
        }


        public static ObservableCollection<Customer> GetCustomerData()
        {

            ObservableCollection<Customer> list = new ObservableCollection<Customer>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    SqlCommand cmdGetId = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, ISNULL(Discount.category_id,0) AS category_id,ISNULL(Category.category_name,'') AS category_name,Category.category_document_path,ISNULL(Discount.discount,0) As Discount,Discount.time_stamp AS DisTimeStamp, " +
                                                             "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax, " +
                                                             "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1, " +
                                                             "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2, " +
                                                             "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3, " +
                                                             "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit, " +
                                                             "Customers.primary_business,(SELECT p.category_name FROM Category p WHERE p.id = Customers.primary_business) AS primary_business_Cat " +
                                                             "FROM Customers " +
                                                             "LEFT JOIN Discount ON Customers.id=Discount.customer_id " +
                                                             "LEFT JOIN Category ON Discount.category_id = Category.id " +
                                                             "WHERE Customers.primary_business IS NOT NULL " +
                                                             "ORDER BY Customers.company_name", conn);

                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT id,customer_id,contact_person_name, contact_phone_number1,contact_phone_number2, contact_email,active,time_stamp " +
                                                                   "FROM ContactPerson WHERE active = 'True' ORDER BY customer_id", conn);


                    using (SqlDataReader dr = cmdGetId.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if (list.Count == 0)
                                {
                                    Customer customer = new Customer();
                                    customer.CustomerId = Convert.ToInt16(dr["id"]);
                                    customer.CustomerType = dr["customer_type"].ToString();
                                    customer.CompanyName = dr["company_name"].ToString();
                                    customer.CompanyAddress = dr["company_address"].ToString();
                                    customer.CompanyCity = dr["company_city"].ToString();
                                    customer.CompanyState = dr["company_state"].ToString();
                                    customer.CompanyPostCode = dr["company_postcode"].ToString();
                                    customer.CompanyCountry = dr["company_country"].ToString();
                                    customer.CompanyEmail = dr["company_email"].ToString();
                                    customer.CompanyTelephone = dr["company_telephone"].ToString();
                                    customer.CompanyFax = dr["company_fax"].ToString();
                                    customer.Designation1 = dr["designation1"].ToString();
                                    customer.FirstName1 = dr["first_name1"].ToString();
                                    customer.LastName1 = dr["last_name1"].ToString();
                                    customer.Telephone1 = dr["telephone1"].ToString();
                                    customer.Mobile1 = dr["mobile1"].ToString();
                                    customer.Email1 = dr["email1"].ToString();
                                    customer.Fax1 = dr["fax1"].ToString();
                                    customer.Designation2 = dr["designation2"].ToString();
                                    customer.FirstName2 = dr["first_name2"].ToString();
                                    customer.LastName2 = dr["last_name2"].ToString();
                                    customer.Telephone2 = dr["telephone2"].ToString();
                                    customer.Mobile2 = dr["mobile2"].ToString();
                                    customer.Email2 = dr["email2"].ToString();
                                    customer.Fax2 = dr["fax2"].ToString();
                                    customer.Designation3 = dr["designation3"].ToString();
                                    customer.FirstName3 = dr["first_name3"].ToString();
                                    customer.LastName3 = dr["last_name3"].ToString();
                                    customer.Telephone3 = dr["telephone3"].ToString();
                                    customer.Mobile3 = dr["mobile3"].ToString();
                                    customer.Email3 = dr["email3"].ToString();
                                    customer.Fax3 = dr["fax3"].ToString();
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    //customer.CustomerCreditHistory = new CustomerCreditHistory() { CreditRemaining = Convert.ToDecimal(dr["credit_remaining"]) };
                                    customer.ShipAddress = dr["ship_address"].ToString();
                                    customer.ShipCity = dr["ship_city"].ToString();
                                    customer.ShipState = dr["ship_state"].ToString();
                                    customer.ShipPostCode = dr["ship_postcode"].ToString();
                                    customer.ShipCountry = dr["ship_country"].ToString();
                                    customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    customer.Active = Convert.ToBoolean(dr["active"]);
                                    customer.StopCredit = dr["stop_credit"].ToString();
                                    customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    customer.DiscountStructure = new ObservableCollection<DiscountStructure>() { };
                                    customer.PrimaryBusiness = new Category();
                                    customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                    customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();
                                    if (Convert.ToInt16(dr["category_id"]) != 0)
                                    {
                                        string vis = "Collapsed";
                                        if (Convert.ToInt16(dr["category_id"]) == 3)
                                        {
                                            if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                            {
                                                vis = "Visible";
                                            }
                                        }
                                        customer.DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                    }
                                    list.Add(customer);
                                }
                                else
                                {
                                    bool f = list.Any(x => x.CustomerId == Convert.ToInt16(dr["id"]));
                                    if (f)
                                    {
                                        for (int i = 0; i < list.Count; i++)
                                        {
                                            if (list[i].CustomerId == Convert.ToInt16(dr["id"]))
                                            {
                                                string vis = "Collapsed";
                                                if (Convert.ToInt16(dr["category_id"]) == 3)
                                                {
                                                    if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                                    {
                                                        vis = "Visible";
                                                    }
                                                }
                                                list[i].DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Customer customer = new Customer();
                                        customer.CustomerId = Convert.ToInt16(dr["id"]);
                                        customer.CustomerType = dr["customer_type"].ToString();
                                        customer.CompanyName = dr["company_name"].ToString();
                                        customer.CompanyAddress = dr["company_address"].ToString();
                                        customer.CompanyCity = dr["company_city"].ToString();
                                        customer.CompanyState = dr["company_state"].ToString();
                                        customer.CompanyPostCode = dr["company_postcode"].ToString();
                                        customer.CompanyCountry = dr["company_country"].ToString();
                                        customer.CompanyEmail = dr["company_email"].ToString();
                                        customer.CompanyTelephone = dr["company_telephone"].ToString();
                                        customer.CompanyFax = dr["company_fax"].ToString();
                                        customer.Designation1 = dr["designation1"].ToString();
                                        customer.FirstName1 = dr["first_name1"].ToString();
                                        customer.LastName1 = dr["last_name1"].ToString();
                                        customer.Telephone1 = dr["telephone1"].ToString();
                                        customer.Mobile1 = dr["mobile1"].ToString();
                                        customer.Email1 = dr["email1"].ToString();
                                        customer.Fax1 = dr["fax1"].ToString();
                                        customer.Designation2 = dr["designation2"].ToString();
                                        customer.FirstName2 = dr["first_name2"].ToString();
                                        customer.LastName2 = dr["last_name2"].ToString();
                                        customer.Telephone2 = dr["telephone2"].ToString();
                                        customer.Mobile2 = dr["mobile2"].ToString();
                                        customer.Email2 = dr["email2"].ToString();
                                        customer.Fax2 = dr["fax2"].ToString();
                                        customer.Designation3 = dr["designation3"].ToString();
                                        customer.FirstName3 = dr["first_name3"].ToString();
                                        customer.LastName3 = dr["last_name3"].ToString();
                                        customer.Telephone3 = dr["telephone3"].ToString();
                                        customer.Mobile3 = dr["mobile3"].ToString();
                                        customer.Email3 = dr["email3"].ToString();
                                        customer.Fax3 = dr["fax3"].ToString();
                                        customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                        customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                        customer.Debt = CheckNull<decimal>(dr["debt"]);
                                        customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                        //customer.CustomerCreditHistory = new CustomerCreditHistory() { CreditRemaining = Convert.ToDecimal(dr["credit_remaining"]) };
                                        customer.ShipAddress = dr["ship_address"].ToString();
                                        customer.ShipCity = dr["ship_city"].ToString();
                                        customer.ShipState = dr["ship_state"].ToString();
                                        customer.ShipPostCode = dr["ship_postcode"].ToString();
                                        customer.ShipCountry = dr["ship_country"].ToString();
                                        customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                        customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                        customer.Active = Convert.ToBoolean(dr["active"]);
                                        customer.StopCredit = dr["stop_credit"].ToString();
                                        customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                        customer.DiscountStructure = new ObservableCollection<DiscountStructure>() { };
                                        customer.PrimaryBusiness = new Category();
                                        customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                        customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();
                                        if (Convert.ToInt16(dr["category_id"]) != 0)
                                        {
                                            string vis = "Collapsed";
                                            if (Convert.ToInt16(dr["category_id"]) == 3)
                                            {
                                                if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                                {
                                                    vis = "Visible";
                                                }
                                            }
                                            customer.DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                        }
                                        list.Add(customer);
                                    }
                                }
                            }
                        }
                    }

                    List<ContactPerson> cpList = new List<ContactPerson>();
                    using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ContactPerson cp = new ContactPerson();
                                cp.ContactPersonID = Convert.ToInt16(dr["id"]);
                                cp.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                cp.ContactPersonName = dr["contact_person_name"].ToString();
                                cp.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                cp.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                cp.Email = dr["contact_email"].ToString();
                                cp.Active = Convert.ToBoolean(dr["active"]);
                                cp.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                cpList.Add(cp);

                            }
                        }
                    }


                    foreach (var item in list)
                    {
                        item.ContactPerson = new List<ContactPerson>();
                        foreach (var items in cpList)
                        {
                            if(item.CustomerId == items.CustomerID)
                            {
                                items.PhoneNumber1 = String.IsNullOrWhiteSpace(items.PhoneNumber1) ? "Not Available" : items.PhoneNumber1;
                                items.PhoneNumber2 = String.IsNullOrWhiteSpace(items.PhoneNumber2) ? "Not Available" : items.PhoneNumber2;
                                item.ContactPerson.Add(items);
                            }
                        }
                        item.ContactPerson.Add(new ContactPerson() { ContactPersonID = -1, ContactPersonName = "Other", CustomerID = item.CustomerId});
                        
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static List<Category> GetDiscounts()
        {
            List<Category> catList = new List<Category>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Category WHERE id <> 8 AND id <> 9", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    string str = dr["discount_structure"].ToString();
                                    List<string> lstr = str.Split(',').ToList();
                                    Category cat = new Category();
                                    cat.CategoryID = Convert.ToInt16(dr["id"]);
                                    cat.Discounts = new List<int>();
                                    foreach (var item in lstr)
                                    {
                                        cat.Discounts.Add(Convert.ToInt16(item));
                                    }

                                    catList.Add(cat);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading product code: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return catList;
        }


        public static ObservableCollection<FreightCarrier> GetFreightData()
        {
            ObservableCollection<FreightCarrier> list = new ObservableCollection<FreightCarrier>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Freight WHERE active = 'True' ORDER BY FreightName", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    FreightCarrier freight = new FreightCarrier();
                                    freight.Id = Convert.ToInt16(dr["ID"]);
                                    freight.FreightName = dr["FreightName"].ToString();
                                    //freight.FreightUnit = dr["FreightUnit"].ToString();
                                    freight.FreightPrice = Convert.ToDecimal(dr["FreightPrice"]);
                                    freight.FreightDescription = dr["FreightDescription"].ToString();
                                    freight.Active = Convert.ToBoolean(dr["active"]);
                                    freight.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    list.Add(freight);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading freight details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static ObservableCollection<Product> GetAllProds(bool withRawMateriels)
        {
            string[] prods =  null;
            string sqlWhere = string.Empty;
            if (withRawMateriels == true)
            {
                sqlWhere = "Products.is_raw_material ='true' OR Products.is_raw_material = 'false'";
            }
            else
            {
                sqlWhere = "Products.is_raw_material = 'false'";
            }

            if (UserData.MetaData != null)
            {                
                foreach (var item in UserData.MetaData)
                {
                    if (item.KeyName == "quoting_price_edit")
                    {
                        prods = item.Description.Split('|');
                        break;
                    }
                }

            }


            ObservableCollection<Product> prodColl = new ObservableCollection<Product>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id, Products.category_id,Category.category_name, Products.raw_product_id, Products.type,Products.commodity_code, Products.product_name, Products.product_code, Products.product_description, Products.unit,Products.is_manufactured,Products.is_purchased, " +
                                                                  "Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point,Products.size, " +
                                                                  "Products.is_manufactured,Products.is_purchased,Products.last_modified_by,Products.last_modified_date,Products.is_auto_order,Products.active,Products.material_cost, Products.time_stamp,Products.stock_location, " +
                                                                  "RawProducts.RawProductCode,RawProducts.RawProductName,RawProducts.Description,RawProducts.RawProductType " +
                                                                  "FROM Products " +
                                                                  "INNER JOIN Category ON Products.category_id = Category.id " +
                                                                  "LEFT JOIN RawProducts ON Products.raw_product_id = RawProducts.RawProductID " +
                                                                  "WHERE Products.active = 'true' AND " + sqlWhere + " ORDER BY Products.product_code", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Product prod = new Product();                                   

                                    prod.ProductID = Convert.ToInt16(dr["id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]), CategoryName = dr["category_name"].ToString() };
                                    prod.CommodityCode = dr["commodity_code"].ToString();
                                    prod.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"]),
                                        RawProductCode = dr["product_code"].ToString(),
                                        RawProductName = dr["product_name"].ToString(),
                                        Description = dr["product_description"].ToString(),
                                        RawProductType = dr["unit"].ToString(),
                                        
                                    };
                                    prod.Size = dr["size"].ToString();
                                    prod.Type = dr["type"].ToString();
                                    prod.IsPurchased = Convert.ToBoolean(dr["is_purchased"]);
                                    prod.IsManufactured = Convert.ToBoolean(dr["is_manufactured"]);
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.UnitsPerPack = Convert.ToDecimal(dr["units_per_package"]);
                                    prod.UnitCost = Convert.ToDecimal(dr["unit_cost"]);
                                    prod.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prod.MaterialCost = Convert.ToDecimal(dr["material_cost"]);
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    prod.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    prod.PriceEditEnabled = false;
                                    prod.LocationType = dr["stock_location"].ToString();
                                    if(prods  != null)
                                    {
                                        var p = prods.SingleOrDefault(x=> Convert.ToInt16(x) == Convert.ToInt16(dr["id"]));
                                        if(p != null)
                                        {
                                            prod.PriceEditEnabled = true;
                                        }
                                        else
                                        {
                                            prod.PriceEditEnabled = false;
                                        }
                                    }
                                    
                                    prodColl.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;

        }

        public static ObservableCollection<FreightCode> GetFreightCodes()
        {
            ObservableCollection<FreightCode> fcList = new ObservableCollection<FreightCode>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM FreightCodes WHERE active='True' ORDER BY code", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    FreightCode fc = new FreightCode();
                                    fc.ID = Convert.ToInt16(dr["id"]);
                                    fc.FreightCodeID = Convert.ToInt16(dr["id"]);
                                    fc.Code = dr["code"].ToString();
                                    fc.Description = dr["description"].ToString();
                                    fc.Unit = dr["unit"].ToString();
                                    fc.Price = Convert.ToDecimal(dr["price"]);
                                    fc.PriceEnabled = false;
                                    fc.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    fc.Active = Convert.ToBoolean(dr["active"]);
                                    fcList.Add(fc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return fcList;
        }

        public static List<ProductStock> GetProductStockByStock(int location)
        {
            List<ProductStock> psList = new List<ProductStock>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ProductStock.id AS ProductStockID,ProductStock.product_id,ProductStock.qty_available,ProductStock.last_updated_date,ProductStock.updated_by,ProductStock.time_stamp, " +
                                                                  "StockLocation.id AS StockLocationID,StockLocation.stock_name,StockLocation.address,StockLocation.suburb,StockLocation.state, " +
                                                                  "Products.product_code,Products.product_description,Products.unit,Products.order_point,Products.unit_price " +
                                                                  "FROM ProductStock " +
                                                                  "INNER JOIN StockLocation ON ProductStock.stock_location_id = StockLocation.id " +
                                                                  "INNER JOIN Products ON ProductStock.product_id = Products.id " +
                                                                  "WHERE ProductStock.stock_location_id=@Location " +
                                                                  "ORDER BY Products.product_code ASC", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@Location", location);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductStock ps = new ProductStock();
                                    ps.ID = Convert.ToInt16(dr["ProductStockID"]);
                                    ps.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockLocationID"]), StockName = dr["stock_name"].ToString(), Address = dr["suburb"].ToString(), State = dr["state"].ToString() };
                                    ps.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString(), ProductUnit = dr["unit"].ToString(), OrderPoint = Convert.ToDecimal(dr["order_point"]), UnitPrice = Convert.ToDecimal(dr["unit_price"]) };
                                    ps.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                    //ps.OrderPoint = Convert.ToDecimal(dr["order_point"]);
                                    ps.LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]);
                                    ps.UpdatedBy = dr["updated_by"].ToString();
                                    ps.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    psList.Add(ps);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return psList;
        }

        public static List<StockLocation> GetAllStockLocations()
        {
            List<StockLocation> slList = new List<StockLocation>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM StockLocation", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    StockLocation sl = new StockLocation();
                                    sl.ID = Convert.ToInt16(dr["id"]);
                                    sl.StockName = dr["stock_name"].ToString();
                                    sl.Address = dr["address"].ToString();
                                    sl.Suburb = dr["suburb"].ToString();
                                    sl.State = dr["state"].ToString();
                                    slList.Add(sl);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return slList;
        }

        

        public static List<ProductStockReserved> GetReservedProductStock(SalesOrder so)
        {
            List<ProductStockReserved> psRList = new List<ProductStockReserved>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM ProductStockReserved " +
                                                                "WHERE prod_stock_reserved_id=@SalesOrderDetailsID", conn))
                    {

                        foreach (var item in so.SalesOrderDetails)
                        {
                            //cmdGetId.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                            cmdGetId.Parameters.AddWithValue("@SalesOrderDetailsID", item.SalesOrderDetailsID);
                            //cmdGetId.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            using (SqlDataReader dr = cmdGetId.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        ProductStockReserved psr = new ProductStockReserved();
                                        psr.ProductStockReservedID = Convert.ToInt32(dr["prod_stock_reserved_id"]);
                                        psr.SalesNo = Convert.ToInt32(dr["sales_no"]);
                                        psr.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                        psr.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                        psr.QtyOrdered = Convert.ToDecimal(dr["qty_ordered"]);
                                        psr.QtyReserved = Convert.ToDecimal(dr["qty_reserved"]);
                                        psr.QtyRemaining = Convert.ToDecimal(dr["qty_remaining"]);
                                        psr.ReservedDate = Convert.ToDateTime(dr["reserved_date"]);
                                        psr.Status = dr["status"].ToString();
                                        psr.ActivityDate = Convert.ToDateTime(dr["activity_date"]);
                                        psRList.Add(psr);
                                    }
                                }
                            }
                            cmdGetId.Parameters.Clear();
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return psRList;
        }

        public static CustomerCreditHistory GetCustomerCreditHistoryRecord(Int32 salesNo, int cusId)
        {
            CustomerCreditHistory cch = new CustomerCreditHistory();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM CustomerCreditSalesOrder " +
                                                                "WHERE sales_order_no=@SalesOrderNo AND customer_id =@CustomerID", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@SalesOrderNo", salesNo);
                        cmdGetId.Parameters.AddWithValue("@CustomerID", cusId);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    cch.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]) };
                                    cch.SalesOrderNo = Convert.ToInt32(dr["sales_order_no"]);
                                    cch.CreditLimit = Convert.ToDecimal(dr["credit_limit"]);
                                    cch.CreditDeducted = Convert.ToDecimal(dr["credit_deducted"]);
                                    cch.CreditRemaining = Convert.ToDecimal(dr["credit_remaining"]);
                                    cch.Debt = Convert.ToDecimal(dr["debt"]);
                                    cch.CreditAdded = Convert.ToDecimal(dr["credit_added"]);
                                    cch.UpdatedDate = Convert.ToDateTime(dr["updated_date"]);
                                    cch.UpdatedBy = (dr["updated_by"]).ToString();
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return cch;
        }

        public static SalesOrder GetSalesOrderDetails(Int32 salesNo)
        {
            SalesOrder salesOrder = new SalesOrder();
            ObservableCollection<SalesOrderDetails> salesOrderDetails = new ObservableCollection<SalesOrderDetails>();
            BindingList<FreightDetails> freightDetails = new BindingList<FreightDetails>();
            DispatchOrder dispatchOrder = new DispatchOrder();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,SalesOrder.order_priority,SalesOrder.freight_id,SalesOrder.customer_order_no,SalesOrder.dispatch_date,SalesOrder.order_priority,SalesOrder.order_status,SalesOrder.ship_to,SalesOrder.bill_to,SalesOrder.last_modified_date,SalesOrder.terms_id,SalesOrder.pickup_time,SalesOrder.list_price_total,SalesOrder.total_amount,SalesOrder.gst,SalesOrder.payment_recieved,SalesOrder.sales_made_by,SalesOrder.payment_due_date,SalesOrder.freight_total,SalesOrder.gst_enabled,SalesOrder.time_stamp, " +
                                                        "Customers.id AS CusID,Customers.company_name,Customers.customer_type, " +
                                                        "StockLocation.id AS StockLocationID,StockLocation.stock_name, " +
                                                        "PrePaidCustomers.prepaid_customer_name, " +
                                                        "Freight.FreightName " +
                                                        "FROM SalesOrder " +
                                                        "LEFT JOIN Customers ON SalesOrder.customer_id = Customers.id " +
                                                        "INNER JOIN StockLocation ON SalesOrder.stock_location = StockLocation.id " +
                                                        "INNER JOIN PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                        "INNER JOIN Freight ON SalesOrder.freight_id = Freight.ID " +
                                                        "WHERE SalesOrder.sales_no = @SalesNo", conn);

                SqlCommand cmdGetSalesItems = new SqlCommand("SELECT SalesOrderDetails.id,SalesOrderDetails.sales_no,SalesOrderDetails.order_line,SalesOrderDetails.line_status,SalesOrderDetails.qty,SalesOrderDetails.discount,SalesOrderDetails.total,SalesOrderDetails.description,SalesOrderDetails.list_price,SalesOrderDetails.time_stamp AS SODTimeStamp, " +
                                                             "Products.id AS pID,Products.product_code,Products.product_description,Products.category_id,Products.unit,Products.unit_price, Products.time_stamp AS PTimeStamp, " +
                                                             "ProductStockReserved.prod_stock_reserved_id,ProductStockReserved.qty_ordered, ProductStockReserved.qty_reserved, ProductStockReserved.qty_remaining, ProductStockReserved.time_stamp AS PSRTimeStamp " +
                                                             "FROM SalesOrderDetails " +
                                                             "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id " +
                                                             "INNER JOIN ProductStockReserved ON SalesOrderDetails.id = ProductStockReserved.prod_stock_reserved_id AND ProductStockReserved.sales_no = @SalesNo " +
                                                             "WHERE SalesOrderDetails.sales_no = @SalesNo AND ProductStockReserved.stock_location_id = 1 ORDER BY SalesOrderDetails.order_line", conn);

                SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT FreightDetails.id,FreightDetails.freight_code_id,FreightDetails.description,FreightDetails.pallets,FreightDetails.price,FreightDetails.discount,FreightDetails.total AS FreightTotal, " +
                                                                    "FreightCodes.code,FreightCodes.description,FreightCodes.unit,FreightDetails.time_stamp " +
                                                                    "FROM FreightDetails " +
                                                                    "INNER JOIN FreightCodes ON FreightDetails.freight_code_id = FreightCodes.id " +
                                                                    "WHERE FreightDetails.order_no = @SalesNo", conn);

                SqlCommand cmdGetDispatchOrder = new SqlCommand("SELECT * FROM DispatchOrders " +
                                                                "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetInvoiceNo = new SqlCommand("SELECT id FROM Invoice WHERE sales_order_no=@SalesOrderNo", conn);

                //Get Comments
                SqlCommand cmdGetComments = new SqlCommand("SELECT * FROM Comments WHERE no=@SalesNo AND (location_id=7 OR location_id=8)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                cmdGetData.Transaction = trans;
                cmdGetData.Parameters.AddWithValue("@SalesNo", salesNo);
                try
                {
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                salesOrder.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                salesOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                salesOrder.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                if (!DBNull.Value.Equals(dr["CusID"]))
                                {
                                    salesOrder.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["CusID"]), CompanyName = dr["company_name"].ToString(), CustomerType = dr["customer_type"].ToString() };
                                }
                                else
                                {
                                    salesOrder.PrepaidCustomerName = dr["prepaid_customer_name"].ToString();
                                    salesOrder.Customer = new Customer() { CustomerId = 0, CustomerType = "Prepaid" };
                                }
                                salesOrder.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockLocationID"]), StockName = dr["stock_name"].ToString() };
                                salesOrder.CustomerOrderNo = dr["customer_order_no"].ToString();
                                salesOrder.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                salesOrder.OrderStatus = dr["order_status"].ToString();
                                salesOrder.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                salesOrder.ShipTo = dr["ship_to"].ToString();
                                salesOrder.BillTo = dr["bill_to"].ToString();
                                salesOrder.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                salesOrder.FreightCarrier = new FreightCarrier() { Id = Convert.ToInt16(dr["freight_id"]),FreightName = dr["FreightName"].ToString() };
                                salesOrder.TermsID = dr["terms_id"].ToString();
                                salesOrder.PickupTime = dr["pickup_time"].ToString();
                                salesOrder.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                salesOrder.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                salesOrder.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                salesOrder.GST = Convert.ToDecimal(dr["gst"]);
                                salesOrder.GSTEnabled = Convert.ToBoolean(dr["gst_enabled"]);
                                salesOrder.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                salesOrder.SalesMadeBy = dr["sales_made_by"].ToString();
                                salesOrder.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                salesOrder.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                            }
                        }
                    }
                    cmdGetSalesItems.Transaction = trans;
                    cmdGetSalesItems.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetSalesItems.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                SalesOrderDetails sod = new SalesOrderDetails();
                                sod.SalesOrderDetailsID = Convert.ToInt32(dr["id"]);
                                sod.OrderLine = Convert.ToInt16(dr["order_line"]);
                                sod.LineStatus = dr["line_status"].ToString();
                                sod.Product = new Product() { ProductID = Convert.ToInt16(dr["pID"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString(), ProductUnit = dr["unit"].ToString(), UnitPrice = Convert.ToDecimal(dr["unit_price"]), Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) }, TimeStamp = Convert.ToBase64String(dr["PTimeStamp"] as byte[]) };
                                sod.Quantity = Convert.ToDecimal(dr["qty"]);
                                sod.QtyInStock = Convert.ToDecimal(dr["qty_reserved"]);//Quantity reserved
                                sod.QtyToMake = Convert.ToDecimal(dr["qty_remaining"]);//Quantity remaining
                                sod.Discount = Convert.ToInt16(dr["discount"]);
                                sod.SODTimeStamp = Convert.ToBase64String(dr["SODTimeStamp"] as byte[]);
                                sod.PSTimeStamp = Convert.ToBase64String(dr["PSRTimeStamp"] as byte[]);
                                sod.Total=Convert.ToDecimal(dr["total"]);
                                sod.QuoteUnitPrice = Convert.ToDecimal(dr["list_price"]);
                                sod.QuoteProductDescription = dr["description"].ToString();
                                sod.IsQtyReserved = sod.QtyInStock == sod.Quantity ? "Yes" : "No";
                                salesOrderDetails.Add(sod);
                            }
                        }
                    }

                    salesOrder.SalesOrderDetails = salesOrderDetails;

                    cmdGetFreightDetails.Transaction = trans;
                    cmdGetFreightDetails.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                FreightDetails fd = new FreightDetails();
                                fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                fd.FreightCodeDetails = new FreightCode() { ID = Convert.ToInt32(dr["id"]), FreightCodeID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["unit"].ToString(), Price = Convert.ToDecimal(dr["price"]), FreightTotal = Convert.ToDecimal(dr["FreightTotal"]) };
                                fd.Discount = Convert.ToInt16(dr["discount"]);
                                fd.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                fd.DummyDescription = dr["description"].ToString();
                                fd.DummyPrice = Convert.ToDecimal(dr["price"]);
                                freightDetails.Add(fd);
                            }
                        }
                    }

                    salesOrder.SalesOrderDetails = salesOrderDetails;
                    salesOrder.FreightDetails = freightDetails;

                    cmdGetDispatchOrder.Transaction = trans;
                    cmdGetDispatchOrder.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetDispatchOrder.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                dispatchOrder.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                dispatchOrder.DeliveryDocketNo = Convert.ToInt32(dr["delivery_docket_no"]);
                                dispatchOrder.ConNoteNumber = dr["con_note_number"].ToString();
                                dispatchOrder.OrderDispatched = Convert.ToBoolean(dr["order_dispatched"]);
                                dispatchOrder.DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]);
                                dispatchOrder.OrderStatus = dr["order_status"].ToString();
                                dispatchOrder.IsProcessing = Convert.ToBoolean(dr["is_processing"]);
                                dispatchOrder.CompletedDateTime = CheckNull<DateTime>(dr["completed_date_time"]);
                            }
                        }
                    }
                    //Comments
                    salesOrder.Comments = new List<Comment>();

                    cmdGetComments.Transaction = trans;
                    cmdGetComments.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetComments.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                salesOrder.Comments.Add(new Comment() { LocationID = Convert.ToInt16(dr["location_id"]), Note = dr["comment"].ToString(), TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]) });
                            }
                        }
                    }
                    salesOrder.DispatchOrder = new DispatchOrder();
                    salesOrder.DispatchOrder = dispatchOrder;

                    cmdGetInvoiceNo.Transaction = trans;
                    cmdGetInvoiceNo.Parameters.AddWithValue("@SalesOrderNo", salesNo);
                    salesOrder.Invoice = new Invoice();
                    salesOrder.InvoiceNo = Convert.ToInt32(cmdGetInvoiceNo.ExecuteScalar());

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return salesOrder;
        }

        public static ObservableCollection<SalesOrderDetails> GetSalesOrderDetailsBySalesNo(Invoice inv)
        {
            ObservableCollection<SalesOrderDetails> sodList = new ObservableCollection<SalesOrderDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT SalesOrderDetails.id AS SodID,SalesOrderDetails.sales_no,SalesOrderDetails.order_line,SalesOrderDetails.qty,SalesOrderDetails.discount,SalesOrderDetails.total, " +
                                                                  "Products.id,Products.product_code,SalesOrderDetails.description,Products.unit,SalesOrderDetails.list_price FROM SalesOrderDetails " +
                                                                  "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id " +
                                                                  "WHERE sales_no=@SalesNo", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@SalesNo", inv.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SalesOrderDetails sod = new SalesOrderDetails();
                                    sod.SalesOrderDetailsID = Convert.ToInt32(dr["SodID"]);
                                    sod.OrderLine = Convert.ToInt16(dr["order_line"]);
                                    sod.Product = new Product() { ProductID = Convert.ToInt32(dr["id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["description"].ToString(), ProductUnit = dr["unit"].ToString(), UnitPrice = Convert.ToDecimal(dr["list_price"]) };
                                    sod.Quantity = Convert.ToDecimal(dr["qty"]);
                                    sod.Discount = Convert.ToInt16(dr["discount"]);
                                    sod.Total = Convert.ToDecimal(dr["total"]); ;
                                    sodList.Add(sod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return sodList;
        }

        public static List<Tuple<string, Int16, string>> GetUpdateSalesOrderTimeStamp(Int32 id)
        {
            List<Tuple<string, Int16, string>> timeStamps = new List<Tuple<string, Int16, string>>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetSalesOrderTimeStamp = new SqlCommand("SELECT time_stamp FROM SalesOrder " +
                                                                     "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetSalesOrderDetailsTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM SalesOrderDetails " +
                                                                             "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetFreightDetailsTimeStamp = new SqlCommand("SELECT id,time_stamp FROM FreightDetails " +
                                                                             "WHERE order_no=@SalesNo", conn);

                SqlCommand cmdGetCommentsTimeStamp = new SqlCommand("SELECT id,time_stamp FROM Comments " +
                                                                    "WHERE prefix =@Prefix AND no=@SalesNo", conn);

                SqlCommand cmdGetProductStockReservedTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM ProductStockReserved " +
                                                                                "WHERE sales_no=@SalesNo AND stock_location_id=@StockLocationID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdGetSalesOrderTimeStamp.Transaction = trans;
                    cmdGetSalesOrderTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetSalesOrderTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("SO", (Int16)0, Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    cmdGetSalesOrderDetailsTimeStamp.Transaction = trans;
                    cmdGetSalesOrderDetailsTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetSalesOrderDetailsTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("SOD", Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    cmdGetFreightDetailsTimeStamp.Transaction = trans;
                    cmdGetFreightDetailsTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetFreightDetailsTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("FD", Convert.ToInt16(dr["id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    cmdGetCommentsTimeStamp.Transaction = trans;
                    cmdGetCommentsTimeStamp.Parameters.AddWithValue("@Prefix", "SO");
                    cmdGetCommentsTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetCommentsTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("COM", Convert.ToInt16(dr["id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    cmdGetProductStockReservedTimeStamp.Transaction = trans;
                    cmdGetProductStockReservedTimeStamp.Parameters.AddWithValue("@StockLocationID", 1);
                    cmdGetProductStockReservedTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetProductStockReservedTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("PSR", Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return timeStamps;
        }

        public static List<Tuple<string, Int16, string>> GetDispatchOrderTimeStamp(Int32 id)
        {
            List<Tuple<string, Int16, string>> timeStamps = new List<Tuple<string, Int16, string>>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetSalesOrderTimeStamp = new SqlCommand("SELECT time_stamp FROM SalesOrder " +
                                                                      "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetSalesOrderDetailsTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM SalesOrderDetails " +
                                                                             "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetDispatchOrderTimeStamp = new SqlCommand("SELECT time_stamp FROM DispatchOrders " +
                                                                         "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetDispatchOrderItemTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM DispatchOrderItem " +
                                                                             "WHERE sales_no=@SalesNo", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdGetDispatchOrderTimeStamp.Transaction = trans;
                    cmdGetDispatchOrderTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetDispatchOrderTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("DO", (Int16)0, Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    cmdGetSalesOrderTimeStamp.Transaction = trans;
                    cmdGetSalesOrderTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetSalesOrderTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("SO", (Int16)0, Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }

                    cmdGetSalesOrderDetailsTimeStamp.Transaction = trans;
                    cmdGetSalesOrderDetailsTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetSalesOrderDetailsTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("SOD", Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }
                    cmdGetDispatchOrderItemTimeStamp.Transaction = trans;
                    cmdGetDispatchOrderItemTimeStamp.Parameters.AddWithValue("@SalesNo", id);
                    using (SqlDataReader dr = cmdGetDispatchOrderItemTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("DOI", Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                            }
                        }
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return timeStamps;
        }

        public static OrderStatus CheckWhichAreaHadOrder(SalesOrder so)
        {
            OrderStatus name = OrderStatus.None;
            bool active = false;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdCheckWarehouse = new SqlCommand("SELECT is_active FROM WarehouseOrders WHERE sales_no=@SalesNo", conn);
                SqlCommand cmdCheckDispatch = new SqlCommand("SELECT is_active FROM DispatchOrders WHERE sales_no=@SalesNo", conn);
                SqlCommand cmdCheckInvoice = new SqlCommand("SELECT is_active FROM Invoice WHERE sales_order_no=@SalesNo", conn);
                SqlCommand cmdCheckSalesOrder = new SqlCommand("SELECT order_status FROM SalesOrder WHERE sales_no=@SalesNo", conn);


                try
                {
                    conn.Open();

                    string orderStatus = string.Empty;
                    cmdCheckSalesOrder.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                    using (SqlDataReader dr = cmdCheckSalesOrder.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            while (dr.Read())
                            {
                                orderStatus = (dr["order_status"]).ToString();
                            }
                        }
                    }

                    if (orderStatus == OrderStatus.Dispatched.ToString())
                    {
                        name = OrderStatus.Dispatched;
                    }
                    else
                    {
                        cmdCheckWarehouse.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdCheckWarehouse.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    active = Convert.ToBoolean(dr["is_active"]);
                                    name = OrderStatus.InWarehouse;
                                }
                            }
                        }

                        if (active == false)
                        {
                            cmdCheckDispatch.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                            using (SqlDataReader dr = cmdCheckDispatch.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        active = Convert.ToBoolean(dr["is_active"]);
                                        name = OrderStatus.FinalisingShipping;
                                    }
                                }
                            }
                        }

                        if (active == false)
                        {
                            cmdCheckInvoice.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                            using (SqlDataReader dr = cmdCheckInvoice.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        active = Convert.ToBoolean(dr["is_active"]);
                                        name = OrderStatus.PreparingInvoice;
                                    }
                                }
                            }
                        }

                        if (active == false)
                        {
                            name = OrderStatus.InWarehouse;
                        }
                    }


                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return name;
        }

        public static Tuple<Int32, Int32> AddToSalesOrders(SalesOrder salesOrder, List<ProductStockReserved> productStockReserved, List<ProductStock> poroductStockList, Tuple<CustomerCreditHistory, CustomerCreditActivity> creditTuple, OrderOrigin<object, string> oo)
        {
            Int32 salesNo = 0;
            Int32 result = 0;
            Int32 resultSalesOrder = 0;
            int resultCustomerCreditHold = 0;
            int resultCustomerCreditStockAdded = 0;
            int resultWarehouseAdded = 0;
            int resultCustomerCreditNoHold = 0;
            List<int> resultFreightCodes = new List<int>();
            List<int> resultSalesOrderDetails = new List<int>();
            Tuple<Int32, Int32> tupResult = null;

            TransactionLog Transaction = null;
            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            if (String.IsNullOrEmpty(userName))
            {
                userName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SalesOrder
                SqlCommand cmdInsertOrder = new SqlCommand("INSERT INTO SalesOrder(order_date,order_priority,customer_id,freight_id,quote_no,customer_order_no,bill_to,ship_to,pickup_time,dispatch_date,terms_id,list_price_total,freight_total,total_amount,gst_enabled,gst,payment_recieved,payment_due_date,stock_location,sales_made_by,sales_completed_by,order_status,last_modified_date,last_modified_by) " +
                                                           "VALUES (@OrderDate,@OrderPriority,@CustomerID,@FreightID,@QuoteNo,@CustomerOrderNo,@BillTo,@ShipTo,@PickUpTime,@DispatchDate,@TermsID,@ListPriceTotal,@FreightTotal,@TotalAmount,@GSTEnabled,@GST,@PaymentRecieved,@PaymentDueDate,@StockLocation,@SalesMadeBy,@SalesCompletedBy,@OrderStatus,@LastModifiedDate,@LastModifiedBy)", conn);

                //Get sales id
                SqlCommand cmdMaxSalesNo = new SqlCommand("SELECT MAX(sales_no) FROM SalesOrder", conn);

                //Prepaid Customers
                //SqlCommand cmdInsertPrePaidCustomer = new SqlCommand("INSERT INTO PrePaidCustomers(quote_no,sales_no,prepaid_customer_name) " +
                //                                                     "VALUES (@QuoteNo,@SalesNo,@PrePaidCustomerName)", conn);

                SqlCommand cmdInsertPrePaidCustomer = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PrePaidCustomers WHERE prepaid_customer_name=@PrepaidCustomerName) " +
                                                                     "INSERT INTO PrePaidCustomers VALUES(@QuoteNo,@SalesNo,@PrepaidCustomerName) " +
                                                                     "ELSE " +
                                                                     "UPDATE PrePaidCustomers SET sales_no=@SalesNo " +
                                                                     "WHERE prepaid_customer_name=@PrepaidCustomerName", conn);




                //Comments
                SqlCommand cmdInsertComment = new SqlCommand("INSERT INTO Comments(prefix,no,location_id,comment,created_date,created_by,last_updated_date) " +
                                                             "VALUES (@Prefix,@No,@LocationID,@Comment,@CreatedDate,@CreatedBy,@LastUpdatedDate)", conn);
                //FreightCodes
                SqlCommand cmdInsertFreightCodes = new SqlCommand("INSERT INTO FreightDetails(order_no,freight_code_id,description,pallets,price,discount,total,last_updated_date,last_updated_by) " +
                                                                  "VALUES (@SalesNo,@FreightCodeID,@Description,@Pallets,@Price,@Discount,@Total,@LastUpdatedDate,@LastUpdatedBy)", conn);
                //SalesOrderDetails
                SqlCommand cmdInsertSalesOrderDetails = new SqlCommand("INSERT INTO SalesOrderDetails(sales_no,order_line,line_status,product_id,description,list_price,qty,discount,total) " +
                                                                       "VALUES (@SalesNo,@LineNo,@LineStatus,@ProductID,@Description,@ListPrice,@Qty,@Discount,@Total)", conn);

                SqlCommand cmdGetSalesOrderDetailsMaxID = new SqlCommand("SELECT MAX(id) FROM SalesOrderDetails", conn);

                //WarehouseOrders
                SqlCommand cmdInsertWarehouseOrders = new SqlCommand("INSERT INTO WarehouseOrders(sales_no,stock_location_id,order_packed,completed_by,completed_datetime,is_printed,is_active) " +
                                                                    "VALUES (@SalesNo,@StockLocationID,@OrderPacked,@CompletedBy,@CompletedDateTime,@IsPrinted,@IsActive)", conn);
                //WarehouseOrderItems
                SqlCommand cmdInsertWarehouseItems = new SqlCommand("INSERT INTO WarehouseOrderItems(id,sales_no,product_id,order_qty,packed_qty) " +
                                                                    "VALUES (@ID,@SalesNo,@ProductID,@OrderQty,@PackedQty)", conn);
                //ProductStockReserved
                SqlCommand cmdInsertPSR = new SqlCommand("INSERT INTO ProductStockReserved(prod_stock_reserved_id,sales_no,stock_location_id,product_id,qty_ordered,qty_reserved,qty_remaining,reserved_date,status,activity_date) " +
                                                         "VALUES (@ProdStockReservedID,@SalesNo,@StockLocationID,@ProductID,@QtyOrdered,@QtyReserved,@QtyRemaining,@ReservedDate,@Status,@ActivityDate)", conn);
                //UpdateProductStock
                SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy " +
                                                                  "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID AND qty_available <> @Qty", conn);

                //Update customer credit
                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET credit_remaining=@CreditRemaining,debt=@Debt,credit_owed=@CreditOwed WHERE " +
                                                              "id=@CustomerID", conn);

                //Add to Customer credit sales order
                SqlCommand cmdCustomerCreditSO = new SqlCommand("INSERT INTO CustomerCreditSalesOrder(customer_id,sales_order_no,credit_limit,credit_deducted,credit_remaining,debt,credit_added,updated_date,updated_by,active) " +
                                                              "VALUES (@CustomerID,@SalesNo,@CreditLimit,@CreditDeducted,@CreditRemaining,@Debt,@CreditAdded,@UpdatedDate,@UpdatedBy,@Active)", conn);

                //Add to Customer credit activity
                SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
                                                                      "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);


                SqlCommand cmdInsertProdTransactions = new SqlCommand("INSERT INTO ProductTransactions(transaction_date,qty,type,reason,sales_no,shipping_no,purchase_no,work_order_no,product_id,line_no,added_by,result) " +
                                                                      "VALUES (@TransactionDate,@Qty,@Type,@Reason,@SalesNo,@ShippingNo,@PurchaseNo,@WorkOrderNo,@ProductID,@LineNo,@AddedBy,@Result)", conn);

                //Get ProductStock TimeStamp
                SqlCommand cmdGetProductStockTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM ProductStock WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                //Update online
                SqlCommand cmdOnlineOrder = new SqlCommand("UPDATE OnlineOrders SET active=@Active,sent_to_sales=@SentToSales,sent_to_sales_datetime=@SentToSalesDateTime WHERE " +
                                                           "order_no=@OrderNo", conn);
                
                //Update quotes
                SqlCommand cmdUpdateQuotes = new SqlCommand("UPDATE Quotes SET pending_sale_to_sale=@PendingSaleToSale,pending_sale_to_sale_by=@PendingSaleToSaleBy,pending_sale_to_sale_date=@PendingSaleToSaleDate WHERE " +
                                                            "id=@QuoteNo", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    List<Tuple<Int16, string>> prodStockTS = new List<Tuple<Int16, string>>();
                    foreach (var item in poroductStockList)
                    {
                        cmdGetProductStockTimeStamp.Transaction = trans;
                        cmdGetProductStockTimeStamp.Parameters.AddWithValue("@StockLocationID", 1);
                        cmdGetProductStockTimeStamp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        using (SqlDataReader dr = cmdGetProductStockTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    prodStockTS.Add(Tuple.Create(Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                                }
                            }
                        }
                        cmdGetProductStockTimeStamp.Parameters.Clear();
                    }

                    bool y = true;
                    foreach (var item in poroductStockList)
                    {
                        y = prodStockTS.Any(x => x.Item1 == item.Product.ProductID && x.Item2 == item.TimeStamp);
                        if (y == false)
                        {
                            break;
                        }
                    }
                    if (y)
                    {

                        cmdInsertOrder.Transaction = trans;
                        //cmdInsertOrder.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        cmdInsertOrder.Parameters.AddWithValue("@OrderDate", salesOrder.OrderDate);
                        cmdInsertOrder.Parameters.AddWithValue("@OrderPriority", salesOrder.OrderPriority);
                        cmdInsertOrder.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                        cmdInsertOrder.Parameters.AddWithValue("@FreightID", salesOrder.FreightCarrier.Id);
                        cmdInsertOrder.Parameters.AddWithValue("@QuoteNo", salesOrder.QuoteNo);
                        cmdInsertOrder.Parameters.AddWithValue("@CustomerOrderNo", salesOrder.CustomerOrderNo ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@BillTo", salesOrder.BillTo ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@ShipTo", salesOrder.ShipTo ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@PickUpTime", salesOrder.PickupTime ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@DispatchDate", salesOrder.DesiredDispatchDate);
                        cmdInsertOrder.Parameters.AddWithValue("@TermsID", salesOrder.TermsID);
                        cmdInsertOrder.Parameters.AddWithValue("@ListPriceTotal", salesOrder.ListPriceTotal);
                        cmdInsertOrder.Parameters.AddWithValue("@FreightTotal", salesOrder.FreightTotal);
                        cmdInsertOrder.Parameters.AddWithValue("@TotalAmount", salesOrder.TotalAmount);
                        cmdInsertOrder.Parameters.AddWithValue("@GSTEnabled", salesOrder.GSTEnabled);
                        cmdInsertOrder.Parameters.AddWithValue("@GST", salesOrder.GST);
                        cmdInsertOrder.Parameters.AddWithValue("@PaymentRecieved", salesOrder.PaymentRecieved);
                        cmdInsertOrder.Parameters.AddWithValue("@PaymentDueDate", salesOrder.PaymentDueDate);
                        cmdInsertOrder.Parameters.AddWithValue("@StockLocation", salesOrder.StockLocation.ID);
                        cmdInsertOrder.Parameters.AddWithValue("@SalesMadeBy", salesOrder.SalesMadeBy);
                        cmdInsertOrder.Parameters.AddWithValue("@SalesCompletedBy", salesOrder.SalesCompletedBy ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@OrderStatus", salesOrder.OrderStatus ?? (object)DBNull.Value);
                        cmdInsertOrder.Parameters.AddWithValue("@LastModifiedDate", salesOrder.LastModifiedDate);
                        cmdInsertOrder.Parameters.AddWithValue("@LastModifiedBy", salesOrder.LastModifiedBy);
                        resultSalesOrder = cmdInsertOrder.ExecuteNonQuery();

                        //Get sales no
                        cmdMaxSalesNo.Transaction = trans;
                        salesNo = Convert.ToInt32(cmdMaxSalesNo.ExecuteScalar());

                        //Prepaid customers
                        cmdInsertPrePaidCustomer.Transaction = trans;
                        cmdInsertPrePaidCustomer.Parameters.AddWithValue("@QuoteNo", 0);
                        cmdInsertPrePaidCustomer.Parameters.AddWithValue("@SalesNo", salesNo);
                        cmdInsertPrePaidCustomer.Parameters.AddWithValue("@PrePaidCustomerName", salesOrder.Customer.CompanyName ?? (object)DBNull.Value);
                        cmdInsertPrePaidCustomer.ExecuteNonQuery();

                        //Comments
                        foreach (var item in salesOrder.Comments)
                        {
                            cmdInsertComment.Transaction = trans;
                            cmdInsertComment.Parameters.AddWithValue("@Prefix", item.Prefix);
                            cmdInsertComment.Parameters.AddWithValue("@No", salesNo);
                            cmdInsertComment.Parameters.AddWithValue("@LocationID", item.LocationID);
                            cmdInsertComment.Parameters.AddWithValue("@Comment", item.Note ?? (object)DBNull.Value);
                            cmdInsertComment.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                            cmdInsertComment.Parameters.AddWithValue("@CreatedBy", item.CreatedBy);
                            cmdInsertComment.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
                            cmdInsertComment.ExecuteNonQuery();
                            cmdInsertComment.Parameters.Clear();
                        }


                        //FreightCodes
                        foreach (var item in salesOrder.FreightDetails)
                        {
                            cmdInsertFreightCodes.Transaction = trans;
                            cmdInsertFreightCodes.Parameters.AddWithValue("@SalesNo", salesNo);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.ID);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Description", item.DummyDescription);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Pallets", item.Pallets);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Price", item.DummyPrice);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Discount", item.Discount);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Total", item.Total);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@LastUpdatedBy", salesOrder.LastModifiedBy);
                            resultFreightCodes.Add(cmdInsertFreightCodes.ExecuteNonQuery());
                            cmdInsertFreightCodes.Parameters.Clear();
                        }

                        for (int i = 0; i < salesOrder.SalesOrderDetails.Count; i++)
                        {
                            //Sales Order Items
                            cmdInsertSalesOrderDetails.Transaction = trans;
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesNo);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@LineNo", salesOrder.SalesOrderDetails[i].OrderLine);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@LineStatus", "Open");
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@Description", salesOrder.SalesOrderDetails[i].QuoteProductDescription);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@ListPrice", salesOrder.SalesOrderDetails[i].QuoteUnitPrice);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@Qty", salesOrder.SalesOrderDetails[i].Quantity);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@Discount", salesOrder.SalesOrderDetails[i].Discount);
                            cmdInsertSalesOrderDetails.Parameters.AddWithValue("@Total", salesOrder.SalesOrderDetails[i].Total);
                            resultSalesOrderDetails.Add(cmdInsertSalesOrderDetails.ExecuteNonQuery());
                            cmdInsertSalesOrderDetails.Parameters.Clear();

                            cmdGetSalesOrderDetailsMaxID.Transaction = trans;
                            Int32 maxSODID = 0;
                            maxSODID = Convert.ToInt32(cmdGetSalesOrderDetailsMaxID.ExecuteScalar());

                            salesOrder.SalesOrderDetails[i].SalesOrderDetailsID = maxSODID;

                            if (salesOrder.OrderStatus == OrderStatus.InWarehouse.ToString() || salesOrder.OrderStatus == OrderStatus.HoldStockAllocated.ToString() ||
                            salesOrder.OrderStatus == OrderStatus.HoldNoCreditStockAllocated.ToString())
                            {
                                //Warehouse OrderItems                            
                                cmdInsertWarehouseItems.Transaction = trans;
                                cmdInsertWarehouseItems.Parameters.AddWithValue("@ID", maxSODID);
                                cmdInsertWarehouseItems.Parameters.AddWithValue("@SalesNo", salesNo);
                                cmdInsertWarehouseItems.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
                                cmdInsertWarehouseItems.Parameters.AddWithValue("@OrderQty", salesOrder.SalesOrderDetails[i].Quantity);
                                cmdInsertWarehouseItems.Parameters.AddWithValue("@PackedQty", 0);
                                cmdInsertWarehouseItems.ExecuteNonQuery();
                                cmdInsertWarehouseItems.Parameters.Clear();
                            }      

                            //Reserve stock if any
                            if (productStockReserved.Count > 0)
                            {
                                for (int x = 0; x < productStockReserved.Count; x++)
                                {
                                    if (x == i)
                                    {  
                                        cmdInsertPSR.Transaction = trans;
                                        cmdInsertPSR.Parameters.AddWithValue("@ProdStockReservedID", maxSODID);
                                        cmdInsertPSR.Parameters.AddWithValue("@SalesNo", salesNo);
                                        cmdInsertPSR.Parameters.AddWithValue("@StockLocationID", productStockReserved[x].StockLocation.ID);
                                        cmdInsertPSR.Parameters.AddWithValue("@ProductID", productStockReserved[x].Product.ProductID);
                                        cmdInsertPSR.Parameters.AddWithValue("@QtyOrdered", productStockReserved[x].QtyOrdered);
                                        cmdInsertPSR.Parameters.AddWithValue("@QtyReserved", productStockReserved[x].QtyReserved);
                                        cmdInsertPSR.Parameters.AddWithValue("@QtyRemaining", productStockReserved[x].QtyRemaining);
                                        cmdInsertPSR.Parameters.AddWithValue("@ReservedDate", productStockReserved[x].ReservedDate);
                                        cmdInsertPSR.Parameters.AddWithValue("@Status", productStockReserved[x].Status);
                                        cmdInsertPSR.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
                                        result = cmdInsertPSR.ExecuteNonQuery();
                                        cmdInsertPSR.Parameters.Clear();

                                        if (productStockReserved[x].QtyReserved > 0)
                                        {
                                            //var xx = salesOrder.SalesOrderDetails.SingleOrDefault(z => z.SalesOrderDetailsID == productStockReserved[x].ProductStockReservedID);
                                            /**INSERT to ProductTransactions**/
                                            cmdInsertProdTransactions.Transaction = trans;
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@TransactionDate", DateTime.Now);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@Qty", "-" + productStockReserved[x].QtyReserved);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@Type", ProductTransactionsStatus.SalesOrder.ToString());
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@Reason", "Sales Order");
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@SalesNo", salesNo);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@ShippingNo", 0);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@PurchaseNo", 0);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@WorkOrderNo", 0);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@ProductID", productStockReserved[x].Product.ProductID);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@LineNo", salesOrder.SalesOrderDetails[i].OrderLine);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@AddedBy", salesOrder.LastModifiedBy);
                                            cmdInsertProdTransactions.Parameters.AddWithValue("@Result", "Deducted");
                                            cmdInsertProdTransactions.ExecuteNonQuery();
                                            cmdInsertProdTransactions.Parameters.Clear();
                                        }
                                    }
                                }
                            }

                            //Add to transaction
                            Transaction = new TransactionLog()
                            {
                                TransDateTime = DateTime.Now,
                                Transtype = "New Sales Order",
                                SalesOrderID = salesNo,
                                Products = new List<RawStock>()
                                {
                                  new RawStock(){RawProductID = salesOrder.SalesOrderDetails[i].Product.RawProduct.RawProductID,Qty=salesOrder.SalesOrderDetails[i].Quantity},  
                                },
                                CreatedBy = userName
                            };
                            int r = DBAccess.InsertTransaction(Transaction);
                            
                        }                                              

                        //Deduct from stock
                        if (poroductStockList.Count > 0)
                        {
                            foreach (var item in poroductStockList)
                            {
                                cmdUpdateProductStock.Transaction = trans;
                                cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                                cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
                                cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                result = cmdUpdateProductStock.ExecuteNonQuery();
                                cmdUpdateProductStock.Parameters.Clear();
                            }
                        }

                        if (salesOrder.OrderStatus == OrderStatus.InWarehouse.ToString() || salesOrder.OrderStatus == OrderStatus.HoldStockAllocated.ToString() ||
                            salesOrder.OrderStatus == OrderStatus.HoldNoCreditStockAllocated.ToString())
                        {
                            if (salesOrder.Customer.CustomerType == "Account")
                            {
                                //Update customer
                                cmdUpdateCustomer.Transaction = trans;
                                cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                                cmdUpdateCustomer.Parameters.AddWithValue("@CreditRemaining", salesOrder.Customer.CustomerCreditHistory.TotalCreditRemaining);
                                cmdUpdateCustomer.Parameters.AddWithValue("@Debt", salesOrder.Customer.CustomerCreditHistory.TotalDebt);
                                cmdUpdateCustomer.Parameters.AddWithValue("@CreditOwed", salesOrder.Customer.CustomerCreditHistory.TotalCreditOwed);
                                cmdUpdateCustomer.ExecuteNonQuery();

                                //Add to customer credit salesorder                            
                                cmdCustomerCreditSO.Transaction = trans;
                                cmdCustomerCreditSO.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@SalesNo", salesNo);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@CreditLimit", salesOrder.Customer.CreditLimit);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@CreditDeducted", salesOrder.Customer.CustomerCreditHistory.CreditDeducted);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@CreditRemaining", salesOrder.Customer.CustomerCreditHistory.CreditRemaining);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@Debt", salesOrder.Customer.CustomerCreditHistory.Debt);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@CreditAdded", salesOrder.Customer.CustomerCreditHistory.CreditAdded);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@UpdatedDate", salesOrder.Customer.CustomerCreditHistory.UpdatedDate);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@UpdatedBy", salesOrder.Customer.CustomerCreditHistory.UpdatedBy);
                                cmdCustomerCreditSO.Parameters.AddWithValue("@Active", salesOrder.Customer.CustomerCreditHistory.Active);
                                resultCustomerCreditStockAdded = cmdCustomerCreditSO.ExecuteNonQuery();

                                //Add to customer credit activity                            
                                cmdCustomerCreditActivity.Transaction = trans;
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", salesNo);
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", creditTuple.Item2.Amount);
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", creditTuple.Item2.Type);
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", creditTuple.Item2.Activity);
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", creditTuple.Item2.UpdatedDate);
                                cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", string.IsNullOrWhiteSpace(salesOrder.Customer.CustomerCreditHistory.UpdatedBy) ? UserData.FirstName + " " + UserData.LastName : salesOrder.Customer.CustomerCreditHistory.UpdatedBy);
                                cmdCustomerCreditActivity.ExecuteNonQuery();
                            }
                            else
                            {
                                if (salesOrder.OrderStatus == OrderStatus.HoldStockAllocated.ToString() || salesOrder.OrderStatus == OrderStatus.HoldNoCreditStockAllocated.ToString())
                                {
                                    resultCustomerCreditNoHold = 1;
                                }
                            }
                            
                            /**************************************WAREHOUSE***************************************/
                            //Add to Warehouse
                            cmdInsertWarehouseOrders.Transaction = trans;
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@SalesNo", salesNo);
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@OrderPacked", false);
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@CompletedBy", string.Empty ?? (object)DBNull.Value);
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@CompletedDateTime", null ?? (object)DBNull.Value);
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@IsPrinted", false);
                            cmdInsertWarehouseOrders.Parameters.AddWithValue("@IsActive", salesOrder.OrderStatus == OrderStatus.InWarehouse.ToString() ? true : false);
                            resultWarehouseAdded = cmdInsertWarehouseOrders.ExecuteNonQuery();                                              

                            /************************************END OF WAREHOUSE***********************************/
                        }
                        int resPendingOrders = 0;
                        if (oo != null)
                        {
                            string originType = oo.Origin.ToString();
                            if (originType == OrderOriginTypes.A1RubberOnline.ToString())
                            {
                                OnlineOrder onlineOrder = (OnlineOrder)oo.OrderType;

                                cmdOnlineOrder.Transaction = trans;
                                cmdOnlineOrder.Parameters.AddWithValue("@OrderNo", onlineOrder.OnlineOrderNo);
                                cmdOnlineOrder.Parameters.AddWithValue("@Active", false);
                                cmdOnlineOrder.Parameters.AddWithValue("@SentToSales", true);
                                cmdOnlineOrder.Parameters.AddWithValue("@SentToSalesDateTime", DateTime.Now);
                                resPendingOrders=cmdOnlineOrder.ExecuteNonQuery();

                            }
                            else if (originType == OrderOriginTypes.Sales.ToString())
                            {
                                PendingQuote pendingQuote = (PendingQuote)oo.OrderType;
                             
                                cmdUpdateQuotes.Transaction = trans;
                                cmdUpdateQuotes.Parameters.AddWithValue("@QuoteNo", pendingQuote.QuoteNo);
                                cmdUpdateQuotes.Parameters.AddWithValue("@PendingSaleToSale", true);
                                cmdUpdateQuotes.Parameters.AddWithValue("@PendingSaleToSaleBy", UserData.FirstName + " " + UserData.LastName);
                                cmdUpdateQuotes.Parameters.AddWithValue("@PendingSaleToSaleDate", DateTime.Now);
                                resPendingOrders=cmdUpdateQuotes.ExecuteNonQuery();
                            }                            
                        }

                        if (resultSalesOrder > 0 && resultSalesOrderDetails.Count > 0 || (oo != null && resPendingOrders > 0))
                        {
                            if (resultCustomerCreditHold > 0)
                            {
                                tupResult = Tuple.Create(1, salesNo);
                                //result = 1;
                            }
                            else if (resultCustomerCreditNoHold > 0)
                            {
                                tupResult = Tuple.Create(2, salesNo);
                                //result = 2;
                            }
                            else if (resultWarehouseAdded > 0 && resultCustomerCreditStockAdded > 0)
                            {
                                tupResult = Tuple.Create(3, salesNo);
                                //result = 3;
                            }
                            else if (resultWarehouseAdded > 0)
                            {
                                tupResult = Tuple.Create(4, salesNo);
                                //result = 4;
                            }
                            else if (salesOrder.OrderStatus == OrderStatus.HoldNoStock.ToString())
                            {
                                tupResult = Tuple.Create(5, salesNo);
                                //result = 5;
                            }
                            else if (salesOrder.OrderStatus == OrderStatus.Hold.ToString())
                            {
                                tupResult = Tuple.Create(6, salesNo);
                                //result = 6;
                            }
                            else if (salesOrder.OrderStatus == OrderStatus.HoldNoCredit.ToString())
                            {
                                tupResult = Tuple.Create(7, salesNo);
                                //result = 7;
                            }
                            else if (salesOrder.OrderStatus == OrderStatus.HoldNoCreditNoStock.ToString())
                            {
                                tupResult = Tuple.Create(8, salesNo);
                                //result = 8;
                            }
                        }
                        else
                        {
                            tupResult = Tuple.Create(0, salesNo);
                            //result = -2;
                        }
                    }
                    else
                    {
                        tupResult = Tuple.Create(0, salesNo);
                        //result = -3;
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding to SalesOrders: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return tupResult;
            }

        }

        public static int InsertTransaction(TransactionLog transaction)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO Transactions(transaction_datetime, transaction_type, sales_order_id, raw_product_id,qty,created_by) " +
                                                           "VALUES (@TDateTime,@TType,@SalesOrderID,@RawProductID,@Qty,@CreatedBy)", conn))
                    {
                        foreach (var item in transaction.Products)
                        {
                            cmd.Parameters.AddWithValue("@TDateTime", transaction.TransDateTime);
                            cmd.Parameters.AddWithValue("@TType", transaction.Transtype);
                            cmd.Parameters.AddWithValue("@SalesOrderID", transaction.SalesOrderID);
                            cmd.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                            cmd.Parameters.AddWithValue("@Qty", item.Qty);
                            cmd.Parameters.AddWithValue("@CreatedBy", transaction.CreatedBy);
                            result = cmd.ExecuteNonQuery();
                        }

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int ReturnSalesOrder(SalesOrder salesOrder, List<ProductStockReserved> productStockReserved, List<ProductStock> poroductStockList, Tuple<CustomerCreditHistory, CustomerCreditActivity> creditTuple, List<Tuple<string, Int16, string>> oldTimeStamps)
        {
            int result = 0;
            List<int> pstock = new List<int>();
            List<int> pTrans = new List<int>();
            List<int> updateProdStockReservedRes = new List<int>();
            int cusCredHis = 0;

            List<Tuple<string, Int16, string>> newTimeStamps = GetUpdateSalesOrderTimeStamp(salesOrder.SalesOrderNo);

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SalesOrder
                SqlCommand cmdUpdateOrder = new SqlCommand("UPDATE SalesOrder SET order_status=@OrderStatus,last_modified_date=@LastModifiedDate,last_modified_by=@LastModifiedBy " +
                                                           "WHERE sales_no=@SalesNo", conn);

                //UpdateProductStock
                SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy WHERE " +
                                                                  "stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                //Deduct credit
                SqlCommand cmdDeductCredit = new SqlCommand("UPDATE Customers SET credit_remaining=@CreditRemaining,credit_owed=@CreditOwed, debt=@Debt " +
                                                            "WHERE id=@CusId", conn);

                //Insert Customer Credit
                //SqlCommand cmdUpdateCusCredHistory = new SqlCommand("INSERT INTO CustomerCreditHistory(customer_id,sales_order_no,credit_limit,credit_deducted,credit_remaining,debt,credit_added,updated_date,updated_by,activity,active) " + 
                //                                                    "VALUES(@CusID,@SalesOrderNo,@CreditLimit,@CreditDeducted,@CreditRemaining,@Debt,@CreditAdded,@UpdatedDate,@UpdatedBy,@Activity,@Active)", conn);

                SqlCommand cmdUpdateCusCredHistory = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CustomerCreditSalesOrder WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo) " +
                                                                    "INSERT INTO CustomerCreditSalesOrder VALUES(@CusID,@SalesOrderNo,@CreditLimit,@CreditDeducted,@CreditRemaining,@Debt,@CreditAdded,@UpdatedDate,@UpdatedBy,@Active) " +
                                                                    "ELSE " +
                                                                    "UPDATE CustomerCreditSalesOrder SET credit_deducted=@CreditDeducted,credit_remaining=@CreditRemaining,debt=@Debt,active=@Active,updated_date=@UpdatedDate,updated_by=@UpdatedBy " +
                                                                    "WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo", conn);

                //Add to Customer credit activity
                SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
                                                                      "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);

                SqlCommand cmdInsertProdTransactions = new SqlCommand("INSERT INTO ProductTransactions(transaction_date,qty,type,reason,sales_no,shipping_no,purchase_no,work_order_no,product_id,line_no,added_by,result) " +
                                                                      "VALUES (@TransactionDate,@Qty,@Type,@Reason,@SalesNo,@ShippingNo,@PurchaseNo,@WorkOrderNo,@ProductID,@LineNo,@AddedBy,@Result)", conn);

                SqlCommand cmdUpdateInsertProdStockReserved = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ProductStockReserved " +
                                                                             "WHERE prod_stock_reserved_id=@ProdStockReservedID) " +
                                                                             "INSERT INTO ProductStockReserved(prod_stock_reserved_id,sales_no,stock_location_id,product_id,qty_ordered,qty_reserved,qty_remaining,reserved_date,status,activity_date) VALUES(@ProdStockReservedID,@SalesNo,@StockLocationID,@ProductID,@QtyOrdered,@QtyReserved,@QtyRemaining,@ReservedDate,@Status,@ActivityDate) " +
                                                                             "ELSE " +
                                                                             "UPDATE ProductStockReserved SET prod_stock_reserved_id=@ProdStockReservedID, qty_ordered=@QtyOrdered,qty_reserved=@QtyReserved,qty_remaining=@QtyRemaining,status=@Status,activity_date=@ActivityDate " +
                                                                             "WHERE prod_stock_reserved_id=@ProdStockReservedID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    //Check if timestamps are not changed
                    bool exec = false;
                    foreach (var items in oldTimeStamps)
                    {
                        exec = newTimeStamps.Any(z => z.Item1 == items.Item1 && z.Item2 == items.Item2 && z.Item3.Equals(items.Item3));
                        if (exec == false)
                        {
                            break;
                        }
                    }

                    if (exec)
                    {

                        cmdUpdateOrder.Transaction = trans;
                        cmdUpdateOrder.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        cmdUpdateOrder.Parameters.AddWithValue("@OrderStatus", salesOrder.OrderStatus ?? (object)DBNull.Value);
                        cmdUpdateOrder.Parameters.AddWithValue("@LastModifiedDate", salesOrder.LastModifiedDate);
                        cmdUpdateOrder.Parameters.AddWithValue("@LastModifiedBy", salesOrder.LastModifiedBy);
                        int updateSalesOrderRes = cmdUpdateOrder.ExecuteNonQuery();

                        //Add to productstock
                        if (poroductStockList.Count > 0)
                        {
                            foreach (var item in poroductStockList)
                            {
                                var i = salesOrder.SalesOrderDetails.FirstOrDefault(x => x.Product.ProductID == item.Product.ProductID);
                                cmdUpdateProductStock.Transaction = trans;
                                cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                                cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
                                cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", UserData.LastName + " " + UserData.LastName);
                                pstock.Add(cmdUpdateProductStock.ExecuteNonQuery());
                                cmdUpdateProductStock.Parameters.Clear();                               
                            }
                        }

                        foreach (var item in productStockReserved)
                        {
                            cmdUpdateInsertProdStockReserved.Transaction = trans;
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ProdStockReservedID", item.ProductStockReservedID);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@SalesNo", item.SalesNo);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyOrdered", item.QtyOrdered);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyReserved", item.QtyReserved);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyRemaining", item.QtyRemaining);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ReservedDate", item.ReservedDate);
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@Status", StockReserved.Returned.ToString());
                            cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
                            updateProdStockReservedRes.Add(cmdUpdateInsertProdStockReserved.ExecuteNonQuery());
                            cmdUpdateInsertProdStockReserved.Parameters.Clear();
                        }


                        /**************CUSTOMER CREDIT**************/
                        if (salesOrder.Customer.CustomerType == "Account")
                        {
                            //Updating customer credit
                            cmdDeductCredit.Transaction = trans;
                            cmdDeductCredit.Parameters.AddWithValue("@CusId", salesOrder.Customer.CustomerId);
                            cmdDeductCredit.Parameters.AddWithValue("@CreditRemaining", creditTuple.Item1.TotalCreditRemaining);
                            cmdDeductCredit.Parameters.AddWithValue("@CreditOwed", creditTuple.Item1.TotalCreditOwed);
                            cmdDeductCredit.Parameters.AddWithValue("@Debt", creditTuple.Item1.TotalDebt);
                            cmdDeductCredit.ExecuteNonQuery();

                            //Updating customer credit history
                            cmdUpdateCusCredHistory.Transaction = trans;
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@CusId", salesOrder.Customer.CustomerId);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditLimit", salesOrder.Customer.CreditLimit);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditDeducted", 0);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditRemaining", creditTuple.Item1.CreditRemaining);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@Debt", creditTuple.Item1.Debt);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditAdded", creditTuple.Item1.CreditDeducted);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@UpdatedDate", DateTime.Now);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@UpdatedBy", salesOrder.LastModifiedBy);
                            cmdUpdateCusCredHistory.Parameters.AddWithValue("@Active", creditTuple.Item1.Active);
                            cusCredHis = cmdUpdateCusCredHistory.ExecuteNonQuery();

                            //Add to customer credit activity                            
                            cmdCustomerCreditActivity.Transaction = trans;
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", creditTuple.Item2.Amount);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", creditTuple.Item2.Type);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", creditTuple.Item2.Activity);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", creditTuple.Item2.UpdatedDate);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", creditTuple.Item2.UpdatedBy);
                            cmdCustomerCreditActivity.ExecuteNonQuery();
                        }
                        /*********END OF CUSTOMER CREDIT**************/


                        if (pstock.Any(x => x > 0) && updateProdStockReservedRes.Any(x => x > 0) || (salesOrder.Customer.CustomerType == "Account" && cusCredHis > 0))
                        {
                            result = 1;
                        }

                        trans.Commit();
                    }
                    else
                    {
                        result = -1;
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        //public static Int32 UpdateSalesOrder(SalesOrder salesOrder, List<ProductStockReserved> productStockReserved, List<ProductStock> poroductStockList, List<ProductStock> upProdStock, Tuple<CustomerCreditHistory, CustomerCreditActivity> creditTuple)
        //{
        //    Int32 result = 0;
        //    //TransactionLog Transaction = null;

        //    string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
        //    if (String.IsNullOrEmpty(userName))
        //    {
        //        userName = "Unknown";
        //    }

        //    //List<Tuple<string, Int16, string>> newTimeStamps = GetUpdateSalesOrderTimeStamp(salesOrder.SalesOrderNo);

        //    using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
        //    {
        //        //SalesOrder
        //        SqlCommand cmdUpdateOrder = new SqlCommand("UPDATE SalesOrder SET order_date=@OrderDate,order_priority=@OrderPriority,customer_id=@CustomerID,freight_id=@FreightID,quote_no=@QuoteNo,customer_order_no=@CustomerOrderNo,bill_to=@BillTo,ship_to=@ShipTo,pickup_time=@PickUpTime,dispatch_date=@DispatchDate,terms_id=@TermsID,list_price_total=@ListPriceTotal,freight_total=@FreightTotal,total_amount=@TotalAmount,gst=@GST,payment_recieved=@PaymentRecieved,stock_location=@StockLocation,order_status=@OrderStatus,gst_enabled=@GSTEnabled " +
        //                                                   "WHERE sales_no=@SalesNo AND " +
        //                                                   "(order_priority <> @OrderPriority OR customer_id <> @CustomerID OR freight_id <> @FreightID OR quote_no <> @QuoteNo OR customer_order_no <> @CustomerOrderNo OR bill_to <> @BillTo OR ship_to <> @ShipTo OR pickup_time <> @PickUpTime OR dispatch_date <> @DispatchDate OR terms_id <> @TermsID OR list_price_total <> @ListPriceTotal OR freight_total <> @FreightTotal OR total_amount <> @TotalAmount OR gst <> @GST OR payment_recieved <> @PaymentRecieved OR stock_location <> @StockLocation OR order_status <> @OrderStatus OR gst_enabled <> @GSTEnabled)", conn);
        //        //PrePaid Customers
        //        SqlCommand cmdUpdatePrePaidCustomer = new SqlCommand("UPDATE PrePaidCustomers SET prepaid_customer_name=@PrePaidCustomers " +
        //                                                             "WHERE sales_no=@SalesNo AND prepaid_customer_name <> @PrePaidCustomers", conn);
                
        //        SqlCommand cmdUpdateComments = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Comments " +
        //                                                      "WHERE no=@SalesNo AND location_id=@LocationID) " +
        //                                                      "INSERT INTO Comments(prefix,no,location_id,comment,created_date,created_by,last_updated_date) VALUES(@Prefix,@SalesNo,@LocationID,@Comment,@CreatedDate,@CreatedBy,@LastUpdatedDate) " +
        //                                                      "ELSE " +
        //                                                      "UPDATE Comments SET comment=@Comment " +
        //                                                      "WHERE no=@SalesNo AND location_id=@LocationID AND (comment is null OR(comment <> @Comment))", conn);

        //        //Comments Update date
        //        SqlCommand cmdUpdateCommentsDate = new SqlCommand("UPDATE Comments SET last_updated_date=@LastUpdatedDate " +
        //                                                          "WHERE no=@SalesNo", conn);
        //        //Warehouse Orders
        //        SqlCommand cmdUpdateWarehouseOrders = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM WarehouseOrders " +
        //                                                             "WHERE sales_no=@SalesNo) " +
        //                                                             "INSERT INTO WarehouseOrders VALUES(@SalesNo,@StockLocationID,@OrderPacked,@CompletedBy,@CompletedDate,@IsPrinted,@IsActive) " +
        //                                                             "ELSE " +
        //                                                             "UPDATE WarehouseOrders SET is_active=@IsActive,order_packed=@OrderPacked,completed_by=@CompletedBy,completed_datetime=@CompletedDate " +
        //                                                             "WHERE sales_no=@SalesNo", conn);

        //        //Update ProductStockReserved
        //        SqlCommand cmdUpdateProductStockReserved = new SqlCommand("UPDATE ProductStockReserved SET qty_reserved=@QtyReserved,qty_remaining=@QtyRemaining,status=@Status,activity_date=@ActivityDate " +
        //                                                                  "WHERE sales_no=@SalesNo AND stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

        //        //Update/Insert ProductStockReserved
        //        SqlCommand cmdUpdateInsertProdStockReserved = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ProductStockReserved " +
        //                                                                     //"WHERE sales_no=@SalesNo AND stock_location_id=@StockLocationID AND product_id=@ProductID) " +
        //                                                                     "WHERE prod_stock_reserved_id=@ProdStockReservedID) " +
        //                                                                     "INSERT INTO ProductStockReserved(sales_no,stock_location_id,product_id,qty_ordered,qty_reserved,qty_remaining,reserved_date,status,activity_date) VALUES(@SalesNo,@StockLocationID,@ProductID,@QtyOrdered,@QtyReserved,@QtyRemaining,@ReservedDate,@Status,@ActivityDate) " +
        //                                                                     "ELSE " +
        //                                                                     "UPDATE ProductStockReserved SET qty_ordered=@QtyOrdered,qty_reserved=@QtyReserved,qty_remaining=@QtyRemaining,status=@Status,activity_date=@ActivityDate " +
        //                                                                     "WHERE prod_stock_reserved_id=@ProdStockReservedID", conn);
        //        //UpdateProductStock
        //        SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy WHERE " +
        //                                                          "stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

        //        //SalesOrderDetails
        //        SqlCommand cmdInsertUpdateSalesOrderDetails = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SalesOrderDetails " +
        //                                                                     "WHERE id=@SalesOrderDetailsID) " +
        //                                                                     "INSERT INTO SalesOrderDetails(sales_no,order_line,line_status,product_id,description,list_price,qty,discount,total) VALUES(@SalesNo,@OrderLine,@LineStatus,@ProductID,@Description,@ListPrice,@Qty,@Discount,@Total) " +
        //                                                                     "ELSE " +
        //                                                                     "UPDATE SalesOrderDetails SET order_line=@OrderLine,qty=@Qty,@Description=description,@ListPrice=list_price,discount=@Discount,total=@Total " +
        //                                                                     "WHERE id=@SalesOrderDetailsID AND (order_line <> @OrderLine OR qty <> @Qty OR discount <> @Discount OR total <> @Total OR @Description <> description OR @ListPrice <> list_price)", conn);
                
        //        //Get SalesOrderDetails
        //        SqlCommand cmdGetSalesOrderDetails = new SqlCommand("SELECT * FROM SalesOrderDetails " +
        //                                                            "WHERE sales_no=@SalesNo", conn);
        //        //Delete SalesOrderDetails
        //        SqlCommand cmdDeleteSalesOrderDetails = new SqlCommand("DELETE FROM SalesOrderDetails " +
        //                                                               "WHERE sales_no=@SalesNo", conn);

        //        SqlCommand cmdUpdateOrder2 = new SqlCommand("UPDATE SalesOrder SET last_modified_date=@LastModifiedDate,last_modified_by=@LastModifiedBy " +
        //                                                    "WHERE sales_no=@SalesNo", conn);

        //        //Delete ProductStockReserved
        //        SqlCommand cmdDeleteProdStockReserved = new SqlCommand("DELETE FROM ProductStockReserved " +
        //                                                               "WHERE sales_no=@SalesNo AND stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

        //        //Delete WarehouseItems
        //        SqlCommand cmdDeleteWarehouseItems = new SqlCommand("DELETE FROM WarehouseOrderItems " +
        //                                                            "WHERE sales_no=@SalesNo AND product_id=@ProductID", conn);

        //        //Delete DispatchItems
        //        SqlCommand cmdDeleteDispatchItems = new SqlCommand("DELETE FROM DispatchOrderItem " +
        //                                                           "WHERE sales_no=@SalesNo AND product_id=@ProductID", conn);

        //        //Add credit
        //        SqlCommand cmdAddCredit = new SqlCommand("UPDATE Customers SET credit_remaining+=@CreditRemaining, debt=@Debt " +
        //                                                 "WHERE id=@CusId", conn);
        //        //Deduct credit
        //        SqlCommand cmdUpdateCredit = new SqlCommand("UPDATE Customers SET credit_remaining=@CreditRemaining,credit_owed=@CreditOwed, debt=@Debt " +
        //                                                    "WHERE id=@CusId AND (credit_remaining<> @CreditRemaining OR credit_owed<>@CreditOwed OR debt<>@Debt)", conn);
        //        //Check Total
        //        //Get SalesOrderDetails
        //        SqlCommand cmdCheckSalesTotal = new SqlCommand("SELECT order_status,total_amount FROM SalesOrder " +
        //                                                       "WHERE sales_no=@SalesNo", conn);
        //        //Freght Details
        //        SqlCommand cmdInsertFreightCodes = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM FreightDetails " +
        //                                                          "WHERE order_no=@SalesNo AND freight_code_id=@FreightCodeID) " +
        //                                                          "INSERT INTO FreightDetails(order_no,freight_code_id,description,pallets,price,discount,total,last_updated_date,last_updated_by) VALUES(@SalesNo,@FreightCodeID,@Description,@Pallets,@Price,@Discount,@Total,@LastUpdatedDate,@LastUpdateBy) " +
        //                                                          "ELSE " +
        //                                                          "UPDATE FreightDetails SET freight_code_id=@FreightCodeID,description=@Description,pallets=@Pallets,price=@Price,discount=@Discount,total=@Total " +
        //                                                          "WHERE order_no=@SalesNo AND freight_code_id=@FreightCodeID AND (freight_code_id <> @FreightCodeID OR description<> @Description OR pallets <> @Pallets OR price <> @Price OR discount <> @Discount OR total <> @Total)", conn);
        //        //Select FreightDetails
        //        SqlCommand cmdFreightGetDetails = new SqlCommand("SELECT * FROM FreightDetails " +
        //                                                         "WHERE order_no=@OrderNo", conn);
        //        //Delete FreightDetails
        //        SqlCommand cmdDeleteFreightDetails = new SqlCommand("DELETE FROM FreightDetails " +
        //                                                            "WHERE order_no=@OrderNo AND freight_code_id=@FreightCodeID", conn);
        //        //Update Freight Details Date and user
        //        SqlCommand cmdUpdateFreightCodesDate = new SqlCommand("UPDATE FreightDetails SET last_updated_date=@LastUpdatedDate,last_updated_by=@LastUpdateBy WHERE order_no = @OrderNo AND freight_code_id = @FreightCodeID", conn);

        //        //WarehouseOrderItems
        //        SqlCommand cmdInsertUpdateWarehouseOrderItems = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM WarehouseOrderItems " +
        //                                                                     "WHERE sales_no=@SalesNo AND product_id=@ProductID) " +
        //                                                                     "INSERT INTO WarehouseOrderItems VALUES(@SalesNo,@ProductID,@OrderQty,@PackedQty) " +
        //                                                                     "ELSE " +
        //                                                                     "UPDATE WarehouseOrderItems SET order_qty=@OrderQty,packed_qty=@PackedQty " +
        //                                                                     "WHERE sales_no=@SalesNo AND product_id=@ProductID AND (order_qty <> @OrderQty OR packed_qty <> @PackedQty)", conn);
        //        ////Get Customer Credit History
        //        SqlCommand cmdGetCustomerCreditHis = new SqlCommand("SELECT * FROM CustomerCreditSalesOrder " +
        //                                                            "WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo", conn);

        //        //Update Customer Credit
        //        SqlCommand cmdUpdateCusCredHistory = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CustomerCreditSalesOrder WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo) " +
        //                                                            "INSERT INTO CustomerCreditSalesOrder VALUES(@CusID,@SalesOrderNo,@CreditLimit,@CreditDeducted,@CreditRemaining,@Debt,@CreditAdded,@UpdatedDate,@UpdatedBy,@Active) " +
        //                                                            "ELSE " +
        //                                                            "UPDATE CustomerCreditSalesOrder SET credit_deducted=@CreditDeducted,credit_remaining=@CreditRemaining,debt=@Debt,active=@Active " +
        //                                                            "WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo", conn);

        //        //Add to Customer credit activity
        //        SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
        //                                                              "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);

        //        //Dispatch Orders
        //        SqlCommand cmdUpdateDispatchOrders = new SqlCommand("UPDATE DispatchOrders " +
        //                                                            "SET order_dispatched=@OrderDispatched,dispatched_date=@DispatchedDate,order_status=@OrderStatus,is_processing=@IsProcessing,completed_by=@CompletedBy,completed_date_time=@CompletedDate,is_active=@IsActive " +
        //                                                            "WHERE sales_no=@SalesOrderNo", conn);//AND (order_status ='Dispatched' OR order_status = 'Return'  OR order_status = 'ReadyToDispatch')

        //        SqlCommand cmdUpdateDispatchOrderItems = new SqlCommand("UPDATE DispatchOrderItem " +
        //                                                                "SET order_qty=@OrderQty,packed_qty=@PackedQty,dispatched_qty=@DispatchedQty " +
        //                                                                "WHERE sales_no=@SalesOrderNo AND product_id=@ProductID", conn);

        //        //Invoice
        //        //SqlCommand cmdInvoiceActive = new SqlCommand("SELECT is_active FROM Invoice " +
        //        //                                             "WHERE sales_order_no=@SalesOrderNo", conn);

        //        SqlCommand cmdUpdateInvoice = new SqlCommand("UPDATE Invoice SET is_active=@IsActive,is_completed=@IsCompleted,completed_by=@CompletedBy,completed_date=@CompletedDate,exported_to_myob=@ExportedToMyob " +
        //                                                     "WHERE sales_order_no=@SalesOrderNo", conn);

        //        //Warehouse Orders
        //        SqlCommand cmdGetDispatchOrders = new SqlCommand("SELECT * FROM DispatchOrders " +
        //                                                          "WHERE sales_no=@SalesNo", conn);

        //        SqlTransaction trans = null;
        //        conn.Open();
        //        trans = conn.BeginTransaction();
        //        try
        //        {
        //            ////Check if timestamps are not changed
        //            //bool exec = false;
        //            //foreach (var items in oldTimeStamps)
        //            //{
        //            //    exec = newTimeStamps.Any(z => z.Item1 == items.Item1 && z.Item2 == items.Item2 && z.Item3.Equals(items.Item3));
        //            //    if (exec == false)
        //            //    {
        //            //        break;
        //            //    }
        //            //}

        //            //if (exec)
        //            //{


        //            //Update or insert products                        
        //            List<int> upInSalesOrderDetailsResList = new List<int>();
        //            for (int i = 0; i < salesOrder.SalesOrderDetails.Count; i++)
        //            {
        //                cmdInsertUpdateSalesOrderDetails.Transaction = trans;
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesOrderDetailsID", salesOrder.SalesOrderDetails[i].SalesOrderDetailsID);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@OrderLine", salesOrder.SalesOrderDetails[i].OrderLine);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@LineStatus", "Open");
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Description", salesOrder.SalesOrderDetails[i].QuoteProductDescription);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ListPrice", salesOrder.SalesOrderDetails[i].QuoteUnitPrice);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Qty", salesOrder.SalesOrderDetails[i].Quantity);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Discount", salesOrder.SalesOrderDetails[i].Discount);
        //                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Total", salesOrder.SalesOrderDetails[i].Total);
        //                upInSalesOrderDetailsResList.Add(cmdInsertUpdateSalesOrderDetails.ExecuteNonQuery());
        //                cmdInsertUpdateSalesOrderDetails.Parameters.Clear();

        //            }

        //            /*************Delete removed products************/
        //            cmdGetSalesOrderDetails.Transaction = trans;
        //            cmdGetSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //            List<SalesOrderDetails> soList = new List<SalesOrderDetails>();
        //            using (SqlDataReader dr = cmdGetSalesOrderDetails.ExecuteReader())
        //            {
        //                if (dr != null)
        //                {
        //                    while (dr.Read())
        //                    {
        //                        SalesOrderDetails so = new SalesOrderDetails();
        //                        so.SalesOrderDetailsID = Convert.ToInt32(dr["id"]);
        //                        so.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
        //                        so.Quantity = Convert.ToDecimal(dr["qty"]);
        //                        so.Discount = Convert.ToInt16(dr["discount"]);
        //                        so.Total = Convert.ToDecimal(dr["total"]);
        //                        so.QuoteProductDescription = dr["description"].ToString();
        //                        so.QuoteUnitPrice = Convert.ToDecimal(dr["list_price"]);
        //                        soList.Add(so);
        //                    }
        //                }
        //            }
        //            List<SalesOrderDetails> dd = new List<SalesOrderDetails>();
        //            foreach (var item in soList)
        //            {
        //                bool exists = salesOrder.SalesOrderDetails.Any(x => x.SalesOrderDetailsID == item.SalesOrderDetailsID);
        //                if(exists==false)
        //                {
        //                    //Delete
        //                    dd.Add(item);
        //                }
        //            }




        //                //List<Tuple<int, int>> fdResList = new List<Tuple<int, int>>();
        //                //foreach (var item in salesOrder.FreightDetails)
        //                //{
        //                //    //Insert Update Freight Details                        
        //                //    cmdInsertFreightCodes.Transaction = trans;
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@Description", item.FreightCodeDetails.Description);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@Pallets", item.Pallets);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@Price", item.FreightCodeDetails.Price);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@Discount", item.Discount);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@Total", item.Total);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
        //                //    cmdInsertFreightCodes.Parameters.AddWithValue("@LastUpdateBy", salesOrder.LastModifiedBy);
        //                //    int val = cmdInsertFreightCodes.ExecuteNonQuery();
        //                //    if (val > 0)
        //                //    {
        //                //        fdResList.Add(Tuple.Create(salesOrder.SalesOrderNo, item.FreightCodeDetails.ID));
        //                //    }

        //                //    cmdInsertFreightCodes.Parameters.Clear();
        //                //}
        //                ///***********DELETE FREIGHT DETAILS NOT IN LIST************/
        //                ////Get freight details by order no
        //                //List<FreightDetails> fdList = new List<FreightDetails>();
        //                //cmdFreightGetDetails.Transaction = trans;
        //                //cmdFreightGetDetails.Parameters.AddWithValue("@OrderNo", salesOrder.SalesOrderNo);
        //                //using (SqlDataReader dr = cmdFreightGetDetails.ExecuteReader())
        //                //{
        //                //    if (dr != null)
        //                //    {
        //                //        while (dr.Read())
        //                //        {
        //                //            fdList.Add(new FreightDetails() { SalesNo = Convert.ToInt32(dr["order_no"]), FreightCodeDetails = new FreightCode() { FreightCodeID = Convert.ToInt16(dr["freight_code_id"]) } });
        //                //        }
        //                //    }
        //                //}
        //                //List<int> fdDelResList = new List<int>();
        //                //if (fdList.Count > 0)
        //                //{

        //                //    foreach (var item in fdList)
        //                //    {
        //                //        bool exist = salesOrder.FreightDetails.Any(x => x.FreightCodeDetails.FreightCodeID == item.FreightCodeDetails.FreightCodeID && salesOrder.SalesOrderNo == item.SalesNo);
        //                //        if (exist == false)
        //                //        {
        //                //            //Delete if it is not in the list    
        //                //            cmdDeleteFreightDetails.Transaction = trans;
        //                //            cmdDeleteFreightDetails.Parameters.AddWithValue("@OrderNo", salesOrder.SalesOrderNo);
        //                //            cmdDeleteFreightDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
        //                //            fdDelResList.Add(cmdDeleteFreightDetails.ExecuteNonQuery());
        //                //            cmdDeleteFreightDetails.Parameters.Clear();
        //                //        }
        //                //    }
        //                //}
        //                ///***********END OF DELETING FREIGHT DETAILS NOT IN LIST**********/

        //                ///**************CUSTOMER CREDIT**************/
        //                //if (salesOrder.Customer != null && salesOrder.Customer.CustomerType == "Account")
        //                //{
        //                //    //Updating customer credit
        //                //    cmdUpdateCredit.Transaction = trans;
        //                //    cmdUpdateCredit.Parameters.AddWithValue("@CusId", salesOrder.Customer.CustomerId);
        //                //    cmdUpdateCredit.Parameters.AddWithValue("@CreditRemaining", creditTuple.Item1.TotalCreditRemaining);
        //                //    cmdUpdateCredit.Parameters.AddWithValue("@CreditOwed", creditTuple.Item1.TotalCreditOwed);
        //                //    cmdUpdateCredit.Parameters.AddWithValue("@Debt", creditTuple.Item1.TotalDebt);
        //                //    int r = cmdUpdateCredit.ExecuteNonQuery();
        //                //    if (r > 0)
        //                //    {
        //                //        //Updating customer credit history
        //                //        cmdUpdateCusCredHistory.Transaction = trans;
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@CusId", salesOrder.Customer.CustomerId);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditLimit", salesOrder.Customer.CreditLimit);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditDeducted", creditTuple.Item1.CreditDeducted);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditRemaining", creditTuple.Item1.CreditRemaining);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@Debt", creditTuple.Item1.Debt);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@CreditAdded", 0);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@UpdatedDate", DateTime.Now);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@UpdatedBy", salesOrder.LastModifiedBy);
        //                //        cmdUpdateCusCredHistory.Parameters.AddWithValue("@Active", creditTuple.Item1.Active);
        //                //        cmdUpdateCusCredHistory.ExecuteNonQuery();

        //                //        //Add to customer credit activity                            
        //                //        cmdCustomerCreditActivity.Transaction = trans;
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", creditTuple.Item2.Amount);
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", creditTuple.Item2.Type);
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", creditTuple.Item2.Activity);
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", creditTuple.Item2.UpdatedDate);
        //                //        cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", salesOrder.LastModifiedBy);
        //                //        cmdCustomerCreditActivity.ExecuteNonQuery();
        //                //    }
        //                //}
        //                ///*********END OF CUSTOMER CREDIT**************/

        //                //cmdUpdateOrder.Transaction = trans;
        //                //cmdUpdateOrder.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@OrderDate", salesOrder.OrderDate);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@OrderPriority", salesOrder.OrderPriority);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@FreightID", salesOrder.FreightCarrier.Id);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@QuoteNo", salesOrder.QuoteNo);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@CustomerOrderNo", salesOrder.CustomerOrderNo ?? (object)DBNull.Value);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@BillTo", salesOrder.BillTo ?? (object)DBNull.Value);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@ShipTo", salesOrder.ShipTo ?? (object)DBNull.Value);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@PickUpTime", salesOrder.PickupTime ?? (object)DBNull.Value);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@DispatchDate", salesOrder.DesiredDispatchDate);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@TermsID", salesOrder.TermsID);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@ListPriceTotal", salesOrder.ListPriceTotal);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@FreightTotal", salesOrder.FreightTotal);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@TotalAmount", salesOrder.TotalAmount);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@GST", salesOrder.GST);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@PaymentRecieved", salesOrder.PaymentRecieved);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@StockLocation", salesOrder.StockLocation.ID);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@OrderStatus", salesOrder.OrderStatus ?? (object)DBNull.Value);
        //                //cmdUpdateOrder.Parameters.AddWithValue("@GSTEnabled", salesOrder.GSTEnabled);
        //                //int updateSalesOrderRes = cmdUpdateOrder.ExecuteNonQuery();

        //                //cmdUpdatePrePaidCustomer.Transaction = trans;
        //                //cmdUpdatePrePaidCustomer.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //cmdUpdatePrePaidCustomer.Parameters.AddWithValue("@PrePaidCustomers", salesOrder.PrepaidCustomerName ?? (object)DBNull.Value);
        //                //int updatePrePaidCustomerRes = cmdUpdatePrePaidCustomer.ExecuteNonQuery();

        //                //List<int> commentsUpdated = new List<int>();
        //                //foreach (var item in salesOrder.Comments)
        //                //{
        //                //    if (!string.IsNullOrWhiteSpace(item.Note))
        //                //    {
        //                //        cmdUpdateComments.Transaction = trans;
        //                //        cmdUpdateComments.Parameters.AddWithValue("@Prefix", "SO");
        //                //        cmdUpdateComments.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //        cmdUpdateComments.Parameters.AddWithValue("@LocationID", item.LocationID);
        //                //        cmdUpdateComments.Parameters.AddWithValue("@Comment", item.Note);
        //                //        cmdUpdateComments.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
        //                //        cmdUpdateComments.Parameters.AddWithValue("@CreatedBy", UserData.FirstName + " " +UserData.LastName);
        //                //        cmdUpdateComments.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
        //                //        commentsUpdated.Add(cmdUpdateComments.ExecuteNonQuery());
        //                //        cmdUpdateComments.Parameters.Clear();
        //                //    }
        //                //}

        //                ////Reserve stock
        //                //int updateProdStockReservedRes = 0;
        //                //List<int> pstock = new List<int>();
        //                //if (productStockReserved.Count > 0)
        //                //{
        //                //    foreach (var item in productStockReserved)
        //                //    {
        //                //        cmdUpdateInsertProdStockReserved.Transaction = trans;
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ProdStockReservedID", item.ProductStockReservedID);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@SalesNo", item.SalesNo);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyOrdered", item.QtyOrdered);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyReserved", item.QtyReserved);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyRemaining", item.QtyRemaining);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ReservedDate", item.ReservedDate);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@Status", item.Status);
        //                //        cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
        //                //        updateProdStockReservedRes = cmdUpdateInsertProdStockReserved.ExecuteNonQuery();
        //                //        cmdUpdateInsertProdStockReserved.Parameters.Clear();
        //                //    }
        //                //    //Deduct from stock
        //                //    if (poroductStockList.Count > 0)
        //                //    {
        //                //        foreach (var item in poroductStockList)
        //                //        {
        //                //            cmdUpdateProductStock.Transaction = trans;
        //                //            cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
        //                //            cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //            cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
        //                //            cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
        //                //            cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
        //                //            pstock.Add(cmdUpdateProductStock.ExecuteNonQuery());
        //                //            cmdUpdateProductStock.Parameters.Clear();

        //                //        }
        //                //    }
        //                //}
        //                ////Remove ReservedStock and Update ProductStock for removed items

        //                //cmdDeleteSalesOrderDetails.Transaction = trans;
        //                //cmdDeleteSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //int b = cmdDeleteSalesOrderDetails.ExecuteNonQuery();

        //                //List<int> upProdStockRes = new List<int>();
        //                //foreach (var item in upProdStock)
        //                //{
        //                //    cmdDeleteProdStockReserved.Transaction = trans;
        //                //    cmdDeleteProdStockReserved.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdDeleteProdStockReserved.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //    cmdDeleteProdStockReserved.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
        //                //    int a = cmdDeleteProdStockReserved.ExecuteNonQuery();
        //                //    cmdDeleteProdStockReserved.Parameters.Clear();

        //                //    cmdDeleteWarehouseItems.Transaction = trans;
        //                //    cmdDeleteWarehouseItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdDeleteWarehouseItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //    int c = cmdDeleteWarehouseItems.ExecuteNonQuery();
        //                //    cmdDeleteWarehouseItems.Parameters.Clear();

        //                //    cmdDeleteDispatchItems.Transaction = trans;
        //                //    cmdDeleteDispatchItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdDeleteDispatchItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //    int d = cmdDeleteDispatchItems.ExecuteNonQuery();
        //                //    cmdDeleteDispatchItems.Parameters.Clear();

        //                //    cmdUpdateProductStock.Transaction = trans;
        //                //    cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
        //                //    cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //    cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
        //                //    cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
        //                //    cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
        //                //    upProdStockRes.Add(cmdUpdateProductStock.ExecuteNonQuery());
        //                //    cmdUpdateProductStock.Parameters.Clear();
        //                //}

        //                ////Update or insert products                        
        //                //List<int> upInSalesOrderDetailsResList = new List<int>();
        //                //foreach (var item in salesOrder.SalesOrderDetails)
        //                //{
        //                //    cmdInsertUpdateSalesOrderDetails.Transaction = trans;
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesOrderDetailsID", item.SalesOrderDetailsID);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@OrderLine", item.OrderLine);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@LineStatus", "Open");
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Description", item.QuoteProductDescription);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ListPrice", item.QuoteUnitPrice);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Qty", item.Quantity);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Discount", item.Discount);
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Total", item.Total);
        //                //    upInSalesOrderDetailsResList.Add(cmdInsertUpdateSalesOrderDetails.ExecuteNonQuery());
        //                //    cmdInsertUpdateSalesOrderDetails.Parameters.Clear();
                        
        //                //}
        //                ///**IF STOCK UPDATED, UPDATE WAREHOUSE,DISPATCH AND INVOICE**/
        //                //int updateDispatchOrders = 0;
        //                //int updateWarehouseOrders = 0;
        //                //int updateInvoice = 0;
        //                //List<Tuple<Int32, int>> insUpWarHoItems = new List<Tuple<int, int>>();
        //                //bool stockUpdated = pstock.Any(x => x > 0);
        //                //bool delProStockRes = upProdStockRes.Any(x => x > 0);

        //                //if (stockUpdated == true || delProStockRes == true)
        //                //{
        //                //    //Warehouse has completed the order and could be ready to dispactch
        //                //    bool isActive = salesOrder.OrderStatus.ToString() != OrderStatus.InWarehouse.ToString() ? false : true;

        //                //    /************WAREHOUSE ORDERS*************/
        //                //    cmdUpdateWarehouseOrders.Transaction = trans;
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@OrderPacked", false);
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsPrinted", false);
        //                //    cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsActive", isActive);
        //                //    updateWarehouseOrders = cmdUpdateWarehouseOrders.ExecuteNonQuery();
        //                //    /************END OF WAREHOUSE ORDERS************/
        //                //    /****************DISPATCH ORDERS****************/
        //                //    cmdUpdateDispatchOrders.Transaction = trans;
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderDispatched", false);
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@DispatchedDate", (object)DBNull.Value);
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderStatus", DispatchOrderStatus.Pending.ToString());
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsProcessing", false);
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
        //                //    cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsActive", false);
        //                //    updateDispatchOrders = cmdUpdateDispatchOrders.ExecuteNonQuery();
        //                //    /*************END OF DISPATCH ORDERS***********/
        //                //    /****************INVOICE ORDERS****************/
        //                //    cmdUpdateInvoice.Transaction = trans;
        //                //    cmdUpdateInvoice.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
        //                //    cmdUpdateInvoice.Parameters.AddWithValue("@CompletedBy", string.Empty);
        //                //    cmdUpdateInvoice.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
        //                //    cmdUpdateInvoice.Parameters.AddWithValue("@IsActive", false);
        //                //    cmdUpdateInvoice.Parameters.AddWithValue("@IsCompleted", false);
        //                //    cmdUpdateInvoice.Parameters.AddWithValue("@ExportedToMyob", false);
        //                //    updateInvoice = cmdUpdateInvoice.ExecuteNonQuery();
        //                //    /**************END OF INVOICE ORDERS***********/

        //                //    foreach (var item in salesOrder.SalesOrderDetails)
        //                //    {
        //                //        //Warehouse Items                                
        //                //        cmdInsertUpdateWarehouseOrderItems.Transaction = trans;
        //                //        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@OrderQty", item.Quantity);
        //                //        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@PackedQty", 0);
        //                //        int val = cmdInsertUpdateWarehouseOrderItems.ExecuteNonQuery();
        //                //        cmdInsertUpdateWarehouseOrderItems.Parameters.Clear();
        //                //        if (val > 0)
        //                //        {
        //                //            insUpWarHoItems.Add(Tuple.Create(salesOrder.SalesOrderNo, item.Product.ProductID));
        //                //        }
        //                //        //DispatchOrder Items  
        //                //        cmdUpdateDispatchOrderItems.Transaction = trans;
        //                //        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
        //                //        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
        //                //        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@OrderQty", 0);
        //                //        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@PackedQty", 0);
        //                //        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@DispatchedQty", 0);
        //                //        int x = cmdUpdateDispatchOrderItems.ExecuteNonQuery();
        //                //        cmdUpdateDispatchOrderItems.Parameters.Clear();
        //                //    }
        //                //}

        //                ///////*************Delete removed products************/
        //                //////cmdGetSalesOrderDetails.Transaction = trans;
        //                //////cmdGetSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //////List<SalesOrderDetails> soList = new List<SalesOrderDetails>();
        //                //////using (SqlDataReader dr = cmdGetSalesOrderDetails.ExecuteReader())
        //                //////{
        //                //////    if (dr != null)
        //                //////    {
        //                //////        while (dr.Read())
        //                //////        {
        //                //////            SalesOrderDetails so = new SalesOrderDetails();
        //                //////            so.SalesOrderDetailsID = Convert.ToInt32(dr["id"]);
        //                //////            so.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
        //                //////            so.Quantity = Convert.ToDecimal(dr["qty"]);
        //                //////            so.Discount = Convert.ToInt16(dr["discount"]);
        //                //////            so.Total = Convert.ToDecimal(dr["total"]);
        //                //////            so.QuoteProductDescription = dr["description"].ToString();
        //                //////            so.QuoteUnitPrice = Convert.ToDecimal(dr["list_price"]);
        //                //////            soList.Add(so);
        //                //////        }
        //                //////    }
        //                //////}

        //                //bool upInSalesOrderDetailsRes= upInSalesOrderDetailsResList.Any(x => x > 0);
        //                //bool upFreightDetailsDelRes = fdDelResList.Any(x => x > 0);
        //                //bool comUpdated = commentsUpdated.Any(x => x > 0);
        //                ///************************************************/
        //                //if (upInSalesOrderDetailsRes || updateSalesOrderRes > 0 || updatePrePaidCustomerRes > 0 || comUpdated || updateWarehouseOrders > 0 || delProStockRes ||
        //                //    stockUpdated || fdResList.Count > 0 || upFreightDetailsDelRes || insUpWarHoItems.Count > 0 || updateDispatchOrders > 0 || updateInvoice > 0)
        //                //{
        //                //    cmdUpdateOrder2.Transaction = trans;
        //                //    cmdUpdateOrder2.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
        //                //    cmdUpdateOrder2.Parameters.AddWithValue("@LastModifiedDate", salesOrder.LastModifiedDate);
        //                //    cmdUpdateOrder2.Parameters.AddWithValue("@LastModifiedBy", salesOrder.LastModifiedBy);
        //                //    result = cmdUpdateOrder2.ExecuteNonQuery();

        //                //    if (fdResList.Count > 0)
        //                //    {
        //                //        foreach (var item in fdResList)
        //                //        {
        //                //            cmdUpdateFreightCodesDate.Transaction = trans;
        //                //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@OrderNo", item.Item1);
        //                //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@FreightCodeID", item.Item2);
        //                //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
        //                //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@LastUpdateBy", salesOrder.LastModifiedBy);
        //                //            cmdUpdateFreightCodesDate.ExecuteNonQuery();
        //                //            cmdUpdateFreightCodesDate.Parameters.Clear();
        //                //        }

        //                //    }                           
        //                //}

        //                trans.Commit();
        //        }
        //        catch (Exception e)
        //        {
        //            trans.Rollback();
        //            Debug.WriteLine("Error adding to SalesOrders: " + e);
        //        }
        //        finally
        //        {
        //            conn.Close();
        //        }
        //        return result;
        //    }
        //}



        public static Int32 UpdateSalesOrder(SalesOrder salesOrder, List<ProductStockReserved> productStockReserved, List<ProductStock> poroductStockList, List<ProductStock> upProdStock, Tuple<CustomerCreditHistory, CustomerCreditActivity> creditTuple)
        {
            Int32 result = 0;
            List<int> upInSalesOrderDetailsResList = new List<int>();
            List<int> insUpWarHoItems = new List<int>();
            List<int> pstock = new List<int>();
            List<int> resFreightDet = new List<int>();
            List<ProductStock> ps = new List<ProductStock>();
            List<ProductStockReserved> psrDB = new List<ProductStockReserved>();
            List<int> delSalesOrderDet = new List<int>();
            List<int> upProdStock2 = new List<int>();
            List<int> delProdStockReserved = new List<int>();
            bool isExist = true;
            int updateProdStockReservedRes = 0;
            int updateWarehouseOrders = 0;
            int updateDispatchOrders = 0;
            int updateInvoice = 0;
            List<int> delProdStockRes = new List<int>();
            List<int> commentsUpdated = new List<int>();
            string userName = UserData.FirstName + " "+ UserData.LastName;
            

            //List<Tuple<string, Int16, string>> newTimeStamps = GetUpdateSalesOrderTimeStamp(salesOrder.SalesOrderNo);
            #region SQL_STATEMENTS

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SalesOrder
                SqlCommand cmdUpdateOrder = new SqlCommand("UPDATE SalesOrder SET order_date=@OrderDate,order_priority=@OrderPriority,customer_id=@CustomerID,freight_id=@FreightID,quote_no=@QuoteNo,customer_order_no=@CustomerOrderNo,bill_to=@BillTo,ship_to=@ShipTo,pickup_time=@PickUpTime,dispatch_date=@DispatchDate,terms_id=@TermsID,list_price_total=@ListPriceTotal,freight_total=@FreightTotal,total_amount=@TotalAmount,gst=@GST,payment_recieved=@PaymentRecieved,stock_location=@StockLocation,order_status=@OrderStatus,gst_enabled=@GSTEnabled " +
                                                           "WHERE sales_no=@SalesNo AND " +
                                                           "(order_priority <> @OrderPriority OR customer_id <> @CustomerID OR freight_id <> @FreightID OR quote_no <> @QuoteNo OR customer_order_no <> @CustomerOrderNo OR bill_to <> @BillTo OR ship_to <> @ShipTo OR pickup_time <> @PickUpTime OR dispatch_date <> @DispatchDate OR terms_id <> @TermsID OR list_price_total <> @ListPriceTotal OR freight_total <> @FreightTotal OR total_amount <> @TotalAmount OR gst <> @GST OR payment_recieved <> @PaymentRecieved OR stock_location <> @StockLocation OR order_status <> @OrderStatus OR gst_enabled <> @GSTEnabled)", conn);
                //PrePaid Customers
                SqlCommand cmdUpdatePrePaidCustomer = new SqlCommand("UPDATE PrePaidCustomers SET prepaid_customer_name=@PrePaidCustomers " +
                                                                     "WHERE sales_no=@SalesNo AND prepaid_customer_name <> @PrePaidCustomers", conn);
                
                SqlCommand cmdUpdateComments = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Comments " +
                                                              "WHERE no=@SalesNo AND location_id=@LocationID) " +
                                                              "INSERT INTO Comments(prefix,no,location_id,comment,created_date,created_by,last_updated_date) VALUES(@Prefix,@SalesNo,@LocationID,@Comment,@CreatedDate,@CreatedBy,@LastUpdatedDate) " +
                                                              "ELSE " +
                                                              "UPDATE Comments SET comment=@Comment " +
                                                              "WHERE no=@SalesNo AND location_id=@LocationID AND (comment is null OR(comment <> @Comment))", conn);

                //Comments Update date
                SqlCommand cmdUpdateCommentsDate = new SqlCommand("UPDATE Comments SET last_updated_date=@LastUpdatedDate " +
                                                                  "WHERE no=@SalesNo", conn);
                //Warehouse Orders
                SqlCommand cmdUpdateWarehouseOrders = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM WarehouseOrders " +
                                                                     "WHERE sales_no=@SalesNo) " +
                                                                     "INSERT INTO WarehouseOrders VALUES(@SalesNo,@StockLocationID,@OrderPacked,@CompletedBy,@CompletedDate,@IsPrinted,@IsActive) " +
                                                                     "ELSE " +
                                                                     "UPDATE WarehouseOrders SET is_active=@IsActive,order_packed=@OrderPacked,is_printed=@IsPrinted,completed_by=@CompletedBy,completed_datetime=@CompletedDate " +
                                                                     "WHERE sales_no=@SalesNo", conn);
                
                //Update/Insert ProductStockReserved
                SqlCommand cmdUpdateInsertProdStockReserved = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ProductStockReserved " +
                                                                             "WHERE prod_stock_reserved_id=@ProdStockReservedID) " +
                                                                             "INSERT INTO ProductStockReserved(prod_stock_reserved_id,sales_no,stock_location_id,product_id,qty_ordered,qty_reserved,qty_remaining,reserved_date,status,activity_date) VALUES(@ProdStockReservedID,@SalesNo,@StockLocationID,@ProductID,@QtyOrdered,@QtyReserved,@QtyRemaining,@ReservedDate,@Status,@ActivityDate) " +
                                                                             "ELSE " +
                                                                             "UPDATE ProductStockReserved SET prod_stock_reserved_id=@ProdStockReservedID, qty_ordered=@QtyOrdered,qty_reserved=@QtyReserved,qty_remaining=@QtyRemaining,status=@Status,activity_date=@ActivityDate " +
                                                                             "WHERE prod_stock_reserved_id=@ProdStockReservedID", conn);
                //UpdateProductStock
                SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy WHERE " +
                                                                  "stock_location_id=@StockLocationID AND product_id=@ProductID AND (qty_available<>@Qty)", conn);

                //SalesOrderDetails
                SqlCommand cmdInsertUpdateSalesOrderDetails = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SalesOrderDetails " +
                                                                             "WHERE id=@SalesOrderDetailsID) " +
                                                                             "INSERT INTO SalesOrderDetails(sales_no,order_line,line_status,product_id,description,list_price,qty,discount,total) VALUES(@SalesNo,@OrderLine,@LineStatus,@ProductID,@Description,@ListPrice,@Qty,@Discount,@Total) " +
                                                                             "ELSE " +
                                                                             "UPDATE SalesOrderDetails SET order_line=@OrderLine,description=@Description,list_price=@ListPrice,qty=@Qty,discount=@Discount,total=@Total " +
                                                                             "WHERE id=@SalesOrderDetailsID AND (order_line <> @OrderLine OR description <> @Description OR list_price <> @ListPrice OR qty <> @Qty OR discount <> @Discount OR total <> @Total)", conn);
                               
                //Get SalesOrderDetails
                SqlCommand cmdGetSalesOrderDetails = new SqlCommand("SELECT * FROM SalesOrderDetails " +
                                                                    "WHERE sales_no=@SalesNo", conn);
                //Delete SalesOrderDetails
                SqlCommand cmdDeleteSalesOrderDetails = new SqlCommand("DELETE FROM SalesOrderDetails " +
                                                                       "WHERE id=@ID", conn);

                SqlCommand cmdUpdateOrder2 = new SqlCommand("UPDATE SalesOrder SET last_modified_date=@LastModifiedDate,last_modified_by=@LastModifiedBy " +
                                                            "WHERE sales_no=@SalesNo", conn);    
                
                //Add credit
                SqlCommand cmdAddCredit = new SqlCommand("UPDATE Customers SET credit_remaining+=@CreditRemaining, debt=@Debt " +
                                                         "WHERE id=@CusId", conn);
                //Deduct credit
                SqlCommand cmdUpdateCredit = new SqlCommand("UPDATE Customers SET credit_remaining=@CreditRemaining,credit_owed=@CreditOwed, debt=@Debt " +
                                                            "WHERE id=@CusId AND (credit_remaining<> @CreditRemaining OR credit_owed<>@CreditOwed OR debt<>@Debt)", conn);
                //Check Total
                //Get SalesOrderDetails
                SqlCommand cmdCheckSalesTotal = new SqlCommand("SELECT order_status,total_amount FROM SalesOrder " +
                                                               "WHERE sales_no=@SalesNo", conn);
                //Freght Details
                SqlCommand cmdInsertFreightCodes = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM FreightDetails " +
                                                                  "WHERE order_no=@SalesNo AND freight_code_id=@FreightCodeID) " +
                                                                  "INSERT INTO FreightDetails(order_no,freight_code_id,description,pallets,price,discount,total,last_updated_date,last_updated_by) VALUES(@SalesNo,@FreightCodeID,@Description,@Pallets,@Price,@Discount,@Total,@LastUpdatedDate,@LastUpdateBy) " +
                                                                  "ELSE " +
                                                                  "UPDATE FreightDetails SET freight_code_id=@FreightCodeID,description=@Description,pallets=@Pallets,price=@Price,discount=@Discount,total=@Total " +
                                                                  "WHERE order_no=@SalesNo AND freight_code_id=@FreightCodeID AND (freight_code_id <> @FreightCodeID OR description <> @Description OR pallets <> @Pallets OR price <> @Price OR discount <> @Discount OR total <> @Total)", conn);
                //Select FreightDetails
                SqlCommand cmdFreightGetDetails = new SqlCommand("SELECT * FROM FreightDetails " +
                                                                 "WHERE order_no=@OrderNo", conn);
                //Delete FreightDetails
                SqlCommand cmdDeleteFreightDetails = new SqlCommand("DELETE FROM FreightDetails " +
                                                                    "WHERE order_no=@OrderNo AND freight_code_id=@FreightCodeID", conn);
                //Update Freight Details Date and user
                SqlCommand cmdUpdateFreightCodesDate = new SqlCommand("UPDATE FreightDetails SET last_updated_date=@LastUpdatedDate,last_updated_by=@LastUpdateBy WHERE order_no = @OrderNo AND freight_code_id = @FreightCodeID", conn);

                //WarehouseOrderItems
                SqlCommand cmdInsertUpdateWarehouseOrderItems = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM WarehouseOrderItems " +
                                                                               "WHERE id=@ID) " +
                                                                               "INSERT INTO WarehouseOrderItems VALUES(@ID,@SalesNo,@ProductID,@OrderQty,@PackedQty) " +
                                                                               "ELSE " +
                                                                               "UPDATE WarehouseOrderItems SET order_qty=@OrderQty,packed_qty=@PackedQty " +
                                                                               "WHERE id=@ID AND (order_qty <> @OrderQty OR packed_qty <> @PackedQty)", conn);
                ////Get Customer Credit History
                SqlCommand cmdGetCustomerCreditHis = new SqlCommand("SELECT * FROM CustomerCreditSalesOrder " +
                                                                    "WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo", conn);

                //Update Customer Credit
                SqlCommand cmdUpdateCusCreditSO = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CustomerCreditSalesOrder WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo) " +
                                                                    "INSERT INTO CustomerCreditSalesOrder VALUES(@CusID,@SalesOrderNo,@CreditLimit,@CreditDeducted,@CreditRemaining,@Debt,@CreditAdded,@UpdatedDate,@UpdatedBy,@Active) " +
                                                                    "ELSE " +
                                                                    "UPDATE CustomerCreditSalesOrder SET credit_deducted=@CreditDeducted,credit_remaining=@CreditRemaining,debt=@Debt,active=@Active " +
                                                                    "WHERE customer_id=@CusId AND sales_order_no=@SalesOrderNo", conn);

                //Add to Customer credit activity
                SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
                                                                      "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);

                //Dispatch Orders
                SqlCommand cmdUpdateDispatchOrders = new SqlCommand("UPDATE DispatchOrders " +
                                                                    "SET order_dispatched=@OrderDispatched,dispatched_date=@DispatchedDate,order_status=@OrderStatus,is_processing=@IsProcessing,completed_by=@CompletedBy,completed_date_time=@CompletedDate,is_active=@IsActive " +
                                                                    "WHERE sales_no=@SalesOrderNo", conn);//AND (order_status ='Dispatched' OR order_status = 'Return'  OR order_status = 'ReadyToDispatch')

                SqlCommand cmdUpdateDispatchOrderItems = new SqlCommand("UPDATE DispatchOrderItem " +
                                                                        "SET order_qty=@OrderQty,packed_qty=@PackedQty,dispatched_qty=@DispatchedQty " +
                                                                        "WHERE id=@ID", conn);
                
                SqlCommand cmdUpdateInvoice = new SqlCommand("UPDATE Invoice SET is_active=@IsActive,is_completed=@IsCompleted,is_taken=@IsTaken,completed_by=@CompletedBy,completed_date=@CompletedDate,exported_to_myob=@ExportedToMyob " +
                                                             "WHERE sales_order_no=@SalesOrderNo", conn);

                //Warehouse Orders
                SqlCommand cmdGetDispatchOrders = new SqlCommand("SELECT * FROM DispatchOrders " +
                                                                  "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetSalesOrderDetailsMaxID = new SqlCommand("SELECT MAX(id) FROM SalesOrderDetails", conn);

                SqlCommand cmdGetProductStock = new SqlCommand("SELECT * FROM ProductStock WHERE stock_location_id=@StockLocation", conn);

                SqlCommand cmdDeleteWarehouseOrder = new SqlCommand("DELETE FROM WarehouseOrders WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdDeleteDispatchOrder = new SqlCommand("DELETE FROM DispatchOrders WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdDeleteProdStockReserved = new SqlCommand("DELETE FROM ProductStockReserved " +
                                                                       "WHERE prod_stock_reserved_id=@ProdStockReservedID", conn);

                SqlCommand cmdDeleteProdStockReservedBySNO = new SqlCommand("DELETE FROM ProductStockReserved " +
                                                                            "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdDeleteWarehouseItems = new SqlCommand("DELETE FROM WarehouseOrderItems " +
                                                                    "WHERE id=@ID", conn);

                SqlCommand cmdDeleteWarehouseItemsBySNO = new SqlCommand("DELETE FROM WarehouseOrderItems " +
                                                                         "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdDeleteDispatchItems = new SqlCommand("DELETE FROM DispatchOrderItem WHERE id=@ID", conn);

                SqlCommand cmdDeleteDispatchItemsBySNO = new SqlCommand("DELETE FROM DispatchOrderItem " +
                                                                        "WHERE sales_no=@SalesNo", conn);
                
                SqlCommand cmdDeleteCusCredSalesOrderBySNO = new SqlCommand("DELETE FROM CustomerCreditSalesOrder WHERE sales_order_no=@SalesNo" ,conn);

                SqlCommand cmdDeleteInvoice = new SqlCommand("DELETE FROM Invoice WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdUpdateProdStockResStatus = new SqlCommand("UPDATE ProductStockReserved SET qty_ordered=@QtyOrdered,qty_reserved=@QtyReserved,qty_remaining=@QtyRemaining,reserved_date=@ReservedDate,status=@Status,activity_date=@ActivityDate " +
                                                                        "WHERE prod_stock_reserved_id=@ProdStockReservedID", conn);

                SqlCommand cmdGetProductStockReserved = new SqlCommand("SELECT * FROM ProductStockReserved WHERE sales_no=@SalesNo", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

            #endregion

                try
                {
                    
                    /*********************************** INSERT UPDATING ************************************/
                    #region UPDATING_SALESORDER
                    string orderStatus = salesOrder.OrderStatus.ToString();
                    if(salesOrder.OrderAction.ToString() == OrderStatus.Return.ToString())
                    {
                        orderStatus = OrderStatus.Return.ToString();
                    }

                    cmdUpdateOrder.Transaction = trans;
                    cmdUpdateOrder.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    cmdUpdateOrder.Parameters.AddWithValue("@OrderDate", salesOrder.OrderDate);
                    cmdUpdateOrder.Parameters.AddWithValue("@OrderPriority", salesOrder.OrderPriority);
                    cmdUpdateOrder.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                    cmdUpdateOrder.Parameters.AddWithValue("@FreightID", salesOrder.FreightCarrier.Id);
                    cmdUpdateOrder.Parameters.AddWithValue("@QuoteNo", salesOrder.QuoteNo);
                    cmdUpdateOrder.Parameters.AddWithValue("@CustomerOrderNo", salesOrder.CustomerOrderNo ?? (object)DBNull.Value);
                    cmdUpdateOrder.Parameters.AddWithValue("@BillTo", salesOrder.BillTo ?? (object)DBNull.Value);
                    cmdUpdateOrder.Parameters.AddWithValue("@ShipTo", salesOrder.ShipTo ?? (object)DBNull.Value);
                    cmdUpdateOrder.Parameters.AddWithValue("@PickUpTime", salesOrder.PickupTime ?? (object)DBNull.Value);
                    cmdUpdateOrder.Parameters.AddWithValue("@DispatchDate", salesOrder.DesiredDispatchDate);
                    cmdUpdateOrder.Parameters.AddWithValue("@TermsID", salesOrder.TermsID);
                    cmdUpdateOrder.Parameters.AddWithValue("@ListPriceTotal", salesOrder.ListPriceTotal);
                    cmdUpdateOrder.Parameters.AddWithValue("@FreightTotal", salesOrder.FreightTotal);
                    cmdUpdateOrder.Parameters.AddWithValue("@TotalAmount", salesOrder.TotalAmount);
                    cmdUpdateOrder.Parameters.AddWithValue("@GST", salesOrder.GST);
                    cmdUpdateOrder.Parameters.AddWithValue("@PaymentRecieved", salesOrder.PaymentRecieved);
                    cmdUpdateOrder.Parameters.AddWithValue("@StockLocation", salesOrder.StockLocation.ID);
                    cmdUpdateOrder.Parameters.AddWithValue("@OrderStatus", orderStatus);
                    cmdUpdateOrder.Parameters.AddWithValue("@GSTEnabled", salesOrder.GSTEnabled);
                    int updateSalesOrderRes = cmdUpdateOrder.ExecuteNonQuery();
                    #endregion

                    if (salesOrder.OrderStatus == OrderStatus.Cancel.ToString())
                    {
                        #region UPDATING_PRODUCTSTOCK
                        List<int> pstock1 = new List<int>();
                        foreach (var item in poroductStockList)
                        {
                            cmdUpdateProductStock.Transaction = trans;
                            cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                            cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
                            cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
                            cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                            pstock1.Add(cmdUpdateProductStock.ExecuteNonQuery());
                            cmdUpdateProductStock.Parameters.Clear();
                        }
                        #endregion

                        #region DELETE_WAREHOUSEORDER
                        cmdDeleteWarehouseOrder.Transaction = trans;
                        cmdDeleteWarehouseOrder.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        int delWarehouseOrder = cmdDeleteWarehouseOrder.ExecuteNonQuery();

                        cmdDeleteWarehouseItemsBySNO.Transaction = trans;
                        cmdDeleteWarehouseItemsBySNO.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        int delWarehouseOrderItem = cmdDeleteWarehouseItemsBySNO.ExecuteNonQuery();
                        #endregion                  

                        #region DELETE_DISPATCHEORDR
                        cmdDeleteDispatchOrder.Transaction = trans;
                        cmdDeleteDispatchOrder.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        int delDispatchOrder = cmdDeleteDispatchOrder.ExecuteNonQuery();

                        cmdDeleteDispatchItemsBySNO.Transaction = trans;
                        cmdDeleteDispatchItemsBySNO.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        int delDispatchOrderItem = cmdDeleteDispatchItemsBySNO.ExecuteNonQuery();
                        #endregion

                        #region DELETE_INVOICE
                        cmdDeleteInvoice.Transaction = trans;
                        cmdDeleteInvoice.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        int delInvoice = cmdDeleteInvoice.ExecuteNonQuery();
                        #endregion

                        #region UPDATE_STATUS_PRODUCTSTOCKRESERVED

                        foreach (var item in productStockReserved)
                        {                            
                            cmdUpdateProdStockResStatus.Transaction = trans;
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@ProdStockReservedID", item.ProductStockReservedID);
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@QtyOrdered", item.QtyOrdered);
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@QtyReserved", item.QtyReserved);
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@QtyRemaining", item.QtyRemaining);
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@ReservedDate", item.ReservedDate);
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@Status", item.Status);
                            cmdUpdateProdStockResStatus.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
                            delProdStockRes.Add(cmdUpdateProdStockResStatus.ExecuteNonQuery());
                            cmdUpdateProdStockResStatus.Parameters.Clear();
                        }

                        #endregion

                        #region DELETE_CUSTOMERCREDITSALESORDER
                        if (salesOrder.Customer.CustomerType == "Account")
                        {
                            cmdDeleteCusCredSalesOrderBySNO.Transaction = trans;
                            cmdDeleteCusCredSalesOrderBySNO.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                            int resCusCredSalesOrder = cmdDeleteCusCredSalesOrderBySNO.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else
                    {

                        #region UPDAING_COMMENTS

                        foreach (var item in salesOrder.Comments)
                        {
                            if (!string.IsNullOrWhiteSpace(item.Note))
                            {
                                cmdUpdateComments.Transaction = trans;
                                cmdUpdateComments.Parameters.AddWithValue("@Prefix", "SO");
                                cmdUpdateComments.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                                cmdUpdateComments.Parameters.AddWithValue("@LocationID", item.LocationID);
                                cmdUpdateComments.Parameters.AddWithValue("@Comment", item.Note);
                                cmdUpdateComments.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                                cmdUpdateComments.Parameters.AddWithValue("@CreatedBy", UserData.FirstName + " " + UserData.LastName);
                                cmdUpdateComments.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                commentsUpdated.Add(cmdUpdateComments.ExecuteNonQuery());
                                cmdUpdateComments.Parameters.Clear();
                            }
                        }
                        #endregion

                        #region UPDATING_FREIGHT

                        foreach (var item in salesOrder.FreightDetails)
                        {
                            //Insert Update Freight Details                        
                            cmdInsertFreightCodes.Transaction = trans;
                            cmdInsertFreightCodes.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Description", item.DummyDescription);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Pallets", item.Pallets);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Price", item.FreightCodeDetails.Price);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Discount", item.Discount);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@Total", item.Total);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                            cmdInsertFreightCodes.Parameters.AddWithValue("@LastUpdateBy", salesOrder.LastModifiedBy);
                            resFreightDet.Add(cmdInsertFreightCodes.ExecuteNonQuery());
                            cmdInsertFreightCodes.Parameters.Clear();
                        }

                        #endregion

                        #region UPDING_PRODUCTSTOCK_/_WAREHOUSE_/_DISPATCHORDERS_/_INVOICE_/_SALESORDERDETAILS_/_PRODUCTSTOCKRESERVED_/_WAREHOUSEITEMS_/_DISPATCHORDERITEMS_/_CUSTOMERCREDIT

                        //Check if the stock has changed or not


                        //Update ProductStock
                        if (poroductStockList.Count > 0)
                        {
                            #region UPDATING_PRODUCTSTOCK
                            foreach (var item in poroductStockList)
                            {
                                cmdUpdateProductStock.Transaction = trans;
                                cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                                cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
                                cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
                                cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                                pstock.Add(cmdUpdateProductStock.ExecuteNonQuery());
                                cmdUpdateProductStock.Parameters.Clear();
                            }
                            #endregion

                            //If the stock is updated
                            if (pstock.Any(x => x > 0) || salesOrder.OrderStatus == OrderStatus.Hold.ToString()
                                                       || salesOrder.OrderStatus == OrderStatus.HoldNoStock.ToString()
                                                       || salesOrder.OrderStatus == OrderStatus.HoldNoCreditNoStock.ToString())
                            {
                                #region UPDATING_WAREHOUSE
                                //Warehouse has completed the order and could be ready to dispactch
                                bool isActive = salesOrder.OrderStatus.ToString() != OrderStatus.InWarehouse.ToString() ? false : true;

                                cmdUpdateWarehouseOrders.Transaction = trans;
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@OrderPacked", false);
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsPrinted", false);
                                cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsActive", isActive);
                                updateWarehouseOrders = cmdUpdateWarehouseOrders.ExecuteNonQuery();
                                cmdUpdateWarehouseOrders.Parameters.Clear();

                                #endregion

                                #region UPDATING_DISPATCHORDERS

                                cmdUpdateDispatchOrders.Transaction = trans;
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderDispatched", false);
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@DispatchedDate", (object)DBNull.Value);
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderStatus", DispatchOrderStatus.Pending.ToString());
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsProcessing", false);
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                                cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsActive", false);
                                updateDispatchOrders = cmdUpdateDispatchOrders.ExecuteNonQuery();
                                cmdUpdateDispatchOrders.Parameters.Clear();

                                #endregion

                                #region UPDATING_INVOICE
                                cmdUpdateInvoice.Transaction = trans;
                                cmdUpdateInvoice.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                                cmdUpdateInvoice.Parameters.AddWithValue("@InvoicedDate", (object)DBNull.Value);
                                cmdUpdateInvoice.Parameters.AddWithValue("@ExportedToMyob", false);
                                cmdUpdateInvoice.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                                cmdUpdateInvoice.Parameters.AddWithValue("@CompletedBy", string.Empty);
                                cmdUpdateInvoice.Parameters.AddWithValue("@IsCompleted", false);
                                cmdUpdateInvoice.Parameters.AddWithValue("@IsTaken", false);
                                cmdUpdateInvoice.Parameters.AddWithValue("@IsActive", false);
                                updateInvoice = cmdUpdateInvoice.ExecuteNonQuery();
                                cmdUpdateInvoice.Parameters.Clear();
                                #endregion

                                for (int i = 0; i < salesOrder.SalesOrderDetails.Count; i++)
                                {
                                    #region UPDATING_SALESORDERDETAILS
                                    Int32 maxSODID = 0;
                                    cmdInsertUpdateSalesOrderDetails.Transaction = trans;
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesOrderDetailsID", salesOrder.SalesOrderDetails[i].SalesOrderDetailsID);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@OrderLine", salesOrder.SalesOrderDetails[i].OrderLine);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@LineStatus", "Open");
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Description", salesOrder.SalesOrderDetails[i].QuoteProductDescription);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ListPrice", salesOrder.SalesOrderDetails[i].QuoteUnitPrice);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Qty", salesOrder.SalesOrderDetails[i].Quantity);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Discount", salesOrder.SalesOrderDetails[i].Discount);
                                    cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Total", salesOrder.SalesOrderDetails[i].Total);
                                    upInSalesOrderDetailsResList.Add(cmdInsertUpdateSalesOrderDetails.ExecuteNonQuery());
                                    cmdInsertUpdateSalesOrderDetails.Parameters.Clear();

                                    if (salesOrder.SalesOrderDetails[i].SalesOrderDetailsID == 0)
                                    {
                                        cmdGetSalesOrderDetailsMaxID.Transaction = trans;
                                        maxSODID = Convert.ToInt32(cmdGetSalesOrderDetailsMaxID.ExecuteScalar());
                                        salesOrder.SalesOrderDetails[i].SalesOrderDetailsID = maxSODID;
                                    }
                                    else
                                    {
                                        maxSODID = salesOrder.SalesOrderDetails[i].SalesOrderDetailsID;
                                    }
                                    #endregion

                                    if (productStockReserved.Count > 0)
                                    {
                                        #region UPDATING_PRODUCTSTOCKRESERVED
                                        foreach (var item in productStockReserved)
                                        {
                                            if (item.OrderLine == salesOrder.SalesOrderDetails[i].OrderLine)
                                            {
                                                cmdUpdateInsertProdStockReserved.Transaction = trans;
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ProdStockReservedID", maxSODID);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@SalesNo", item.SalesNo);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyOrdered", item.QtyOrdered);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyReserved", item.QtyReserved);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@QtyRemaining", item.QtyRemaining);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ReservedDate", item.ReservedDate);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@Status", item.Status);
                                                cmdUpdateInsertProdStockReserved.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
                                                updateProdStockReservedRes = cmdUpdateInsertProdStockReserved.ExecuteNonQuery();
                                                cmdUpdateInsertProdStockReserved.Parameters.Clear();
                                            }
                                        }
                                        #endregion

                                        #region UPDATING_WAREHOUSE_ITEMS
                                        cmdInsertUpdateWarehouseOrderItems.Transaction = trans;
                                        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@ID", maxSODID);
                                        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                                        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
                                        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@OrderQty", salesOrder.SalesOrderDetails[i].Quantity);
                                        cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@PackedQty", 0);
                                        insUpWarHoItems.Add(cmdInsertUpdateWarehouseOrderItems.ExecuteNonQuery());
                                        cmdInsertUpdateWarehouseOrderItems.Parameters.Clear();
                                        #endregion

                                        #region UPDATING_DISPATCHORDERITEMS
                                        cmdUpdateDispatchOrderItems.Transaction = trans;
                                        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@ID", maxSODID);
                                        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                                        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
                                        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@OrderQty", 0);
                                        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@PackedQty", 0);
                                        cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@DispatchedQty", 0);
                                        int x = cmdUpdateDispatchOrderItems.ExecuteNonQuery();
                                        cmdUpdateDispatchOrderItems.Parameters.Clear();
                                        #endregion
                                    }
                                }
                            }
                            else
                            {
                                //If the stock is not updated may be change SalesOrderDetails description etc                              

                            }
                        }
                        else
                        {
                            //Finally check if SalesOrderDetails have any changes to made
                            #region UPDATING_SALESORDERDETAILS
                            for (int i = 0; i < salesOrder.SalesOrderDetails.Count; i++)
                            {
                                cmdInsertUpdateSalesOrderDetails.Transaction = trans;
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesOrderDetailsID", salesOrder.SalesOrderDetails[i].SalesOrderDetailsID);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@OrderLine", salesOrder.SalesOrderDetails[i].OrderLine);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@LineStatus", "Open");
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ProductID", salesOrder.SalesOrderDetails[i].Product.ProductID);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Description", salesOrder.SalesOrderDetails[i].QuoteProductDescription);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@ListPrice", salesOrder.SalesOrderDetails[i].QuoteUnitPrice);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Qty", salesOrder.SalesOrderDetails[i].Quantity);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Discount", salesOrder.SalesOrderDetails[i].Discount);
                                cmdInsertUpdateSalesOrderDetails.Parameters.AddWithValue("@Total", salesOrder.SalesOrderDetails[i].Total);
                                upInSalesOrderDetailsResList.Add(cmdInsertUpdateSalesOrderDetails.ExecuteNonQuery());
                                cmdInsertUpdateSalesOrderDetails.Parameters.Clear();
                            }
                            #endregion
                            
                        }


                        #endregion

                        /*******************************END OF INSERT UPDATING **********************************/
                        /************************ DELETING OLD RECORDS (Collections)*****************************/
                        #region DELETING_FREIGHTDETAILS

                        //First get freight details
                        List<FreightDetails> fdList = new List<FreightDetails>();
                        cmdFreightGetDetails.Transaction = trans;
                        cmdFreightGetDetails.Parameters.AddWithValue("@OrderNo", salesOrder.SalesOrderNo);
                        using (SqlDataReader dr = cmdFreightGetDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    fdList.Add(new FreightDetails() { SalesNo = Convert.ToInt32(dr["order_no"]), FreightCodeDetails = new FreightCode() { FreightCodeID = Convert.ToInt16(dr["freight_code_id"]) } });
                                }
                            }
                        }
                        List<int> fdDelResList = new List<int>();
                        if (fdList.Count > 0)
                        {
                            foreach (var item in fdList)
                            {
                                bool exist = salesOrder.FreightDetails.Any(x => x.FreightCodeDetails.FreightCodeID == item.FreightCodeDetails.FreightCodeID && salesOrder.SalesOrderNo == item.SalesNo);
                                if (exist == false)
                                {
                                    //Delete if it is not in the list    
                                    cmdDeleteFreightDetails.Transaction = trans;
                                    cmdDeleteFreightDetails.Parameters.AddWithValue("@OrderNo", salesOrder.SalesOrderNo);
                                    cmdDeleteFreightDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
                                    fdDelResList.Add(cmdDeleteFreightDetails.ExecuteNonQuery());
                                    cmdDeleteFreightDetails.Parameters.Clear();
                                }
                            }
                        }

                        #endregion

                        #region DELETING_SALESORDERDETAILS_/_PRODUCTSTOCKRESERVED_/_WAREHOUSEITEMS_/_DISPATCHITEMS_/_FINALLY_UPDATE_PRODUCTSTOCK
                        //Get the DB SalesOrderDetails first
                        cmdGetSalesOrderDetails.Transaction = trans;
                        cmdGetSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        List<SalesOrderDetails> soList = new List<SalesOrderDetails>();
                        using (SqlDataReader dr = cmdGetSalesOrderDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SalesOrderDetails so = new SalesOrderDetails();
                                    so.SalesOrderDetailsID = Convert.ToInt32(dr["id"]);
                                    so.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                    so.Quantity = Convert.ToDecimal(dr["qty"]);
                                    so.Discount = Convert.ToInt16(dr["discount"]);
                                    so.Total = Convert.ToDecimal(dr["total"]);
                                    soList.Add(so);
                                }
                            }
                        }
                        //Retrieve the latest stock                    
                        cmdGetProductStock.Transaction = trans;
                        cmdGetProductStock.Parameters.AddWithValue("@StockLocation", salesOrder.StockLocation.ID);
                        using (SqlDataReader dr = cmdGetProductStock.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ps.Add(new ProductStock() { Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) }, QtyAvailable = Convert.ToDecimal(dr["qty_available"]), StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) } });
                                }
                            }
                        }

                        //Then check if the exsisting grid data and database data are equal
                        List<bool> dataRemovedList = new List<bool>();
                        List<ProductStockReserved> psrList = new List<ProductStockReserved>();
                        cmdGetProductStockReserved.Transaction = trans;
                        cmdGetProductStockReserved.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetProductStockReserved.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductStockReserved psr = new ProductStockReserved();
                                    psr.ProductStockReservedID = Convert.ToInt16(dr["prod_stock_reserved_id"]);
                                    psr.SalesNo = Convert.ToInt16(dr["sales_no"]);
                                    psr.QtyReserved = Convert.ToDecimal(dr["qty_reserved"]);
                                    psrList.Add(psr);
                                }
                            }
                        }
                        foreach (var item in soList)
                        {
                            isExist = salesOrder.SalesOrderDetails.Any(x => x.SalesOrderDetailsID == item.SalesOrderDetailsID);
                            if (isExist == false)
                            {
                                //Remove from SalesOrderDetails
                                cmdDeleteSalesOrderDetails.Transaction = trans;
                                cmdDeleteSalesOrderDetails.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                                delSalesOrderDet.Add(cmdDeleteSalesOrderDetails.ExecuteNonQuery());
                                cmdDeleteSalesOrderDetails.Parameters.Clear();

                                cmdDeleteProdStockReserved.Transaction = trans;
                                cmdDeleteProdStockReserved.Parameters.AddWithValue("@ProdStockReservedID", item.SalesOrderDetailsID);
                                int b = cmdDeleteProdStockReserved.ExecuteNonQuery();
                                cmdDeleteProdStockReserved.Parameters.Clear();

                                cmdDeleteWarehouseItems.Transaction = trans;
                                cmdDeleteWarehouseItems.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                                int c = cmdDeleteWarehouseItems.ExecuteNonQuery();
                                cmdDeleteWarehouseItems.Parameters.Clear();

                                cmdDeleteDispatchItems.Transaction = trans;
                                cmdDeleteDispatchItems.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                                int d = cmdDeleteDispatchItems.ExecuteNonQuery();
                                cmdDeleteDispatchItems.Parameters.Clear();

                                var data = ps.SingleOrDefault(x => x.Product.ProductID == item.Product.ProductID && x.StockLocation.ID == salesOrder.StockLocation.ID);
                                if (data != null)
                                {
                                    var data1 = psrList.SingleOrDefault(x=>x.ProductStockReservedID == item.SalesOrderDetailsID);

                                    //Add stock back to ProductStock
                                    cmdUpdateProductStock.Transaction = trans;
                                    cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
                                    cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                    cmdUpdateProductStock.Parameters.AddWithValue("@Qty", data.QtyAvailable + (data1 == null ? 0 : data1.QtyReserved));
                                    cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                    cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", string.IsNullOrWhiteSpace(salesOrder.SalesCompletedBy) ? userName : salesOrder.SalesCompletedBy);
                                    upProdStock2.Add(cmdUpdateProductStock.ExecuteNonQuery());
                                    cmdUpdateProductStock.Parameters.Clear();
                                }                                
                            }
                            dataRemovedList.Add(isExist);
                        }

                        if (dataRemovedList.Any(x=>x == false))
                        {
                            bool isActive = salesOrder.OrderStatus.ToString() != OrderStatus.InWarehouse.ToString() ? false : true;

                            #region UPDATING_WAREHOUSE
                            cmdUpdateWarehouseOrders.Transaction = trans;
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@OrderPacked", false);
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsPrinted", false);
                            cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsActive", isActive);
                            updateWarehouseOrders = cmdUpdateWarehouseOrders.ExecuteNonQuery();
                            cmdUpdateWarehouseOrders.Parameters.Clear();
                            #endregion

                            #region UPDATING_DISPATCHORDERS
                            cmdUpdateDispatchOrders.Transaction = trans;
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderDispatched", false);
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@DispatchedDate", (object)DBNull.Value);
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderStatus", DispatchOrderStatus.Pending.ToString());
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsProcessing", false);
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                            cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsActive", false);
                            updateDispatchOrders = cmdUpdateDispatchOrders.ExecuteNonQuery();
                            cmdUpdateDispatchOrders.Parameters.Clear();
                            #endregion

                            #region UPDATING_INVOICE
                            cmdUpdateInvoice.Transaction = trans;
                            cmdUpdateInvoice.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                            cmdUpdateInvoice.Parameters.AddWithValue("@InvoicedDate", (object)DBNull.Value);
                            cmdUpdateInvoice.Parameters.AddWithValue("@ExportedToMyob", false);
                            cmdUpdateInvoice.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                            cmdUpdateInvoice.Parameters.AddWithValue("@CompletedBy", string.Empty);
                            cmdUpdateInvoice.Parameters.AddWithValue("@IsCompleted", false);
                            cmdUpdateInvoice.Parameters.AddWithValue("@IsTaken", false);
                            cmdUpdateInvoice.Parameters.AddWithValue("@IsActive", false);
                            updateInvoice = cmdUpdateInvoice.ExecuteNonQuery();
                            cmdUpdateInvoice.Parameters.Clear();
                            #endregion
                        }

                        #endregion

                        /************************END OF DELETING OLD RECORDS (Collections)***********************/
                    }

                    #region UPDATING_CUSTOMER_CREDIT
                    if (salesOrder.Customer != null && salesOrder.Customer.CustomerType == "Account")
                    {
                        //Updating customer credit
                        cmdUpdateCredit.Transaction = trans;
                        cmdUpdateCredit.Parameters.AddWithValue("@CusId", salesOrder.Customer.CustomerId);
                        cmdUpdateCredit.Parameters.AddWithValue("@CreditRemaining", creditTuple.Item1.TotalCreditRemaining);
                        cmdUpdateCredit.Parameters.AddWithValue("@CreditOwed", creditTuple.Item1.TotalCreditOwed);
                        cmdUpdateCredit.Parameters.AddWithValue("@Debt", creditTuple.Item1.TotalDebt);
                        int r = cmdUpdateCredit.ExecuteNonQuery();
                        //if (r > 0)
                        //{
                        //Updating customer credit SalesOrder
                        //No need to run this as this raw will be removed if the customer cancelled the order
                        if(salesOrder.OrderStatus != OrderStatus.Cancel.ToString())
                        {
                            cmdUpdateCusCreditSO.Transaction = trans;
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@CusId", salesOrder.Customer.CustomerId);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@CreditLimit", salesOrder.Customer.CreditLimit);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@CreditDeducted", creditTuple.Item1.CreditDeducted);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@CreditRemaining", creditTuple.Item1.CreditRemaining);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@Debt", creditTuple.Item1.Debt);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@CreditAdded", 0);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@UpdatedDate", DateTime.Now);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@UpdatedBy", salesOrder.LastModifiedBy);
                            cmdUpdateCusCreditSO.Parameters.AddWithValue("@Active", creditTuple.Item1.Active);
                            cmdUpdateCusCreditSO.ExecuteNonQuery();
                        }
                            //Add to customer credit activity                            

                        string type = creditTuple.Item2.Type;
                        string activity = creditTuple.Item2.Activity;
                        if(type == "New Order")
                        {
                            type = "Updated";
                            activity = "Order updated : $" + creditTuple.Item2.Amount;
                        }

                            cmdCustomerCreditActivity.Transaction = trans;
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", salesOrder.Customer.CustomerId);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", creditTuple.Item2.Amount);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", type);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", activity);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", creditTuple.Item2.UpdatedDate);
                            cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", salesOrder.LastModifiedBy);
                            cmdCustomerCreditActivity.ExecuteNonQuery();
                        //}
                    }
                    #endregion

                    if (updateSalesOrderRes > 0 || delProdStockRes.Any(x => x > 0) || resFreightDet.Any(x => x > 0) || upInSalesOrderDetailsResList.Any(x => x > 0) || commentsUpdated.Any(x=>x > 0))
                    {
                        if (isExist == false)
                        {
                            bool resDelSalesOrderDet = delSalesOrderDet.Any(x => x > 0);
                            bool resupProdStock2 = upProdStock2.Any(x=>x > 0);
                            if (resDelSalesOrderDet && (resupProdStock2 || pstock.Any(x=>x > 0)))
                            {
                                result = 1;
                            }
                            else
                            {
                                result = -1;
                            }
                        }
                        else
                        {
                            result = 1;
                        }
                    }                    
                                       
                                       
                    //////Update ProductStock
                    ////if (poroductStockList.Count > 0)
                    ////{
                    ////    foreach (var item in poroductStockList)
                    ////    {
                    ////        cmdUpdateProductStock.Transaction = trans;
                    ////        cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                    ////        cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    ////        cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
                    ////        cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
                    ////        cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                    ////        pstock.Add(cmdUpdateProductStock.ExecuteNonQuery());
                    ////        cmdUpdateProductStock.Parameters.Clear();

                    ////    }
                    ////}

                    ///*************REMOVE FROM DATABASE*************/
                    //List<int> upProdStockRes = new List<int>();
                    //List<ProductStock> ps = new List<ProductStock>();
                    //int delSaO = 0, delWhIt=0, delPrdStkRes=0,delDisIt;

                    ////Retrieve the latest stock                    
                    //cmdGetProductStock.Transaction = trans;
                    //cmdGetProductStock.Parameters.AddWithValue("@StockLocation", salesOrder.StockLocation.ID);
                    //using (SqlDataReader dr = cmdGetProductStock.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        while (dr.Read())
                    //        {
                    //            ps.Add(new ProductStock() { Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) }, QtyAvailable = Convert.ToDecimal(dr["qty_available"]) });
                    //        }
                    //    }
                    //}

                    ////Remove from SalesOrderDetails if not in current list
                    ////First get the items in the database
                    //cmdGetSalesOrderDetails.Transaction = trans;
                    //cmdGetSalesOrderDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //List<SalesOrderDetails> soList = new List<SalesOrderDetails>();
                    //using (SqlDataReader dr = cmdGetSalesOrderDetails.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        while (dr.Read())
                    //        {
                    //            SalesOrderDetails so = new SalesOrderDetails();
                    //            so.SalesOrderDetailsID = Convert.ToInt32(dr["id"]);
                    //            so.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                    //            so.Quantity = Convert.ToDecimal(dr["qty"]);
                    //            so.Discount = Convert.ToInt16(dr["discount"]);
                    //            so.Total = Convert.ToDecimal(dr["total"]);
                    //            soList.Add(so);
                    //        }
                    //    }
                    //}

                    ////Then check if the exsisting grid data and database data are equal
                    //foreach (var item in soList)
                    //{
                    //    bool isExist = salesOrder.SalesOrderDetails.Any(x=>x.SalesOrderDetailsID==item.SalesOrderDetailsID);
                    //    if(isExist==false)
                    //    {
                    //        //Remove from SalesOrderDetails
                    //        cmdDeleteSalesOrderDetails.Transaction = trans;
                    //        cmdDeleteSalesOrderDetails.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                    //        delSaO = cmdDeleteSalesOrderDetails.ExecuteNonQuery();

                    //        cmdDeleteProdStockReserved.Transaction = trans;
                    //        cmdDeleteProdStockReserved.Parameters.AddWithValue("@ProdStockReservedID", item.SalesOrderDetailsID);
                    //        delPrdStkRes = cmdDeleteProdStockReserved.ExecuteNonQuery();
                    //        cmdDeleteProdStockReserved.Parameters.Clear();

                    //        cmdDeleteWarehouseItems.Transaction = trans;
                    //        cmdDeleteWarehouseItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //        cmdDeleteWarehouseItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //        delWhIt = cmdDeleteWarehouseItems.ExecuteNonQuery();
                    //        cmdDeleteWarehouseItems.Parameters.Clear();

                    //        cmdDeleteDispatchItems.Transaction = trans;
                    //        cmdDeleteDispatchItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //        cmdDeleteDispatchItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //        delDisIt = cmdDeleteDispatchItems.ExecuteNonQuery();
                    //        cmdDeleteDispatchItems.Parameters.Clear();

                    //        var data = ps.SingleOrDefault(x=>x.Product.ProductID == item.Product.ProductID && x.StockLocation.ID == salesOrder.StockLocation.ID);
                    //        if (data != null)
                    //        {
                    //            //Add stock back to ProductStock
                    //            cmdUpdateProductStock.Transaction = trans;
                    //            cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
                    //            cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //            cmdUpdateProductStock.Parameters.AddWithValue("@Qty", data.QtyAvailable + item.Quantity);
                    //            cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                    //            cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", salesOrder.SalesCompletedBy);
                    //            upProdStockRes.Add(cmdUpdateProductStock.ExecuteNonQuery());
                    //            cmdUpdateProductStock.Parameters.Clear();
                    //        }
                    //    }
                    //}
                    
                   
                    ///***********END OF REMOVING FROM DATABASE************/       

                    ////foreach (var item in upProdStock)
                    ////{                        
                    //    //cmdDeleteWarehouseItems.Transaction = trans;
                    //    //cmdDeleteWarehouseItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //    //cmdDeleteWarehouseItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //    //int c = cmdDeleteWarehouseItems.ExecuteNonQuery();
                    //    //cmdDeleteWarehouseItems.Parameters.Clear();

                    //    //cmdDeleteDispatchItems.Transaction = trans;
                    //    //cmdDeleteDispatchItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //    //cmdDeleteDispatchItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //    //int d = cmdDeleteDispatchItems.ExecuteNonQuery();
                    //    //cmdDeleteDispatchItems.Parameters.Clear();

                    //    //cmdUpdateProductStock.Transaction = trans;
                    //    //cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                    //    //cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //    //cmdUpdateProductStock.Parameters.AddWithValue("@Qty", item.QtyAvailable);
                    //    //cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
                    //    //cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                    //    //upProdStockRes.Add(cmdUpdateProductStock.ExecuteNonQuery());
                    //    //cmdUpdateProductStock.Parameters.Clear();
                    ////}

                    ///**IF STOCK UPDATED, UPDATE WAREHOUSE,DISPATCH AND INVOICE**/
                    
                    
                    
                    
                    //bool stockUpdated = pstock.Any(x => x > 0);
                    //bool delProStockRes = upProdStockRes.Any(x => x > 0);

                    //if (stockUpdated == true || delProStockRes == true)
                    //{
                    //    ////Warehouse has completed the order and could be ready to dispactch
                    //    //bool isActive = salesOrder.OrderStatus.ToString() != OrderStatus.InWarehouse.ToString() ? false : true;

                    //    ///************WAREHOUSE ORDERS*************/
                    //    //cmdUpdateWarehouseOrders.Transaction = trans;
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@StockLocationID", salesOrder.StockLocation.ID);
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@OrderPacked", false);
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsPrinted", false);
                    //    //cmdUpdateWarehouseOrders.Parameters.AddWithValue("@IsActive", isActive);
                    //    //updateWarehouseOrders = cmdUpdateWarehouseOrders.ExecuteNonQuery();
                    //    ///************END OF WAREHOUSE ORDERS************/
                    //    /****************DISPATCH ORDERS****************/
                    //    //cmdUpdateDispatchOrders.Transaction = trans;
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderDispatched", false);
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@DispatchedDate", (object)DBNull.Value);
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderStatus", DispatchOrderStatus.Pending.ToString());
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsProcessing", false);
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedBy", string.Empty);
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                    //    //cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsActive", false);
                    //    //updateDispatchOrders = cmdUpdateDispatchOrders.ExecuteNonQuery();
                    //    /*************END OF DISPATCH ORDERS***********/
                    //    /****************INVOICE ORDERS****************/
                    //    //cmdUpdateInvoice.Transaction = trans;
                    //    //cmdUpdateInvoice.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                    //    //cmdUpdateInvoice.Parameters.AddWithValue("@CompletedBy", string.Empty);
                    //    //cmdUpdateInvoice.Parameters.AddWithValue("@CompletedDate", (object)DBNull.Value);
                    //    //cmdUpdateInvoice.Parameters.AddWithValue("@IsActive", false);
                    //    //cmdUpdateInvoice.Parameters.AddWithValue("@IsCompleted", false);
                    //    //cmdUpdateInvoice.Parameters.AddWithValue("@ExportedToMyob", false);
                    //    //updateInvoice = cmdUpdateInvoice.ExecuteNonQuery();
                    //    /**************END OF INVOICE ORDERS***********/

                    //    //foreach (var item in salesOrder.SalesOrderDetails)
                    //    //{
                    //    //    //Warehouse Items                                
                    //    //    cmdInsertUpdateWarehouseOrderItems.Transaction = trans;
                    //    //    cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                    //    //    cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //    //    cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //    //    cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@OrderQty", item.Quantity);
                    //    //    cmdInsertUpdateWarehouseOrderItems.Parameters.AddWithValue("@PackedQty", 0);
                    //    //    insUpWarHoItems.Add(cmdInsertUpdateWarehouseOrderItems.ExecuteNonQuery());
                    //    //    cmdInsertUpdateWarehouseOrderItems.Parameters.Clear();
                            
                    //    //    //DispatchOrder Items  
                    //    //    cmdUpdateDispatchOrderItems.Transaction = trans;
                    //    //    cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@SalesOrderNo", salesOrder.SalesOrderNo);
                    //    //    cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                    //    //    cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@OrderQty", 0);
                    //    //    cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@PackedQty", 0);
                    //    //    cmdUpdateDispatchOrderItems.Parameters.AddWithValue("@DispatchedQty", 0);
                    //    //    int x = cmdUpdateDispatchOrderItems.ExecuteNonQuery();
                    //    //    cmdUpdateDispatchOrderItems.Parameters.Clear();
                    //    //}
                    //}

                    

                    //bool upInSalesOrderDetailsRes = upInSalesOrderDetailsResList.Any(x => x > 0);
                    //bool upFreightDetailsDelRes = fdDelResList.Any(x => x > 0);
                    //bool comUpdated = commentsUpdated.Any(x => x > 0);

                    ///************************************************/
                    //if (upInSalesOrderDetailsRes || updateSalesOrderRes > 0 || //updatePrePaidCustomerRes > 0 || 
                    //    comUpdated || updateWarehouseOrders > 0 || delProStockRes ||
                    //    stockUpdated || fdResList.Count > 0 || upFreightDetailsDelRes || insUpWarHoItems.Count > 0 || updateDispatchOrders > 0 || updateInvoice > 0)
                    //{
                    //    cmdUpdateOrder2.Transaction = trans;
                    //    cmdUpdateOrder2.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                    //    cmdUpdateOrder2.Parameters.AddWithValue("@LastModifiedDate", salesOrder.LastModifiedDate);
                    //    cmdUpdateOrder2.Parameters.AddWithValue("@LastModifiedBy", salesOrder.LastModifiedBy);
                    //    result = cmdUpdateOrder2.ExecuteNonQuery();

                    //    if (fdResList.Count > 0)
                    //    {
                    //        foreach (var item in fdResList)
                    //        {
                    //            cmdUpdateFreightCodesDate.Transaction = trans;
                    //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@OrderNo", item.Item1);
                    //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@FreightCodeID", item.Item2);
                    //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                    //            cmdUpdateFreightCodesDate.Parameters.AddWithValue("@LastUpdateBy", salesOrder.LastModifiedBy);
                    //            cmdUpdateFreightCodesDate.ExecuteNonQuery();
                    //            cmdUpdateFreightCodesDate.Parameters.Clear();
                    //        }
                    //    }
                       
                    //}
                    trans.Commit();                   
                }
                catch (Exception e)
                {
                    result = -1;
                    trans.Rollback();
                    Debug.WriteLine("Error adding to SalesOrders: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }


        }


        public static List<ProductStockReserved> GetReservedProductStockBySalesNoAndStock(SalesOrder so)
        {
            List<ProductStockReserved> psRList = new List<ProductStockReserved>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM ProductStockReserved " +
                                                                "WHERE sales_no=@SalesNo AND stock_location_id=@StockLocationID", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        cmdGetId.Parameters.AddWithValue("@StockLocationID", so.StockLocation.ID);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductStockReserved psr = new ProductStockReserved();
                                    psr.ProductStockReservedID = Convert.ToInt32(dr["prod_stock_reserved_id"]);
                                    psr.SalesNo = Convert.ToInt32(dr["sales_no"]);
                                    psr.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                    psr.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                    psr.QtyOrdered = Convert.ToDecimal(dr["qty_ordered"]);
                                    psr.QtyReserved = Convert.ToDecimal(dr["qty_reserved"]);
                                    psr.QtyRemaining = Convert.ToDecimal(dr["qty_remaining"]);
                                    psr.ReservedDate = Convert.ToDateTime(dr["reserved_date"]);
                                    psr.Status = dr["status"].ToString();
                                    psr.ActivityDate = Convert.ToDateTime(dr["activity_date"]);
                                    psRList.Add(psr);
                                }
                            }
                        }
                        cmdGetId.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return psRList;
        }

    

        public static Int32 GenerateNewOrderID()
        {
            Int32 firstSalesId = 0;
            Int32 orderId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetIdFree = new SqlCommand("SELECT TOP 1 * FROM OrderID WHERE status = 'FREE' ORDER BY id DESC", conn);
                //SqlCommand cmdGetIdTaken = new SqlCommand("SELECT TOP 1 * FROM SalesID WHERE status = 'TAKEN' ORDER BY id DESC", conn);
                SqlCommand cmdCrateNewSalesId = new SqlCommand("INSERT INTO OrderID(id,status) VALUES (@SalesID,@Status)", conn);
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE OrderID SET status ='TAKEN' WHERE id = @SalesID AND status = 'FREE'", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdGetIdFree.Transaction = trans;
                    firstSalesId = (Int32)cmdGetIdFree.ExecuteScalar();

                    if (firstSalesId > 0)
                    {
                        orderId = firstSalesId + 1;
                        cmdCrateNewSalesId.Transaction = trans;
                        cmdCrateNewSalesId.Parameters.AddWithValue("@SalesID", orderId);
                        cmdCrateNewSalesId.Parameters.AddWithValue("@Status", "FREE");
                        cmdCrateNewSalesId.ExecuteNonQuery();

                        cmdUpdateStatus.Transaction = trans;
                        cmdUpdateStatus.Parameters.AddWithValue("@SalesID", firstSalesId);
                        cmdUpdateStatus.ExecuteNonQuery();
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return firstSalesId;
        }

        public static Int32 AddToOrders(Order order, List<Curing> toCuringList)
        {
            Int32 result = 0;
            TransactionLog Transaction = null;
            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            if (String.IsNullOrEmpty(userName))
            {
                userName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsertOrder = new SqlCommand("INSERT INTO Orders(order_id,master_order_id,sales_no,customer_id,freight_id,required_date,list_price_total,gst,total,order_type,priority_type,required_date_selected,created_date,order_status,comments,mixing_comments,slitting_comments,peeling_comments,rerolling_comments) " +
                                                           "VALUES (@OrderID,@MasterOrderID,@SalesNo,@CustomerID,@FreightID,@RequiredDate,@ListPriceTotal,@GST,@Total,@OrderType,@PriorityType,@RequiredDateSelected,@CreatedDate,@OrderStatus,@Comments,@MixingComments,@SlittingComments,@PeelingComments,@ReRollingComments)", conn);

                SqlCommand cmdInsertOrderDetails = new SqlCommand("INSERT INTO OrderDetails(order_id,raw_product_id,product_id,blocks_logs,qty,status) " +
                                                                  "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty,@Status)", conn);

                SqlCommand cmdPendingOrders = new SqlCommand("INSERT INTO PendingOrder(order_id,raw_product_id,product_id,blocks_logs,qty,status,location) " +
                                                             "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty,@Status,@Location)", conn);

                SqlCommand cmdPendingSlitPeel = new SqlCommand("INSERT INTO PendingSlitPeel(order_no,raw_product_id,product_id,blocks_logs,qty,active) " +
                                                               "VALUES (@OrderID,@RawProductID,@ProductID,@BlockLog,@Qty,@Active)", conn);

                SqlCommand cmdBlockLogCuring = new SqlCommand("INSERT INTO BlockLogCuring(blc_raw_product_id,product_id,order_id,blc_blocklog_qty,blc_start_time,blc_end_time,is_cured,is_enabled) " +
                                                              "VALUES (@RawProductID,@ProductID,@OrderID,@BlockLog,@StartTime,@EndTime,@IsCured,@IsEnabled)", conn);

                //SqlCommand cmdInsertGradingStatus = new SqlCommand("INSERT INTO GradingStatus(order_no,raw_product_id,product_id,pending,completed) " +
                //                                                   "VALUES (@OrderNo,@RawProductID,@ProductID,@Pending,@Completed)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {


                    cmdInsertOrder.Transaction = trans;
                    cmdInsertOrder.Parameters.AddWithValue("@OrderID", order.OrderNo);
                    cmdInsertOrder.Parameters.AddWithValue("@MasterOrderID", 0);
                    cmdInsertOrder.Parameters.AddWithValue("@SalesNo", order.SalesNo);
                    cmdInsertOrder.Parameters.AddWithValue("@CustomerID", order.Customer.CustomerId);
                    cmdInsertOrder.Parameters.AddWithValue("@FreightID", order.DeliveryDetails[0].FreightID);
                    cmdInsertOrder.Parameters.AddWithValue("@RequiredDate", order.RequiredDate);
                    cmdInsertOrder.Parameters.AddWithValue("@ListPriceTotal", 0);
                    cmdInsertOrder.Parameters.AddWithValue("@GST", 0);
                    cmdInsertOrder.Parameters.AddWithValue("@Total", 0);
                    cmdInsertOrder.Parameters.AddWithValue("@OrderType", order.OrderType);
                    cmdInsertOrder.Parameters.AddWithValue("@PriorityType", order.OrderPriority);
                    cmdInsertOrder.Parameters.AddWithValue("@RequiredDateSelected", order.IsRequiredDateSelected);
                    cmdInsertOrder.Parameters.AddWithValue("@CreatedDate", order.OrderCreatedDate);
                    cmdInsertOrder.Parameters.AddWithValue("@OrderStatus", "Pending");
                    cmdInsertOrder.Parameters.AddWithValue("@Comments", order.Comments ?? (object)DBNull.Value);
                    cmdInsertOrder.Parameters.AddWithValue("@MixingComments", order.MixingComments ?? (object)DBNull.Value);
                    cmdInsertOrder.Parameters.AddWithValue("@SlittingComments", order.SlittingComments ?? (object)DBNull.Value);
                    cmdInsertOrder.Parameters.AddWithValue("@PeelingComments", order.PeelingComments ?? (object)DBNull.Value);
                    cmdInsertOrder.Parameters.AddWithValue("@ReRollingComments", order.ReRollingComments ?? (object)DBNull.Value);
                    cmdInsertOrder.ExecuteNonQuery();




                    foreach (var item in order.OrderDetails)
                    {
                        cmdInsertOrderDetails.Transaction = trans;
                        cmdInsertOrderDetails.Parameters.AddWithValue("@OrderID", order.OrderNo);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@BlockLog", item.BlocksLogsToMake);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@Qty", item.Quantity);
                        cmdInsertOrderDetails.Parameters.AddWithValue("@Status", "Pending");
                        result = cmdInsertOrderDetails.ExecuteNonQuery();
                        cmdInsertOrderDetails.Parameters.Clear();

                        cmdPendingOrders.Transaction = trans;
                        cmdPendingOrders.Parameters.AddWithValue("@OrderID", order.OrderNo);
                        cmdPendingOrders.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        cmdPendingOrders.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdPendingOrders.Parameters.AddWithValue("@BlockLog", item.BlocksLogsToMake);
                        cmdPendingOrders.Parameters.AddWithValue("@Qty", item.Quantity);
                        cmdPendingOrders.Parameters.AddWithValue("@Status", "Pending");
                        cmdPendingOrders.Parameters.AddWithValue("@Location", "QLD");
                        result = cmdPendingOrders.ExecuteNonQuery();
                        cmdPendingOrders.Parameters.Clear();

                        //cmdInsertGradingStatus.Transaction = trans;
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", order.OrderNo);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", item.Quantity);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", 0);
                        //cmdInsertGradingStatus.ExecuteNonQuery();
                        //cmdInsertGradingStatus.Parameters.Clear();

                        if ((item.Product.Type == "Bulk" || item.Product.Type == "Roll" || item.Product.Type == "Standard" || item.Product.Type == "Tile") && (order.OrderPriority == 1))
                        {
                            cmdPendingSlitPeel.Transaction = trans;
                            cmdPendingSlitPeel.Parameters.AddWithValue("@OrderID", order.OrderNo);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@BlockLog", item.BlocksLogsToMake);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@Qty", item.Quantity);
                            cmdPendingSlitPeel.Parameters.AddWithValue("@Active", true);
                            result = cmdPendingSlitPeel.ExecuteNonQuery();
                            cmdPendingSlitPeel.Parameters.Clear();
                        }

                        //Add to transaction
                        Transaction = new TransactionLog()
                        {
                            TransDateTime = DateTime.Now,
                            Transtype = "New Order",
                            SalesOrderID = order.OrderNo,
                            Products = new List<RawStock>()
                                {
                                  new RawStock(){RawProductID = item.Product.RawProduct.RawProductID,Qty=item.Quantity},  
                                },
                            CreatedBy = userName
                        };
                        int r = DBAccess.InsertTransaction(Transaction);

                    }

                    foreach (var item in toCuringList)
                    {

                        cmdBlockLogCuring.Transaction = trans;
                        cmdBlockLogCuring.Parameters.AddWithValue("@OrderID", item.OrderNo);
                        cmdBlockLogCuring.Parameters.AddWithValue("@RawProductID", item.Product.RawProduct.RawProductID);
                        cmdBlockLogCuring.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdBlockLogCuring.Parameters.AddWithValue("@BlockLog", item.Qty);
                        cmdBlockLogCuring.Parameters.AddWithValue("@StartTime", item.StartTime);
                        cmdBlockLogCuring.Parameters.AddWithValue("@EndTime", item.EndTime);
                        cmdBlockLogCuring.Parameters.AddWithValue("@IsCured", item.IsCured);
                        cmdBlockLogCuring.Parameters.AddWithValue("@IsEnabled", item.IsEnabled);
                        result = cmdBlockLogCuring.ExecuteNonQuery();
                        cmdBlockLogCuring.Parameters.Clear();

                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding to Orders: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }
        }
        public static List<GradingDefaultCapacity> GetAllGradingDefaultCapacities()
        {
            List<GradingDefaultCapacity> gradingDefaultCapacity = new List<GradingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM GradingDefaultCapacities", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    GradingDefaultCapacity gdc = new GradingDefaultCapacity();
                                    gdc.ID = Convert.ToInt16(dr["id"]);
                                    gdc.Machine = new Machine() { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    gdc.RubberGrade = new RubberGrades() { GradeID = Convert.ToInt16(dr["grading_id"]) };
                                    gdc.Capacity = Convert.ToDecimal(dr["capacity"]);
                                    gdc.Shift = Convert.ToInt16(dr["shift"]);
                                    gdc.Day = dr["days"].ToString();
                                    gradingDefaultCapacity.Add(gdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return gradingDefaultCapacity;
        }

        public static List<ProductMeterage> GetProductMeterage()
        {
            List<ProductMeterage> productMeterageList = new List<ProductMeterage>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductMeterage", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductMeterage pm = new ProductMeterage();
                                pm.Thickness = Convert.ToInt16(dr["thickness"]);
                                pm.MouldSize = Convert.ToDecimal(dr["mould_size"]);
                                pm.MouldType = (dr["mould_type"]).ToString();
                                pm.ExpectedYield = Convert.ToDecimal(dr["expected_yield"]);
                                productMeterageList.Add(pm);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productMeterageList;
        }


        public static int InsertGradedStock(List<GradedStock> gradedStockList, int shift, DateTime dateTime, bool addToGradedHistory)
        {
            int result = 0;
            decimal qty = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM GradedStock WHERE id = @ID", conn);
                SqlCommand cmd = new SqlCommand("UPDATE GradedStock SET qty = @Qty WHERE id = @ID", conn);

                SqlCommand cmdInsUpGradedStockHis = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradedStockHistory WHERE " +
                                                                   "date=@Date AND grading_id=@GradingID AND shift=@Shift) " +
                                                                   "INSERT INTO GradedStockHistory VALUES(@Date,@GradingID,@Qty,@Shift) " +
                                                                   "ELSE " +
                                                                   "UPDATE GradedStockHistory SET qty+=@Qty WHERE date=@Date AND grading_id=@GradingID AND shift=@Shift", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ID", item.ID);
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        qty += Convert.ToDecimal(dr["qty"]);
                                    }
                                    qty += item.Qty;
                                }
                                else
                                {
                                    qty = item.Qty;

                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();

                        cmd.Transaction = trans;
                        cmd.Parameters.AddWithValue("@ID", item.ID);
                        cmd.Parameters.AddWithValue("@QTY", qty);
                        result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                        qty = 0;

                        if (addToGradedHistory)
                        {
                            cmdInsUpGradedStockHis.Transaction = trans;
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@Date", dateTime);
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@GradingID", item.ID);
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@Shift", shift);
                            cmdInsUpGradedStockHis.Parameters.AddWithValue("@Qty", item.Qty);
                            cmdInsUpGradedStockHis.ExecuteNonQuery();
                            cmdInsUpGradedStockHis.Parameters.Clear();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<Shift> GetAllShifts()
        {
            List<Shift> list = new List<Shift>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Shifts", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Shift shift = new Shift();

                                    shift.ID = Convert.ToInt16(dr["id"]);
                                    shift.ShiftID = Convert.ToInt16(dr["shift_id"]);
                                    shift.ShiftName = dr["shift_name"].ToString();
                                    shift.StartTime = (TimeSpan)dr["shift_start_time"];
                                    shift.EndTime = (TimeSpan)dr["shift_end_time"];

                                    list.Add(shift);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading shift details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static RawStock GetBlockLogStockByID(PendingSlitPeel pendingOrders)
        {
            RawStock rs = new RawStock();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawStock WHERE rs_raw_product_id = @RawProductID", conn);

                    cmdGetData.Parameters.AddWithValue("@RawProductID", pendingOrders.Product.RawProduct.RawProductID);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                rs.RawProductID = Convert.ToInt16(dr["rs_raw_product_id"]);
                                rs.Qty = Convert.ToDecimal(dr["rs_qty"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rs;
        }


        public static List<RawStock> GetAllBlockLogStock()
        {
            List<RawStock> rawStockList = new List<RawStock>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawStock", conn);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                RawStock rs = new RawStock();
                                rs.ID = Convert.ToInt16(dr["id"]);
                                rs.RawProductID = Convert.ToInt16(dr["rs_raw_product_id"]);
                                rs.Qty = Convert.ToDecimal(dr["rs_qty"]);
                                rs.LastUpdatedDate = Convert.ToDateTime(dr["last_updated_date"]);
                                rawStockList.Add(rs);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawStockList;
        }

        public static int UpdateBlockLogPendingSlitPeel(RawStock rs, PendingSlitPeel ps)
        {
            int res = 0;
            decimal psBL = 0;
            decimal psQty = 0;
            Int32 psID = 0;
            List<PendingOrder> pendingOrderList = new List<PendingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    SqlCommand cmdUpdateRawStock = new SqlCommand("UPDATE RawStock SET rs_qty=@Qty WHERE rs_raw_product_id = @RawProductID", conn);
                    SqlCommand cmdGetSlitPeel = new SqlCommand("SELECT * FROM PendingSlitPeel " +
                                                               "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);
                    SqlCommand cmdUpdatePendSlitPeel = new SqlCommand("UPDATE PendingSlitPeel SET blocks_logs=@BlocksLogs,qty=@Qty WHERE id = @ID", conn);

                    cmdUpdateRawStock.Transaction = trans;
                    cmdUpdateRawStock.Parameters.AddWithValue("@RawProductID", rs.RawProductID);
                    cmdUpdateRawStock.Parameters.AddWithValue("@Qty", rs.Qty);
                    int rows = cmdUpdateRawStock.ExecuteNonQuery();

                    if (rows > 0)
                    {
                        cmdGetSlitPeel.Transaction = trans;
                        cmdGetSlitPeel.Parameters.AddWithValue("@OrderNo", ps.Order.OrderNo);
                        cmdGetSlitPeel.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                        cmdGetSlitPeel.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                        using (SqlDataReader dr = cmdGetSlitPeel.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    psID = Convert.ToInt32(dr["id"]);
                                    psBL = Convert.ToDecimal(dr["blocks_logs"]);
                                    psQty = Convert.ToDecimal(dr["qty"]);

                                }
                            }
                        }
                        if (psID > 0)
                        {
                            cmdUpdatePendSlitPeel.Transaction = trans;
                            cmdUpdatePendSlitPeel.Parameters.AddWithValue("@ID", psID);
                            cmdUpdatePendSlitPeel.Parameters.AddWithValue("@BlocksLogs", (psBL - ps.BlockLogQty) < 0 ? 0 : (psBL - ps.BlockLogQty));
                            cmdUpdatePendSlitPeel.Parameters.AddWithValue("@Qty", (psQty - ps.Qty) < 0 ? 0 : (psQty - ps.Qty));
                            res = cmdUpdatePendSlitPeel.ExecuteNonQuery();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static List<RawProductMachine> GetMachineIdByRawProdId(int rawProdId)
        {
            List<RawProductMachine> rawProdMaList = new List<RawProductMachine>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM RawProductMachine WHERE raw_product_id = @RawProductID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@RawProductID", rawProdId);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductMachine rawProductMachine = new RawProductMachine();
                                    rawProductMachine.GradingMachineID = Convert.ToInt16(dr["grading_machine_id"]);
                                    rawProductMachine.MixingMachineID = Convert.ToInt16(dr["mixing_machine_id"]);
                                    rawProductMachine.SlitPeelMachineID = Convert.ToInt16(dr["slit_peel_machine_id"]);
                                    rawProductMachine.ReRollingMachineID = Convert.ToInt16(dr["re_rolling_machine_id"]);
                                    rawProdMaList.Add(rawProductMachine);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Raw Product Machine: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rawProdMaList;
        }

        public static List<DiscountStructure> GetDiscount(int cusId)
        
        {
            List<DiscountStructure> list = new List<DiscountStructure>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT Discount.id,Discount.discount,Discount.comment,Discount.updated_date,Discount.updated_by,Discount.customer_id,Category.id AS cat_id,Category.category_name,Category.category_description,Discount.time_stamp " +
                                                                "FROM Discount " +
                                                                "INNER JOIN Category ON Category.id = Discount.category_id " +
                                                                "WHERE Discount.customer_id = @CustomerID ORDER BY Category.category_name", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@CustomerID", cusId);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    string vis = "Collapsed";
                                    if (Convert.ToInt16(dr["cat_id"]) == 3)
                                    {
                                        if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                        {
                                            vis = "Visible";
                                        }
                                    }

                                    DiscountStructure ds = new DiscountStructure();
                                    ds.ID = Convert.ToInt16(dr["id"]);
                                    ds.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                    ds.Category = new Category() { CategoryID = Convert.ToInt16(dr["cat_id"]), CategoryName = dr["category_name"].ToString() };
                                    ds.Comment = dr["comment"].ToString();
                                    ds.UpdatedDate = Convert.ToDateTime(dr["updated_date"]);
                                    ds.UpdatedBy = dr["updated_by"].ToString();
                                    ds.Discount = Convert.ToInt16(dr["discount"]);
                                    ds.DiscountStr = dr["category_name"].ToString() + " " + Convert.ToInt16(dr["discount"]) + "%";
                                    ds.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    ds.DiscountLabelVisibility = vis;
                                    list.Add(ds);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static List<ProductMeterage> GetProductMeterageByValues(ProductMeterage productMeterage)
        {
            List<ProductMeterage> productMeterageList = new List<ProductMeterage>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductMeterage " +
                                                           "WHERE thickness = @Thickness AND mould_size=@MouldSize AND mould_type=@MouldType", conn);

                    cmdGetData.Parameters.AddWithValue("@Thickness", productMeterage.Thickness);
                    cmdGetData.Parameters.AddWithValue("@MouldSize", productMeterage.MouldSize);
                    cmdGetData.Parameters.AddWithValue("@MouldType", productMeterage.MouldType);
                    //cmdGetData.Parameters.AddWithValue("@ExpectedYield", productMeterage.ExpectedYield);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductMeterage pm = new ProductMeterage();
                                pm.Thickness = Convert.ToInt16(dr["thickness"]);
                                pm.MouldSize = Convert.ToDecimal(dr["mould_size"]);
                                pm.MouldType = (dr["mould_type"]).ToString();
                                pm.ExpectedYield = Convert.ToDecimal(dr["expected_yield"]);
                                productMeterageList.Add(pm);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productMeterageList;
        }

        public static ObservableCollection<Formula> GetFormulas()
        {

            ObservableCollection<Formula> formulaList = new ObservableCollection<Formula>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM Formulas", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Formula formulas = new Formula();
                                    formulas.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    formulas.ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]);
                                    formulas.ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]);
                                    formulas.GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]);
                                    formulas.GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]);
                                    formulas.GradingWeight3 = Convert.ToDecimal(dr["grading_weight3"]);
                                    formulas.GradingFormula = dr["grading"].ToString();
                                    formulas.MixingFormula = dr["mixing"].ToString();
                                    formulaList.Add(formulas);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaList;
        }

        public static List<Machine> GetNumberOfMachines()
        {
            List<Machine> machineList = new List<Machine>();           

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM Machines order by machine_id", conn);

                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Machine machines = new Machine();
                                    machines.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machines.MachineName = dr["machine_name"].ToString();
                                    machines.MachineDescription = dr["machine_description"].ToString();
                                    machineList.Add(machines);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }


        public static decimal GetCurrentShiftDollarValueByOrderType(int prodTimeTableId, int shift, int orderType)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND order_type=@OrderType", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);
                    cmdGetData.Parameters.AddWithValue("@OrderType", orderType);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static decimal GetPeelingCurrentShiftDollarValue(int prodTimeTableId, int shift)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM PeelingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static int AddToSlitting(List<SlittingOrder> slitPeelList)
        {
            int rowCount = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsUpRSR = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawStockReserve WHERE " +
                                                         "sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId) " +
                                                         "INSERT INTO RawStockReserve VALUES(@SalesId,@RawproductId,@ProductId,@BlockSLogs,@Qty) " +
                                                         "ELSE " +
                                                         "UPDATE RawStockReserve SET blocks_logs+=@BlockSLogs,qty+=@Qty WHERE sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId", conn);


                SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingOrders " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType) " +
                                                     "INSERT INTO SlittingOrders VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Blocks,@DollarValue,@OrderType,@Status) " +
                                                     "ELSE " +
                                                     "UPDATE SlittingOrders SET qty+=@Qty,blocks+=@Blocks,dollar_value+=@DollarValue " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateSlittingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SlittingStatus " +
                                                     "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId) " +
                                                     "INSERT INTO SlittingStatus VALUES(@OrderNo,@RawProdId,@ProductID,@BlocksPending,@BlocksCompleted,@TilesCompleted) " +
                                                     "ELSE " +
                                                     "UPDATE SlittingStatus SET blocks_pending+=@BlocksPending " +
                                                     "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId", conn);

                //SqlCommand cmdDeleteSlittingOrder = new SqlCommand("DELETE FROM SlittingOrders", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    //if (deleteSlittingOrder)
                    //{
                    //    cmdDeleteSlittingOrder.Transaction = trans;
                    //    cmdDeleteSlittingOrder.ExecuteNonQuery();
                    //    cmdDeleteSlittingOrder.Parameters.Clear();
                    //}

                    foreach (var item in slitPeelList)
                    {
                        cmdInsUpRSR.Transaction = trans;
                        cmdInsUpRSR.Parameters.AddWithValue("@SalesId", item.Order.OrderNo);
                        cmdInsUpRSR.Parameters.AddWithValue("@RawproductId", item.Product.RawProduct.RawProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@ProductId", item.Product.ProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@BlockSLogs", item.Blocks);
                        cmdInsUpRSR.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsUpRSR.ExecuteNonQuery();
                        cmdInsUpRSR.Parameters.Clear();

                        cmdInsUp.Transaction = trans;
                        cmdInsUp.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsUp.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsUp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsUp.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsUp.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsUp.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsUp.Parameters.AddWithValue("@Blocks", item.Blocks);
                        cmdInsUp.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsUp.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdInsUp.Parameters.AddWithValue("@Status", "Slitting");
                        rowCount = cmdInsUp.ExecuteNonQuery();
                        cmdInsUp.Parameters.Clear();

                        //Slitting Status
                        cmdUpdateSlittingStatus.Transaction = trans;
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@BlocksPending", item.Blocks);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@BlocksCompleted", 0);
                        cmdUpdateSlittingStatus.Parameters.AddWithValue("@TilesCompleted", 0);
                        cmdUpdateSlittingStatus.ExecuteNonQuery();
                        cmdUpdateSlittingStatus.Parameters.Clear();
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to Slit Peel table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }

        public static List<ProductionTimeTable> GetProductionTimeTableDetails(Int32 id, DateTime currentDate)
        {
            string newDate = currentDate.ToString("yyyy-MM-dd");
            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE machine_id=@id AND date >= @currDate", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", newDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt32(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static DateTime GetNextAvailableDate(DateTime currentDate)
        {

            DateTime pDate = new DateTime(1900, 01, 01);
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT date FROM ProductionTimeTable " +
                                                                  "WHERE date = @currDate AND machine_active = @machineActive", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@currDate", currentDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    pDate = Convert.ToDateTime(dr["date"]);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return pDate;
        }

        public static decimal CheckCapacityByDateShift(int proTimeTableId, int proCapId, int shift, int orderType)
        {
            int orderType1 = 0;
            int orderType2 = 0;
            decimal capacityKG = 0;

            if (orderType == 1)
            {
                orderType1 = 1;
                orderType2 = 1;
            }
            else if (orderType == 3)
            {
                orderType1 = 1;
                orderType2 = 3;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT capacity_kg FROM CurrentCapacity " +
                                                                  "WHERE prod_timetable_id = @proTimeTableId AND  product_capacity_id=@proCapId AND shift = @shift AND (order_type = @Ordertype1 OR order_type = @Ordertype2)", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@proTimeTableId", proTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@proCapId", proCapId);
                        cmdGetData.Parameters.AddWithValue("@shift", shift);
                        cmdGetData.Parameters.AddWithValue("@Ordertype1", orderType1);
                        cmdGetData.Parameters.AddWithValue("@Ordertype2", orderType2);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    capacityKG += Convert.ToDecimal(dr["capacity_kg"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capacityKG;
        }

        public static List<ProductionTimeTable> GetProductionTimeTableByID(int id, DateTime currentDate)
        {
            string neDate = currentDate.ToString("yyy-MM-dd");

            List<ProductionTimeTable> productionTimeTableList = new List<ProductionTimeTable>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductionTimeTable " +
                                                                  "WHERE machine_id=@id AND date = @currDate", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);
                        cmdGetData.Parameters.AddWithValue("@currDate", neDate);
                        cmdGetData.Parameters.AddWithValue("@machineActive", true);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductionTimeTable pt = new ProductionTimeTable();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    pt.ProductionDate = Convert.ToDateTime(dr["date"]);
                                    pt.IsMachineActive = Convert.ToBoolean(dr["machine_active"]);
                                    pt.IsDayShiftActive = Convert.ToBoolean(dr["day_shift"]);
                                    pt.IsEveningShiftActive = Convert.ToBoolean(dr["evening_shift"]);
                                    pt.IsNightShiftActive = Convert.ToBoolean(dr["night_shift"]);

                                    productionTimeTableList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return productionTimeTableList;
        }

        public static List<Machine> GetProductionMachines()
        {
            List<Machine> machineList = new List<Machine>();           

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM Machines " +
                                                      "WHERE (machine_id = 1 OR machine_id = 2 OR machine_id = 3 OR machine_id = 4 OR machine_id = 5 OR machine_id = 6 OR machine_id = 8) " +
                                                      "ORDER BY machine_id", conn);

                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Machine machines = new Machine();
                                    machines.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machines.MachineName = dr["machine_name"].ToString();
                                    machines.MachineDescription = dr["machine_description"].ToString();
                                    machineList.Add(machines);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }

        public static ObservableCollection<Machine> GetMachinesByLocation(int id)
        {
            ObservableCollection<Machine> machineList = new ObservableCollection<Machine>();
            //double x = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT Machines.machine_id,Machines.stock_location_id,StockLocation.stock_name,Machines.machine_name,Machines.type,Machines.machine_description " +
                                                      "FROM Machines " +
                                                      "INNER JOIN StockLocation ON Machines.stock_location_id = StockLocation.id " +
                                                      "WHERE Machines.stock_location_id = @LocId " +
                                                      "ORDER BY Machines.machine_id", conn);

                conn.Open();
                try
                {
                    cmdSelect.Parameters.AddWithValue("@LocId", id);
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    Machine machines = new Machine();
                                    machines.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    machines.MachineName = dr["machine_name"].ToString();
                                    machines.MachineDescription = dr["machine_description"].ToString();
                                    machines.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]), StockName = dr["stock_name"].ToString() };
                                    machines.MachineString = dr["machine_name"].ToString() + " | " + dr["type"].ToString();
                                    machineList.Add(machines);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return machineList;
        }

     

        public static int UpdateGradedStock2(List<GradedStock> gradedStockList)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE GradedStock SET qty = @Qty WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        cmd.Parameters.AddWithValue("@ID", item.ID);
                        cmd.Parameters.AddWithValue("@QTY", item.Qty);
                        result += cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static decimal GetCurrentShiftDollarValue(int prodTimeTableId, int shift)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }


                    //using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlitPeel WHERE prod_time_table_id = @ProdTimeTableID AND shift= @Shift", conn))
                    //{

                    //    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    //    cmdGetData.Parameters.AddWithValue("@Shift", shift);
                    //    price += (decimal)cmdGetData.ExecuteScalar();

                    //}
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static decimal GetSlitPeelMaxCapacity(int prodTimeTableId, int shift, int machineId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM SlittingCapacity WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        price = (decimal)cmdGetData.ExecuteScalar();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static List<MixingDefaultCapacity> GetAllMixingDefaultCapacities()
        {
            List<MixingDefaultCapacity> mixingDefaultCapacity = new List<MixingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MixingDefaultCapacity gdc = new MixingDefaultCapacity();
                                    gdc.ID = Convert.ToInt16(dr["id"]);
                                    gdc.Machine = new Machine() { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    gdc.MaxMixes = Convert.ToDecimal(dr["max_mixes"]);
                                    gdc.Day = dr["day"].ToString();
                                    mixingDefaultCapacity.Add(gdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return mixingDefaultCapacity;
        }

        public static List<SlittingDefaultCapacity> GetAllSlittingDefaultCapacities()
        {
            List<SlittingDefaultCapacity> slittingDefaultCapacity = new List<SlittingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM SlittingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SlittingDefaultCapacity sdc = new SlittingDefaultCapacity();
                                    sdc.ID = Convert.ToInt16(dr["id"]);
                                    sdc.Machine = new Machine() { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    sdc.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    sdc.Shift = Convert.ToInt16(dr["shift"]);
                                    sdc.Day = dr["day"].ToString();
                                    slittingDefaultCapacity.Add(sdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading SlittingDefaults: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return slittingDefaultCapacity;
        }

        public static List<PeelingDefaultCapacity> GetAllPeelingDefaultCapacities()
        {
            List<PeelingDefaultCapacity> peelingDefaultCapacity = new List<PeelingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PeelingDefaultCapacity sdc = new PeelingDefaultCapacity();
                                    sdc.ID = Convert.ToInt16(dr["id"]);
                                    sdc.Machine = new Machine() { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    sdc.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    sdc.Shift = Convert.ToInt16(dr["shift"]);
                                    sdc.Day = dr["day"].ToString();
                                    peelingDefaultCapacity.Add(sdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading SlittingDefaults: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return peelingDefaultCapacity;
        }

        public static List<ReRollingDefaultCapacity> GetAllReRollingDefaultCapacities()
        {
            List<ReRollingDefaultCapacity> reRollingDefaultCapacity = new List<ReRollingDefaultCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ReRollingDefaultCapacity", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ReRollingDefaultCapacity sdc = new ReRollingDefaultCapacity();
                                    sdc.ID = Convert.ToInt16(dr["id"]);
                                    sdc.Machine = new Machine() { MachineID = Convert.ToInt16(dr["machine_id"]) };
                                    sdc.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    sdc.Shift = Convert.ToInt16(dr["shift"]);
                                    sdc.Day = dr["day"].ToString();
                                    reRollingDefaultCapacity.Add(sdc);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ReRollinDefaults: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return reRollingDefaultCapacity;
        }

        public static List<SystemParameters> GetAllSystemParametersByValue(bool value)
        {
            List<SystemParameters> systemParameters = new List<SystemParameters>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM SystemParameter WHERE value=@Value", conn);
                cmdSelect.Parameters.AddWithValue("@Value", value);
                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    SystemParameters sp = new SystemParameters();
                                    sp.ParameterCode = (dr["parameter_Code"]).ToString();
                                    sp.Ddescription = dr["description"].ToString();
                                    sp.Value = Convert.ToBoolean(dr["value"]);
                                    systemParameters.Add(sp);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return systemParameters;
        }



        public static int UpdateSystemParameter(string paraCode, bool value)
        {
            int rows = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                using (SqlCommand cmdUpdate = new SqlCommand("UPDATE SystemParameter SET value = @Value " +
                                                             "WHERE parameter_code=@ParameterCode", conn))
                {
                    conn.Open();
                    try
                    {

                        cmdUpdate.Parameters.AddWithValue("@ParameterCode", paraCode);
                        cmdUpdate.Parameters.AddWithValue("@Value", value);
                        rows = cmdUpdate.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating System Parameter Table" + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return rows;
        }

        /******************UPDATE GRADING PRODUCTION*************/
        public static int UpdateGradingActive(GradingProductionDetails gpd, bool active)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET active_order = @Active " +
                                                            "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                            "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn);
                conn.Open();
                try
                {

                    cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", gpd.ProdTimeTableID);
                    cmdUpdateStatus.Parameters.AddWithValue("@SalesID", gpd.SalesOrderId);
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", gpd.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", gpd.Shift);
                    cmdUpdateStatus.Parameters.AddWithValue("@statusParam", "Grading");
                    cmdUpdateStatus.Parameters.AddWithValue("@OrderType", gpd.OrderType);
                    cmdUpdateStatus.Parameters.AddWithValue("@ActiveCurrent", gpd.GradingActive);
                    cmdUpdateStatus.Parameters.AddWithValue("@Active", active);
                    result = cmdUpdateStatus.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Grading Scheduling Active" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static int UpdateMixingActive(MixingProductionDetails mpd, bool active)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE MixingCurrentCapacity SET active_order = @Active " +
                                                            "WHERE prod_time_table_id=@ProdTimeTableID AND mixing_time_table_id=@MixingTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND order_type=@OrderType AND rank=@Rank", conn);
                conn.Open();
                try
                {
                    cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", mpd.ProdTimeTableID);
                    cmdUpdateStatus.Parameters.AddWithValue("@MixingTimeTableID", mpd.MixingTimeTableID);
                    cmdUpdateStatus.Parameters.AddWithValue("@SalesID", mpd.SalesOrderId);
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", mpd.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@OrderType", mpd.OrderType);
                    cmdUpdateStatus.Parameters.AddWithValue("@Rank", mpd.Rank);
                    cmdUpdateStatus.Parameters.AddWithValue("@Active", active);
                    result = cmdUpdateStatus.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Mixing Current Capacity Active" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static bool CheckGradingOrderActive(GradingProductionDetails gpd)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT active_order FROM GradingScheduling " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                                  "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", gpd.ProdTimeTableID);
                        cmdGetData.Parameters.AddWithValue("@SalesID", gpd.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("@rawProdId", gpd.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("@shiftParam", gpd.Shift);
                        cmdGetData.Parameters.AddWithValue("@statusParam", "Grading");
                        cmdGetData.Parameters.AddWithValue("@OrderType", gpd.OrderType);
                        cmdGetData.Parameters.AddWithValue("@ActiveCurrent", gpd.GradingActive);

                        object result = cmdGetData.ExecuteScalar();
                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter Table: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static bool CheckMixingOrderActive(MixingProductionDetails mpd)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT active_order FROM MixingCurrentCapacity " +
                                                                  "WHERE prod_time_table_id=@ProdTimeTableID AND mixing_time_table_id=@MixingTimeTableID AND raw_product_id = @rawProdId " +
                                                                  "AND sales_id=@SalesID AND order_type=@OrderType AND rank=@Rank AND blockLog_qty=@BlockLogQty", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", mpd.ProdTimeTableID);
                        cmdGetData.Parameters.AddWithValue("@MixingTimeTableID", mpd.MixingTimeTableID);
                        cmdGetData.Parameters.AddWithValue("@SalesID", mpd.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("@rawProdId", mpd.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("@BlockLogQty", mpd.BlockLogQty);
                        cmdGetData.Parameters.AddWithValue("@OrderType", mpd.OrderType);
                        cmdGetData.Parameters.AddWithValue("@Rank", mpd.Rank);
                        cmdGetData.Parameters.AddWithValue("@Active", mpd.ActiveOrder);

                        object result = cmdGetData.ExecuteScalar();
                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading CheckMixingOrderActive: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static List<ShredStock> GetShredStock()
        {
            List<ShredStock> shredStock = new List<ShredStock>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT ShredStock.shred_id,Shred.name,ShredStock.qty FROM ShredStock " +
                                                           "INNER JOIN Shred ON ShredStock.shred_id = Shred.id", conn);


                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ShredStock ss = new ShredStock();
                                ss.Shred = new Shred() { ID = Convert.ToInt16(dr["shred_id"]), Name = dr["name"].ToString() };
                                ss.Qty = Convert.ToDecimal(dr["qty"]);
                                shredStock.Add(ss);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return shredStock;
        }

        public static int DeductShredStock(List<ShredStock> shredStockList)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE ShredStock SET qty -= @Qty WHERE shred_id = @ID", conn);

                conn.Open();
                try
                {
                    foreach (var item in shredStockList)
                    {
                        cmd.Parameters.AddWithValue("@ID", item.Shred.ID);
                        cmd.Parameters.AddWithValue("@QTY", item.Qty);
                        result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<FormulaOptions> GetFormulaOptions()
        {
            List<FormulaOptions> formulaOptions = new List<FormulaOptions>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdSelect = new SqlCommand("SELECT SimiliarBlockLogs.id,SimiliarBlockLogs.group_id,SimiliarBlockLogs.raw_product_id, " +
                                                      "RawProducts.RawProductCode,RawProducts.Description, " +
                                                      "Formulas.product_capacity1,Formulas.product_capacity2,Formulas.grading_weight1,Formulas.grading_weight2,Formulas.grading " +
                                                      "FROM SimiliarBlockLogs " +
                                                      "INNER JOIN RawProducts ON SimiliarBlockLogs.raw_product_id = RawProducts.RawProductID " +
                                                      "INNER JOIN Formulas ON SimiliarBlockLogs.raw_product_id = Formulas.raw_product_id " +
                                                      "ORDER BY SimiliarBlockLogs.group_id", conn);


                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    FormulaOptions fo = new FormulaOptions();
                                    fo.ID = Convert.ToInt16(dr["id"]);
                                    fo.GroupID = Convert.ToInt16(dr["group_id"]);
                                    fo.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]), RawProductCode = dr["RawProductCode"].ToString(), Description = dr["Description"].ToString() };
                                    fo.Formula = new Formula() { ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]), ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]), GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]), GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]), GradingFormula = dr["grading"].ToString() };
                                    formulaOptions.Add(fo);
                                }
                            }
                        }
                    }
                }

                catch (Exception e)
                {

                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaOptions;
        }

        public static List<Formula> GetFormulaDetailsByRawProdID(int rawProdId)
        {

            List<Formula> formulaList = new List<Formula>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM Formulas WHERE raw_product_id = @RawProductID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@RawProductID", rawProdId);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Formula formulas = new Formula();
                                    formulas.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    formulas.ProductCapacity1 = Convert.ToInt16(dr["product_capacity1"]);
                                    formulas.ProductCapacity2 = Convert.ToInt16(dr["product_capacity2"]);
                                    formulas.GradingWeight1 = Convert.ToDecimal(dr["grading_weight1"]);
                                    formulas.GradingWeight2 = Convert.ToDecimal(dr["grading_weight2"]);
                                    formulas.GradingWeight3 = Convert.ToDecimal(dr["grading_weight3"]);
                                    formulas.NoOfMixes = Convert.ToInt16(dr["no_of_mixes"]);
                                    formulas.MachineID = Convert.ToInt16(dr["machine_id"]);
                                    formulas.GradingFormula = dr["grading"].ToString();
                                    formulas.MixingFormula = dr["mixing"].ToString();
                                    formulaList.Add(formulas);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return formulaList;
        }


        public static int DeleteGradingOrder(int gradingSchedulingID, List<ShredStock> shredStock)
        {
            int res = 0;
            int prodTimeTableId = 0;
            int rawProductId = 0;
            int salesId = 0;
            int shift = 0;
            int orderType = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGS = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                        "WHERE ID = @idParam", conn);

                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE ID = @idParam", conn);

                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND raw_product_id = @rawProductIdParam AND sales_id =@salesIdParam AND shift = @shiftParam AND order_type = @orderTypeParam", conn);

                SqlCommand cmdUpdateShredStock = new SqlCommand("UPDATE ShredStock SET qty =@Qty " +
                                                                "WHERE shred_id = @ShredID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelectGS.Transaction = trans;
                    cmdSelectGS.Parameters.AddWithValue("@idParam", gradingSchedulingID);

                    using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    prodTimeTableId = Convert.ToInt32(dr["production_time_table_id"]);
                                    rawProductId = Convert.ToInt16(dr["raw_product_id"]);
                                    salesId = Convert.ToInt32(dr["sales_id"]);
                                    shift = Convert.ToInt32(dr["shift"]);
                                    orderType = Convert.ToInt16(dr["order_type"]);
                                }
                            }
                        }
                    }

                    cmdDeleteGS.Transaction = trans;
                    cmdDeleteGS.Parameters.AddWithValue("@idParam", gradingSchedulingID);
                    cmdDeleteGS.ExecuteNonQuery();

                    cmdDeleteCC.Transaction = trans;
                    cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", prodTimeTableId);
                    cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", rawProductId);
                    cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", salesId);
                    cmdDeleteCC.Parameters.AddWithValue("@shiftParam", shift);
                    cmdDeleteCC.Parameters.AddWithValue("@orderTypeParam", orderType);
                    cmdDeleteCC.ExecuteNonQuery();

                    foreach (var item in shredStock)
                    {
                        cmdUpdateShredStock.Transaction = trans;
                        cmdUpdateShredStock.Parameters.AddWithValue("@ShredID", item.Shred.ID);
                        cmdUpdateShredStock.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdUpdateShredStock.ExecuteNonQuery();
                        cmdUpdateShredStock.Parameters.Clear();
                    }

                    res = 1;
                    trans.Commit();
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Can't delete records from GradingScheduling and CurrentCapacity!" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int DeleteSlittingOrder(SlittingOrder slittingOrder)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM SlittingOrders " +
                                                        "WHERE id = @Id", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdDeleteCC.Transaction = trans;
                    cmdDeleteCC.Parameters.AddWithValue("@Id", slittingOrder.ID);
                    res = cmdDeleteCC.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    res = 0;
                    trans.Rollback();
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Can't delete records from GradingScheduling and CurrentCapacity!" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int EnableDisableSingleShift(DateTime date, int MachineID, bool value, int shift)
        {
            int result = 0;
            string colName = string.Empty;

            if (shift == 1)
            {
                colName = "day_shift";
            }
            else if (shift == 2)
            {
                colName = "evening_shift";
            }
            else if (shift == 3)
            {
                colName = "night_shift";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE ProductionTimeTable SET " + colName + " = @val " +
                                                " WHERE machine_id = @MachineID AND date = @Date", conn);

                conn.Open();
                try
                {
                    cmd.Parameters.AddWithValue("@MachineID", MachineID);
                    cmd.Parameters.AddWithValue("@Date", date);
                    cmd.Parameters.AddWithValue("@val", value);
                    result = cmd.ExecuteNonQuery();
                    cmd.Parameters.Clear();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating ProductionTimeTable " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static Tuple<List<GradingScheduling>, List<CurrentCapacity>> GetAllGradingCapacitesToMove(int id, DateTime date, string type, int shift, string btnType)
        {
            int count = 0;
            string nDate = date.ToString("yyyy-MM-dd");
            DateTime currDate = DateTime.Now;
            List<CurrentCapacity> ccList = new List<CurrentCapacity>();
            List<GradingScheduling> gsList = new List<GradingScheduling>();
            //Day Disable only
            if (shift == 0)
            {
                shift = 1;
            }
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    List<ProductionTimeTable> pttList = GetProductionTimeTableByID(1, date);

                    using (SqlCommand cmdSelectExistance = new SqlCommand("SELECT COUNT(*) FROM GradingScheduling " +
                                                                          "WHERE production_time_table_id = @ProdTimeTableId AND shift =@Shift", conn))


                    using (SqlCommand cmdSelectCC = new SqlCommand("SELECT CurrentCapacity.id,CurrentCapacity.prod_timetable_id,CurrentCapacity.product_capacity_id,CurrentCapacity.sales_id,CurrentCapacity.raw_product_id,CurrentCapacity.product_id,CurrentCapacity.prod_timetable_id,CurrentCapacity.shift,CurrentCapacity.capacity_kg,CurrentCapacity.blocks_logs,CurrentCapacity.order_type, " +
                                                                   "ProductionTimeTable.date, " +
                                                                   "Orders.required_date,Orders.required_date_selected " +
                                                                   "FROM CurrentCapacity " +
                                                                   "INNER JOIN ProductionTimeTable ON CurrentCapacity.prod_timetable_id = ProductionTimeTable.id " +
                                                                   "INNER JOIN Orders ON CurrentCapacity.sales_id = Orders.order_id " +
                                                                   "WHERE ((ProductionTimeTable.date > @Date AND shift >= 1) or (shift >= @Shift AND ProductionTimeTable.date = @Date)) " +
                                                                   "ORDER BY CurrentCapacity.order_type, Orders.required_date_selected desc, Orders.required_date, ProductionTimeTable.date", conn))


                    using (SqlCommand cmdSelectGS = new SqlCommand("SELECT GradingScheduling.id,GradingScheduling.production_time_table_id,GradingScheduling.raw_product_id,GradingScheduling.sales_id,GradingScheduling.blocklog_qty,GradingScheduling.shift,GradingScheduling.status,GradingScheduling.order_type,GradingScheduling.active_order,GradingScheduling.print_counter, " +
                                                                   "ProductionTimeTable.date, " +
                                                                   "Orders.required_date,Orders.required_date_selected " +
                                                                   "FROM GradingScheduling  " +
                                                                   "INNER JOIN ProductionTimeTable ON GradingScheduling.production_time_table_id = ProductionTimeTable.id " +
                                                                   "INNER JOIN Orders ON GradingScheduling.sales_id = Orders.order_id " +
                                                                   "WHERE ((ProductionTimeTable.date > @Date AND shift >= 1) or (shift >= @Shift AND ProductionTimeTable.date = @Date)) " +
                                                                   "ORDER BY GradingScheduling.order_type, Orders.required_date_selected desc, Orders.required_date, ProductionTimeTable.date", conn))
                    {


                        cmdSelectExistance.Parameters.AddWithValue("@ProdTimeTableId", pttList[0].ID);
                        cmdSelectExistance.Parameters.AddWithValue("@Shift", shift);
                        count = (int)cmdSelectExistance.ExecuteScalar();


                        if (count > 0 || type == "Enable" || btnType == "DayButton")
                        {

                            cmdSelectCC.Parameters.AddWithValue("@MachineId", id);
                            cmdSelectCC.Parameters.AddWithValue("@Date", nDate);
                            cmdSelectCC.Parameters.AddWithValue("@Shift", shift);
                            using (SqlDataReader dr = cmdSelectCC.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        DateTime requiredDate = Convert.ToDateTime(dr["required_date"]);
                                        DateTime prodTimeTableDate = Convert.ToDateTime(dr["date"]);
                                        bool isReqDateSelected = Convert.ToBoolean(dr["required_date_selected"]);

                                        //if (type == "Enable")
                                        //{
                                        //    if (((date.Date < prodTimeTableDate) && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        //    {
                                        //        CurrentCapacity cc = new CurrentCapacity();
                                        //        cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                        //        cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                        //        cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                        //        cc.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                        //        cc.ProductID = Convert.ToInt16(dr["product_id"]);
                                        //        cc.Shift = Convert.ToInt16(dr["shift"]);
                                        //        cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                        //        cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                        //        cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                        //        ccList.Add(cc);
                                        //    }
                                        //}
                                        //else if (type == "Disable")
                                        //{
                                        if ((date.Date == prodTimeTableDate) || (date.Date < prodTimeTableDate && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        {
                                            CurrentCapacity cc = new CurrentCapacity();
                                            cc.ID = Convert.ToInt32(dr["id"]);
                                            cc.ProdTimeTableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                            cc.ProductCapacityID = Convert.ToInt16(dr["product_capacity_id"]);
                                            cc.SalesID = Convert.ToInt32(dr["sales_id"]);
                                            cc.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                            cc.ProductID = Convert.ToInt16(dr["product_id"]);
                                            cc.Shift = Convert.ToInt16(dr["shift"]);
                                            cc.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                            cc.BlocksLogs = Convert.ToDecimal(dr["blocks_logs"]);
                                            cc.OrderType = Convert.ToInt16(dr["order_type"]);
                                            ccList.Add(cc);
                                        }
                                        //}
                                    }
                                }
                            }

                            cmdSelectGS.Parameters.AddWithValue("@MachineId", id);
                            cmdSelectGS.Parameters.AddWithValue("@date", nDate);
                            cmdSelectGS.Parameters.AddWithValue("@Shift", shift);
                            using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {

                                        DateTime requiredDate = Convert.ToDateTime(dr["required_date"]);
                                        DateTime prodTimeTableDate = Convert.ToDateTime(dr["date"]);
                                        bool isReqDateSelected = Convert.ToBoolean(dr["required_date_selected"]);

                                        //if (type == "Enable")
                                        //{
                                        //    if ((date.Date == prodTimeTableDate) || (date.Date < prodTimeTableDate && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        //    {
                                        //        GradingScheduling gs = new GradingScheduling();
                                        //        gs.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                        //        gs.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                        //        gs.SalesID = Convert.ToInt32(dr["sales_id"]);
                                        //        gs.BlocklogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                        //        gs.Shift = Convert.ToInt16(dr["shift"]);
                                        //        gs.Status = dr["status"].ToString();
                                        //        gs.OrderType = Convert.ToInt16(dr["order_type"]);
                                        //        gs.ActiveOrder = Convert.ToBoolean(dr["active_order"]);
                                        //        gs.PrintCounter = Convert.ToInt16(dr["print_counter"]);
                                        //        gsList.Add(gs);
                                        //    }
                                        //}
                                        //else if (type == "Disable")
                                        //{
                                        if ((date.Date == prodTimeTableDate) || (date.Date < prodTimeTableDate && isReqDateSelected == false) || (isReqDateSelected == true && (requiredDate.Date > prodTimeTableDate || requiredDate.Date < prodTimeTableDate)))
                                        {

                                            GradingScheduling gs = new GradingScheduling();
                                            gs.ID = Convert.ToInt32(dr["id"]);
                                            gs.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                            gs.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                            gs.SalesID = Convert.ToInt32(dr["sales_id"]);
                                            gs.BlocklogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                            gs.Shift = Convert.ToInt16(dr["shift"]);
                                            gs.Status = dr["status"].ToString();
                                            gs.OrderType = Convert.ToInt16(dr["order_type"]);
                                            gs.ActiveOrder = Convert.ToBoolean(dr["active_order"]);
                                            gs.PrintCounter = Convert.ToInt16(dr["print_counter"]);
                                            gsList.Add(gs);
                                        }
                                        //}
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            foreach (var item in gsList)
            {
                Console.WriteLine(item.ProductionTimeTableID + " " + item.Shift + " " + item.RawProductID + " " + item.BlocklogQty + " " + item.RequiredDateSelected + " " + item.SalesID);
            }
            return Tuple.Create(gsList, ccList);
        }

        public static int InsertCapacityAndGradingSchedulingBackUp(DateTime backUpDate, List<CurrentCapacity> CurrentCap, List<GradingScheduling> GradingScheduling, string type)
        {
            int result = 0;
            DateTime backUpDateTime = DateTime.Now.Date;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdCurrCapInsert = new SqlCommand("INSERT INTO CurrentCapacityBackUp(backup_date,backup_shift_id,backup_type,id,prod_timetable_id,product_capacity_id,sales_id,raw_product_id,product_id,shift,capacity_kg,blocks_logs,order_type) " +
                                                      "VALUES (@backup_date,@backup_shift,@backup_type,@id,@prodTimeTableIdParam,@prodCapIdparam,@salesIdParam,@RawProdIdParam,@ProductIdParam,@ShiftParam,@CapacityKgParam,@BlockLogsParam,@OrderTypeParam)", conn);

                SqlCommand cmdGradingSchInsert = new SqlCommand("INSERT INTO GradingSchedulingBackUp(backup_date,backup_shift_id,backup_type,id,production_time_table_id,raw_product_id,sales_id,blocklog_qty,shift,status,order_type,active_order,print_counter) VALUES " +
                                                      "(@backup_date,@backup_shift,@backup_type,@id,@newProdTimeTableIdParam,@rawProductIdParam,@salesIdParam,@newBlock,@newShift,@statusParam,@orderTypeParam,@activeParam,@printCounterParam)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    backUpDateTime = backUpDate.Add(new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second));

                    foreach (var item in CurrentCap)
                    {
                        cmdCurrCapInsert.Transaction = trans;
                        cmdCurrCapInsert.Parameters.AddWithValue("@backup_date", backUpDateTime);
                        cmdCurrCapInsert.Parameters.AddWithValue("@backup_shift", item.Shift);
                        cmdCurrCapInsert.Parameters.AddWithValue("@backup_type", type);
                        cmdCurrCapInsert.Parameters.AddWithValue("@id", item.ID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@prodCapIdparam", item.ProductCapacityID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@RawProdIdParam", item.RawProductID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@ProductIdParam", item.ProductID);
                        cmdCurrCapInsert.Parameters.AddWithValue("@ShiftParam", item.Shift);
                        cmdCurrCapInsert.Parameters.AddWithValue("@CapacityKgParam", item.CapacityKG);
                        cmdCurrCapInsert.Parameters.AddWithValue("@BlockLogsParam", item.BlocksLogs);
                        cmdCurrCapInsert.Parameters.AddWithValue("@OrderTypeParam", item.OrderType);
                        result = cmdCurrCapInsert.ExecuteNonQuery();
                        cmdCurrCapInsert.Parameters.Clear();
                    }

                    foreach (var item in GradingScheduling)
                    {
                        cmdGradingSchInsert.Transaction = trans;
                        cmdGradingSchInsert.Parameters.AddWithValue("@backup_date", backUpDateTime);
                        cmdGradingSchInsert.Parameters.AddWithValue("@backup_shift", item.Shift);
                        cmdGradingSchInsert.Parameters.AddWithValue("@backup_type", type);
                        cmdGradingSchInsert.Parameters.AddWithValue("@id", item.ID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@newProdTimeTableIdParam", item.ProductionTimeTableID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@rawProductIdParam", item.RawProductID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                        cmdGradingSchInsert.Parameters.AddWithValue("@newBlock", item.BlocklogQty);
                        cmdGradingSchInsert.Parameters.AddWithValue("@newShift", item.Shift);
                        cmdGradingSchInsert.Parameters.AddWithValue("@statusParam", item.Status);
                        cmdGradingSchInsert.Parameters.AddWithValue("@orderTypeParam", item.OrderType);
                        cmdGradingSchInsert.Parameters.AddWithValue("@activeParam", item.ActiveOrder);
                        cmdGradingSchInsert.Parameters.AddWithValue("@printCounterParam", item.PrintCounter);
                        result = cmdGradingSchInsert.ExecuteNonQuery();
                        cmdGradingSchInsert.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Backup both CurrentCapacityBackUp and GradingSchedulingBackUp tables" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }


        public static int DeleteCapacity(List<CurrentCapacity> capList, List<GradingScheduling> gradingList)
        {

            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //INSERT INTO CURRENT CAPACITY
                SqlCommand cmdDeleteCurrCap = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                       "WHERE prod_timetable_id=@prod_timetable_id AND product_capacity_id=@product_capacity_id and shift=@shift and sales_id=@sales_id and raw_product_id=@raw_product_id and order_type = @orderType", conn);

                //INSERT INTO GRADING
                SqlCommand cmdDeleteGradingSched = new SqlCommand("DELETE FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@production_time_table_id and shift=@shift and sales_id=@sales_id and raw_product_id=@raw_product_id and order_type = @orderType", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capList)
                    {
                        //DELETE CURRENT CAPACITY
                        cmdDeleteCurrCap.Transaction = trans;
                        cmdDeleteCurrCap.Parameters.AddWithValue("@prod_timetable_id", item.ProdTimeTableID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@product_capacity_id", item.ProductCapacityID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@shift", item.Shift);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@sales_id", item.SalesID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@raw_product_id", item.RawProductID);
                        cmdDeleteCurrCap.Parameters.AddWithValue("@orderType", item.OrderType);

                        result = cmdDeleteCurrCap.ExecuteNonQuery();
                        cmdDeleteCurrCap.Parameters.Clear();
                    }

                    foreach (var item in gradingList)
                    {
                        //DELETE GRADING SCHEDULING
                        cmdDeleteGradingSched.Transaction = trans;
                        cmdDeleteGradingSched.Parameters.AddWithValue("@production_time_table_id", item.ProductionTimeTableID);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@raw_product_id", item.RawProductID);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@sales_id", item.SalesID);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@shift", item.Shift);
                        cmdDeleteGradingSched.Parameters.AddWithValue("@orderType", item.OrderType);

                        result = cmdDeleteGradingSched.ExecuteNonQuery();
                        cmdDeleteGradingSched.Parameters.Clear();
                    }

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<MixingOnly> GetMixingOnly()
        {
            List<MixingOnly> mixingOnlyList = new List<MixingOnly>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingOnly", conn))
                    {

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MixingOnly mo = new MixingOnly();

                                    mo.ProductID = Convert.ToInt16(dr["product_id"]);
                                    mo.RawProductID = Convert.ToInt16(dr["raw_product_id"]);
                                    mixingOnlyList.Add(mo);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return mixingOnlyList;

        }

        public static bool GetSystemParameter(string parCode)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT value FROM SystemParameter " +
                                                                  "WHERE parameter_code=@ParaCode", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ParaCode", parCode);

                        object result = cmdGetData.ExecuteScalar();

                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter Table: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static Tuple<Int32, int, bool> CheckToAddCuring(int rawProductId)
        {
            Int32 orderNo = 0;
            int productId = 0;
            bool active = false;


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT MixingCurrentCapacity.sales_id,OrderDetails.product_id,RawProducts.Active " +
                                                           "FROM RawProducts " +
                                                           "INNER JOIN SimiliarBlockLogs  ON SimiliarBlockLogs.raw_product_id = RawProducts.RawProductID " +
                                                           "INNER JOIN MixingCurrentCapacity ON SimiliarBlockLogs.raw_product_id = MixingCurrentCapacity.raw_product_id " +
                                                           "INNER JOIN OrderDetails ON MixingCurrentCapacity.sales_id = OrderDetails.order_id " +
                                                           "WHERE SimiliarBlockLogs.raw_product_id=@RawProductID", conn);

                    cmdGetData.Parameters.AddWithValue("@RawProductID", rawProductId);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                orderNo = Convert.ToInt32(dr["sales_id"]);
                                productId = Convert.ToInt16(dr["product_id"]);
                                active = Convert.ToBoolean(dr["Active"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(orderNo, productId, active);
        }

        public static List<PeelingOrder> GetPeelingOrderByID(Int32 id)
        {
            List<PeelingOrder> peelingOrderList = new List<PeelingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingOrders WHERE id = @Id", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@Id", id);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    PeelingOrder po = new PeelingOrder();
                                    po.ID = Convert.ToInt32(dr["id"]);
                                    po.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    po.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                    po.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["product_id"]) };
                                    po.Qty = Convert.ToDecimal(dr["qty"]);
                                    po.Logs = Convert.ToDecimal(dr["logs"]);
                                    po.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    po.IsReRollingReq = Convert.ToBoolean(dr["is_re_rolling_req"]);
                                    peelingOrderList.Add(po);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return peelingOrderList;
        }

        public static Curing GetTopCuringProduct(int OrderNo, int RawProductID)
        {
            Curing curing = new Curing();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT DISTINCT TOP 1 id,blc_raw_product_id,product_id,order_id,blc_blocklog_qty,blc_start_time,blc_end_time,is_cured,is_enabled " +
                                                           "FROM BlockLogCuring " +
                                                           "WHERE order_id = @OrderNo AND blc_raw_product_id = @RawProductID AND is_enabled = 'False'", conn);

                    cmdGetData.Parameters.AddWithValue("@OrderNo", OrderNo);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", RawProductID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                curing.id = Convert.ToInt32(dr["id"]);
                                curing.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["blc_raw_product_id"]) } };
                                curing.OrderNo = Convert.ToInt32(dr["order_id"]);
                                curing.Qty = Convert.ToDecimal(dr["blc_blocklog_qty"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return curing;
        }

        /***********************GET ALL THE ORDERS WHICH HAVE SAME RAW ID*****************/
        public static ObservableCollection<RawProductionDetails> GetAllRawProductsByID(RawProductionDetails rawProductionDetails, OrderStatus orderStatus)
        {

            ObservableCollection<RawProductionDetails> rawProdColl = new ObservableCollection<RawProductionDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM GradingScheduling " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdIdParam AND sales_id =@SalesID " +
                                                                  "AND shift = @shiftParam AND status = @statusParam AND order_type = @OrderType", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("ProdTimeTableID", rawProductionDetails.RawProDetailsID);
                        cmdGetData.Parameters.AddWithValue("SalesID", rawProductionDetails.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("rawProdIdParam", rawProductionDetails.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("shiftParam", rawProductionDetails.Shift);
                        cmdGetData.Parameters.AddWithValue("statusParam", orderStatus.ToString());
                        cmdGetData.Parameters.AddWithValue("OrderType", rawProductionDetails.OrderType);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductionDetails rawProduct = new RawProductionDetails();

                                    rawProduct.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"])
                                    };

                                    rawProduct.OrderType = Convert.ToInt16(dr["order_type"]);
                                    rawProduct.BlockLogQty = Convert.ToDecimal(dr["blocklog_qty"]);
                                    rawProduct.Shift = Convert.ToInt16(dr["shift"]);
                                    rawProduct.OrderType = Convert.ToInt16(dr["order_type"]);
                                    rawProdColl.Add(rawProduct);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rawProdColl;

        }
        /***********************GET ALL THE ORDERS WHICH HAVE SAME RAW ID*****************/
        public static ObservableCollection<RawProductionDetails> GetAllmixingRawProductsByID(MixingProductionDetails mixingProductionDetails)
        {
            ObservableCollection<RawProductionDetails> rawProdColl = new ObservableCollection<RawProductionDetails>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingCurrentCapacity WHERE mixing_time_table_id = @MixingTimeTableID AND raw_product_id = @rawProdIdParam AND sales_id = @salesIDParam AND status = @Status", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                        cmdGetData.Parameters.AddWithValue("rawProdIdParam", mixingProductionDetails.RawProduct.RawProductID);
                        cmdGetData.Parameters.AddWithValue("salesIDParam", mixingProductionDetails.SalesOrderId);
                        cmdGetData.Parameters.AddWithValue("Status", "Mixing");

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    RawProductionDetails rawProduct = new RawProductionDetails();

                                    rawProduct.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"])
                                    };
                                    rawProduct.BlockLogQty = Convert.ToDecimal(dr["blockLog_qty"]);
                                    rawProduct.SalesOrderId = Convert.ToInt16(dr["sales_id"]);
                                    rawProdColl.Add(rawProduct);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rawProdColl;

        }

        /******************UPDATE GRADING PRODUCTION*************/
        public static int UpdateRawProdQty(GradingProductionDetails gradingProductionDetails, Int32 mixingProdDetID, int orderType, int currentShift, int currentProdTimeTable, List<GradingCompleted> ggList, string pcName, Int32 realProdTimeTableID, DateTime realDateTime)
        {
            decimal totBlockLogGS = 0;
          
            decimal kgTot = 0;
            int tmpShiftId = 0;

            int rows1 = 0;
            OrderStatus orderStatus = OrderStatus.Grading;          

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                        "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                        "AND status = @statusParam AND order_type=@OrderType", conn);
                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty = @logBlockParam " +
                                                            "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                            "AND status = @statusParam AND order_type=@OrderType", conn);
                //Update Current Capacity
                SqlCommand cmdUpdateCC = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg=capacity_kg-@CapacityKg,blocks_logs = blocks_logs+@BlockSLogs " +
                                                        "WHERE prod_timetable_id=@ProdTimeTableID AND product_capacity_id=@ProdCapacityId AND sales_id=@SalesId  AND raw_product_id = @RawproductId AND shift = @Shift  AND order_type=@OrderType", conn);

                //GradingCompleted
                SqlCommand cmdGradingCompleted = new SqlCommand("INSERT INTO GradingCompleted VALUES(@ProdTimeTableID,@SalesID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDateTime,@CreatedTime,@Status)", conn);

                //GradingGradesCompleted
                SqlCommand cmdGGCompletedSel = new SqlCommand("SELECT kg_completed FROM GradingGradesCompleted " +
                                                       "WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);


                SqlCommand cmdGGCompleted = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingGradesCompleted WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType) " +
                                                           "INSERT INTO GradingGradesCompleted VALUES(@ProdTimeTableID,@GradingID,@KgCompleted,@Shift,@CreatedDate,@OrderType) " +
                                                           "ELSE " +
                                                           "UPDATE GradingGradesCompleted SET kg_completed = @KgCompleted WHERE prod_time_table_id=@ProdTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);
                //Update GradingScheduling Active to false
                SqlCommand cmdUpdateGradingSchedulingActvie = new SqlCommand("UPDATE GradingScheduling SET active_order = @Active " +
                                                                             "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                                             "AND status = @statusParam AND order_type=@OrderType AND active_order=@ActiveCurrent", conn);

                //Update GradingStatus
                //SqlCommand cmdUpdateGS = new SqlCommand("UPDATE GradingStatus SET pending-=@Pending,completed +=@Completed " +
                //                                        "WHERE order_no=@OrderNo AND raw_product_id = @RawproductID", conn);

                //GradingScheduling second reading
                SqlCommand cmdSelectGS2 = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                        "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                        "AND status = @statusParam AND order_type=@OrderType", conn);


                //Update GradingScheduling AS Mixing
                SqlCommand cmdUpdateGradingStatus = new SqlCommand("UPDATE GradingScheduling SET status='Mixing' " +
                                                                   "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id = @rawProdId AND sales_id=@SalesID AND shift = @shiftParam " +
                                                                   "AND status = @statusParam AND order_type=@OrderType", conn);

                //Update GradingScheduling AS Mixing
                //SqlCommand cmdUpdateShredStock = new SqlCommand("UPDATE ShredStock SET qty=@Qty " +
                //                                                "WHERE shred_id=@ShredID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {



                    cmdSelectGS.Transaction = trans;
                    cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdSelectGS.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdSelectGS.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdSelectGS.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdSelectGS.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    cmdSelectGS.Parameters.AddWithValue("@OrderType", orderType);

                    using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    totBlockLogGS = Convert.ToDecimal(dr["blocklog_qty"]);
                                }
                            }
                        }
                    }

                    cmdUpdateStatus.Transaction = trans;
                    cmdUpdateStatus.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdUpdateStatus.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdUpdateStatus.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdUpdateStatus.Parameters.AddWithValue("@logBlockParam", totBlockLogGS - 1);
                    cmdUpdateStatus.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdUpdateStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    cmdUpdateStatus.Parameters.AddWithValue("@OrderType", orderType);
                    cmdUpdateStatus.ExecuteNonQuery();

                    //Update GradingSchedulingActive to false
                    cmdUpdateGradingSchedulingActvie.Transaction = trans;
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@statusParam", "Grading");
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@OrderType", orderType);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@ActiveCurrent", gradingProductionDetails.GradingActive);
                    cmdUpdateGradingSchedulingActvie.Parameters.AddWithValue("@Active", false);
                    cmdUpdateGradingSchedulingActvie.ExecuteNonQuery();

                    List<Formula> fList = GetFormulaDetailsByRawProdID(gradingProductionDetails.RawProduct.RawProductID);
                    if (fList.Count > 0)
                    {

                        if (fList[0].ProductCapacity1 > 0)
                        {
                            cmdUpdateCC.Transaction = trans;
                            cmdUpdateCC.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                            cmdUpdateCC.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                            cmdUpdateCC.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                            cmdUpdateCC.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                            cmdUpdateCC.Parameters.AddWithValue("@productId", 0);
                            cmdUpdateCC.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                            cmdUpdateCC.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                            cmdUpdateCC.Parameters.AddWithValue("@BlockSLogs", -1);
                            cmdUpdateCC.Parameters.AddWithValue("@OrderType", orderType);
                            rows1 = cmdUpdateCC.ExecuteNonQuery();
                        }

                        if (fList[0].ProductCapacity2 > 0)
                        {
                            cmdUpdateCC.Parameters.Clear();

                            cmdUpdateCC.Transaction = trans;
                            cmdUpdateCC.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                            cmdUpdateCC.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                            cmdUpdateCC.Parameters.AddWithValue("@SalesId", gradingProductionDetails.SalesOrderId);
                            cmdUpdateCC.Parameters.AddWithValue("@RawproductId", gradingProductionDetails.RawProduct.RawProductID);
                            cmdUpdateCC.Parameters.AddWithValue("@productId", 0);
                            cmdUpdateCC.Parameters.AddWithValue("@Shift", gradingProductionDetails.Shift);
                            cmdUpdateCC.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight2);
                            cmdUpdateCC.Parameters.AddWithValue("@BlockSLogs", -1);
                            cmdUpdateCC.Parameters.AddWithValue("@OrderType", orderType);
                            rows1 = cmdUpdateCC.ExecuteNonQuery();
                        }
                    }

                    if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                    {
                        tmpShiftId = 1;
                    }
                    else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                    {
                        tmpShiftId = 2;
                    }
                    else
                    {
                        tmpShiftId = 3;
                    }

                    //GradingCompleted                  
                    cmdGradingCompleted.Transaction = trans;
                    cmdGradingCompleted.Parameters.AddWithValue("@ProdTimeTableID", realProdTimeTableID);
                    cmdGradingCompleted.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdGradingCompleted.Parameters.AddWithValue("@RawProductID", gradingProductionDetails.RawProduct.RawProductID);
                    cmdGradingCompleted.Parameters.AddWithValue("@Qty", 1);
                    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                    {
                        cmdGradingCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                    }
                    else
                    {
                        cmdGradingCompleted.Parameters.AddWithValue("@Shift", currentShift);
                    }
                    cmdGradingCompleted.Parameters.AddWithValue("@OrderType", orderType);
                    cmdGradingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedDateTime", realDateTime);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdGradingCompleted.Parameters.AddWithValue("@Status", "Completed");
                    rows1 = cmdGradingCompleted.ExecuteNonQuery();

                    //GradingGradesCompleted     
                    foreach (var item in ggList)
                    {
                        kgTot = 0;
                        cmdGGCompletedSel.Transaction = trans;
                        cmdGGCompletedSel.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                        cmdGGCompletedSel.Parameters.AddWithValue("@GradingID", item.GradingID);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGGCompletedSel.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGGCompletedSel.Parameters.AddWithValue("@Shift", item.Shift);
                        }
                        cmdGGCompletedSel.Parameters.AddWithValue("@OrderType", orderType);
                        using (SqlDataReader dr = cmdGGCompletedSel.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        kgTot = Convert.ToDecimal(dr["kg_completed"]);
                                    }
                                }
                            }
                        }
                        cmdGGCompletedSel.Parameters.Clear();

                        cmdGGCompleted.Transaction = trans;
                        cmdGGCompleted.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                        cmdGGCompleted.Parameters.AddWithValue("@GradingID", item.GradingID);
                        cmdGGCompleted.Parameters.AddWithValue("@KgCompleted", item.KGCompleted + kgTot);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", item.Shift);
                        }
                        cmdGGCompleted.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                        cmdGGCompleted.Parameters.AddWithValue("@OrderType", orderType);
                        rows1 = cmdGGCompleted.ExecuteNonQuery();
                        cmdGGCompleted.Parameters.Clear();
                    }

                    decimal tempBlockLogs = 0;
                    cmdSelectGS2.Transaction = trans;
                    cmdSelectGS2.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                    cmdSelectGS2.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                    cmdSelectGS2.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                    cmdSelectGS2.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                    cmdSelectGS2.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                    cmdSelectGS2.Parameters.AddWithValue("@OrderType", orderType);

                    using (SqlDataReader dr = cmdSelectGS2.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    tempBlockLogs = Convert.ToDecimal(dr["blocklog_qty"]);
                                }
                            }
                        }
                    }

                    if (tempBlockLogs <= 0)
                    {

                        cmdUpdateGradingStatus.Transaction = trans;
                        cmdUpdateGradingStatus.Parameters.AddWithValue("@ProdTimeTableID", gradingProductionDetails.RawProDetailsID);
                        cmdUpdateGradingStatus.Parameters.AddWithValue("@SalesID", gradingProductionDetails.SalesOrderId);
                        cmdUpdateGradingStatus.Parameters.AddWithValue("@rawProdId", gradingProductionDetails.RawProduct.RawProductID);
                        cmdUpdateGradingStatus.Parameters.AddWithValue("@shiftParam", gradingProductionDetails.Shift);
                        cmdUpdateGradingStatus.Parameters.AddWithValue("@statusParam", orderStatus.ToString());
                        cmdUpdateGradingStatus.Parameters.AddWithValue("@OrderType", orderType);
                        cmdUpdateGradingStatus.ExecuteNonQuery();
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return rows1;
        }

        public static int UpdateGradingCounter(GradingProductionDetails gradingProductionDetails)
        {
            int res = 0;
            int pCounter = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectGS = new SqlCommand("SELECT print_counter FROM GradingScheduling WHERE id=@ID", conn);

                //Update Grading Scheduling
                SqlCommand cmdUpdateStatus = new SqlCommand("UPDATE GradingScheduling SET print_counter=@PrintCounter WHERE id=@ID", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdSelectGS.Transaction = trans;
                    cmdSelectGS.Parameters.AddWithValue("@ID", gradingProductionDetails.GradingSchedulingID);

                    using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    pCounter = Convert.ToInt16(dr["print_counter"]);
                                }
                            }
                        }
                    }

                    cmdUpdateStatus.Transaction = trans;
                    cmdUpdateStatus.Parameters.AddWithValue("@ID", gradingProductionDetails.GradingSchedulingID);
                    cmdUpdateStatus.Parameters.AddWithValue("@PrintCounter", pCounter + 1);
                    cmdUpdateStatus.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        /******************UPDATE MIXING PRODUCTION*************/

        public static decimal UpdateMixingRawProdQty(MixingProductionDetails mixingProductionDetails, string machineName, int curShift, int curtMixTimeTableId, List<GradingCompleted> ggList, Curing pendingCuring, string curDes)
        {
            int id = 0;
            decimal blockLogs = 0;
           // decimal kgTot = 0;
            int tmpShiftId = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectMixingCurrCap = new SqlCommand("SELECT id, blockLog_qty FROM MixingCurrentCapacity " +
                                                                   "WHERE mixing_time_table_id =@MixingTimeTableID AND sales_id = @salesIdParam AND raw_product_id = @rawProductIdParam AND status =@Status AND order_type=@OrderType AND rank=@Rank ", conn);

                SqlCommand cmdUpdateMixingCurrCap = new SqlCommand("UPDATE MixingCurrentCapacity " +
                                                                   "SET blockLog_qty = blockLog_qty - @blockLogQtyParam WHERE mixing_time_table_id = @MixingTimeTableID AND sales_id = @SalesIdParam AND status =@Status " +
                                                                   "AND raw_product_id = @RawProductIdParam AND order_type=@OrderType AND rank=@Rank", conn);

                SqlCommand cmdInsertMixComp = new SqlCommand("INSERT INTO MixingCompleted(mixing_time_table_id, sales_id, raw_product_id,qty,shift,order_type,completed_by,created_date,created_time,status) " +
                                                             "VALUES (@MixingTimeTableID,@SaleID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDate,@CreatedTime,@Status)", conn);

                //GradingGradesCompleted
                //SqlCommand cmdGGCompletedSel = new SqlCommand("SELECT kg_completed FROM MixingGradesCompleted " +
                //                                             "WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);


                SqlCommand cmdGGCompleted = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingGradesCompleted WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType) " +
                                                           "INSERT INTO MixingGradesCompleted VALUES(@MixingTimeTableID,@GradingID,@KgCompleted,@Shift,@CreatedDate,@OrderType) " +
                                                           "ELSE " +
                                                           "UPDATE MixingGradesCompleted SET kg_completed += @KgCompleted WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdDeleteStatus = new SqlCommand("DELETE FROM MixingCurrentCapacity WHERE id=@ID", conn);

                SqlCommand cmdUpdateBlockLogCuring = new SqlCommand("UPDATE BlockLogCuring SET blc_start_time=@StartTime, blc_end_time=@EndTime,is_enabled=@IsEnabled " +
                                                                      "WHERE id = @ID", conn);

                SqlCommand cmdSelectMixingStatus = new SqlCommand("SELECT kg_completed FROM MixingGradesCompleted " +
                                                             "WHERE mixing_time_table_id=@MixingTimeTableID AND grading_id=@GradingID AND shift=@Shift AND order_type=@OrderType", conn);


                //SqlCommand cmdUpdateMixingStatus = new SqlCommand("UPDATE MixingStatus SET pending-=@Pending, completed+=@Completed " +
                //                                                      "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID", conn);

                SqlCommand cmdInsertCuring = new SqlCommand("INSERT INTO BlockLogCuring(blc_raw_product_id,product_id,order_id, blc_blocklog_qty, blc_start_time,blc_end_time,is_cured,is_enabled) " +
                                                            "VALUES (@RawProductID,@ProductID,@OrderID,@BlockLog,@StartTime,@EndTime,@IsCured,@IsEnabled)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdUpdateMixingCurrCap.Transaction = trans;
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@blockLogQtyParam", 1);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@SalesIdParam", mixingProductionDetails.SalesOrderId);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@RawProductIdParam", mixingProductionDetails.RawProduct.RawProductID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@Status", "Mixing");
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@Rank", mixingProductionDetails.Rank);

                    int rows = cmdUpdateMixingCurrCap.ExecuteNonQuery();
                    if (rows != 0)
                    {
                        if (curDes == "Up")
                        {
                            //Update curing
                            cmdUpdateBlockLogCuring.Transaction = trans;
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@ID", pendingCuring.id);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@StartTime", pendingCuring.StartTime);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@EndTime", pendingCuring.EndTime);
                            cmdUpdateBlockLogCuring.Parameters.AddWithValue("@IsEnabled", pendingCuring.IsEnabled);
                            cmdUpdateBlockLogCuring.ExecuteNonQuery();
                        }
                        else
                        {
                            //AddToCuring(mixingProductionDetails);
                            //Insert curing
                            cmdInsertCuring.Transaction = trans;
                            cmdInsertCuring.Parameters.AddWithValue("@RawProductID", pendingCuring.Product.RawProduct.RawProductID);
                            cmdInsertCuring.Parameters.AddWithValue("@ProductID", pendingCuring.Product.ProductID);
                            cmdInsertCuring.Parameters.AddWithValue("@OrderID", pendingCuring.OrderNo);
                            cmdInsertCuring.Parameters.AddWithValue("@BlockLog", pendingCuring.Qty);
                            cmdInsertCuring.Parameters.AddWithValue("@StartTime", pendingCuring.StartTime);
                            cmdInsertCuring.Parameters.AddWithValue("@EndTime", pendingCuring.EndTime);
                            cmdInsertCuring.Parameters.AddWithValue("@IsCured", pendingCuring.IsCured);
                            cmdInsertCuring.Parameters.AddWithValue("@IsEnabled", pendingCuring.IsEnabled);
                            cmdInsertCuring.ExecuteNonQuery();
                        }
                    }

                    cmdSelectMixingCurrCap.Transaction = trans;
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@MixingTimeTableID", mixingProductionDetails.MixingTimeTableID);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@salesIdParam", mixingProductionDetails.SalesOrderId);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@rawProductIdParam", mixingProductionDetails.RawProduct.RawProductID);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@Status", "Mixing");
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                    cmdSelectMixingCurrCap.Parameters.AddWithValue("@Rank", mixingProductionDetails.Rank);

                    using (SqlDataReader dr = cmdSelectMixingCurrCap.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    id = Convert.ToInt32(dr["id"]);
                                    blockLogs = Convert.ToDecimal(dr["blockLog_qty"]);

                                }
                            }
                        }
                    }

                    //DBAccess.InsertErrorLog("After updating: sales_id: " + mixingProductionDetails.SalesOrderId.ToString() + " raw_product_id: " + mixingProductionDetails.RawProduct.RawProductID.ToString() + " blocklog_qty: " + blockLogs.ToString() + " status: " + mixingProductionDetails.MixingStatus + " order_type: " + mixingProductionDetails.OrderType);
                    if (blockLogs == 0)
                    {
                        cmdDeleteStatus.Transaction = trans;
                        cmdDeleteStatus.Parameters.AddWithValue("@ID", id);
                        cmdDeleteStatus.ExecuteNonQuery();
                    }

                    if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                    {
                        tmpShiftId = 1;
                    }
                    else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                    {
                        tmpShiftId = 2;
                    }
                    else
                    {
                        tmpShiftId = 3;
                    }

                    //Mixing Completed
                    cmdInsertMixComp.Transaction = trans;
                    cmdInsertMixComp.Parameters.AddWithValue("@MixingTimeTableID", curtMixTimeTableId);
                    cmdInsertMixComp.Parameters.AddWithValue("@SaleID", mixingProductionDetails.SalesOrderId);
                    cmdInsertMixComp.Parameters.AddWithValue("@RawProductID", mixingProductionDetails.RawProduct.RawProductID);
                    cmdInsertMixComp.Parameters.AddWithValue("@Qty", 1);
                    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                    {
                        cmdInsertMixComp.Parameters.AddWithValue("@Shift", tmpShiftId);
                    }
                    else
                    {
                        cmdInsertMixComp.Parameters.AddWithValue("@Shift", curShift);
                    }
                    cmdInsertMixComp.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                    cmdInsertMixComp.Parameters.AddWithValue("@CompletedBy", machineName);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdInsertMixComp.Parameters.AddWithValue("@Status", "Completed");
                    cmdInsertMixComp.ExecuteNonQuery();

                    //GradingCompleted     
                    foreach (var item in ggList)
                    {
                        //cmdGGCompletedSel.Transaction = trans;
                        //cmdGGCompletedSel.Parameters.AddWithValue("@MixingTimeTableID", item.ProdTimeTableID);
                        //cmdGGCompletedSel.Parameters.AddWithValue("@GradingID", item.GradingID);
                        //if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        //{
                        //    cmdGGCompletedSel.Parameters.AddWithValue("@Shift", tmpShiftId);
                        //}
                        //else
                        //{
                        //    cmdGGCompletedSel.Parameters.AddWithValue("@Shift", item.Shift);
                        //}
                        //cmdGGCompletedSel.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                        //using (SqlDataReader dr = cmdGGCompletedSel.ExecuteReader())
                        //{
                        //    if (dr != null)
                        //    {
                        //        if (dr.HasRows)
                        //        {
                        //            while (dr.Read())
                        //            {
                        //                kgTot = Convert.ToDecimal(dr["kg_completed"]);
                        //            }
                        //        }
                        //    }
                        //}
                        //cmdGGCompletedSel.Parameters.Clear();

                        cmdGGCompleted.Transaction = trans;
                        cmdGGCompleted.Parameters.AddWithValue("@MixingTimeTableID", item.ProdTimeTableID);
                        cmdGGCompleted.Parameters.AddWithValue("@GradingID", item.GradingID);
                        cmdGGCompleted.Parameters.AddWithValue("@KgCompleted", item.KGCompleted);
                        if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        }
                        else
                        {
                            cmdGGCompleted.Parameters.AddWithValue("@Shift", item.Shift);
                        }
                        cmdGGCompleted.Parameters.AddWithValue("@CreatedDate", item.CreatedDate);
                        cmdGGCompleted.Parameters.AddWithValue("@OrderType", mixingProductionDetails.OrderType);
                        cmdGGCompleted.ExecuteNonQuery();
                        cmdGGCompleted.Parameters.Clear();
                    }

                    ////Mixing Status
                    //cmdUpdateMixingStatus.Transaction = trans;
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@OrderNo", mixingProductionDetails.SalesOrderId);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@RawProductID", mixingProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@Pending", 1);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@Completed", 1);
                    //cmdUpdateMixingStatus.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                    InsertErrorLog(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss") + " Error on function UpdateMixingRawProdQty: " + e.Message);
                }
                finally
                {
                    conn.Close();
                }
            }
            return blockLogs;
        }

        public static int InsertErrorLog(string message)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("INSERT INTO ErrorLog(message) VALUES (@message)", conn))
                    {
                        cmd.Parameters.AddWithValue("@message", message);
                        result = cmd.ExecuteNonQuery();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int TickleGradingScheduling(int id, int salesID)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE GradingScheduling SET sales_id = @SalesID " +
                                                "WHERE id = @ID", conn);

                conn.Open();
                try
                {
                    cmd.Parameters.AddWithValue("@ID", id);
                    cmd.Parameters.AddWithValue("@SalesID", salesID);
                    result = cmd.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating ProductionTimeTable " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static Int32 UpdateFormulaOptions(int gradingSchedulingID, int rawProdId, List<CurrentCapacity> ccl, List<GradingCompleted> oldCcl, List<ShredStock> shredStock)
        {
            Int32 result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetGradingScheduling = new SqlCommand("SELECT COUNT(*) FROM GradingScheduling " +
                                                                    "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id =@RawProductID AND sales_id=@SalesID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateGradingScheduling = new SqlCommand("UPDATE GradingScheduling SET raw_product_id =@RawProductID " +
                                                                       "WHERE id = @GSID AND raw_product_id <> @RawProductID", conn);

                SqlCommand cmdUpdateCCSimilar = new SqlCommand("UPDATE CurrentCapacity SET capacity_kg +=@CapacityKg,blocks_logs+=@BlocksLogs " +
                                                               "WHERE prod_timetable_id = @ProdTimeTableID AND product_capacity_id=@ProductCapacityID AND sales_id=@SalesID AND raw_product_id=@RawProductID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateSSGradingScheduling = new SqlCommand("UPDATE GradingScheduling SET blocklog_qty +=@BlockLog " +
                                                                         "WHERE production_time_table_id=@ProdTimeTableID AND raw_product_id =@RawProductID AND sales_id=@SalesID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdDeleteGS = new SqlCommand("DELETE FROM GradingScheduling " +
                                                        "WHERE production_time_table_id = @ProdTimeTableID AND raw_product_id=@RawProductID AND sales_id=@SalesID AND shift=@Shift AND order_type=@OrderType", conn);


                SqlCommand cmdDeleteCC = new SqlCommand("DELETE FROM CurrentCapacity " +
                                                        "WHERE prod_timetable_id = @prodTimeTableIdParam AND product_capacity_id = @prodCap AND sales_id = @salesIdParam AND " +
                                                        "raw_product_id = @rawProductIdParam AND shift = @oldShift AND order_type = @Ordertype", conn);


                SqlCommand cmdUpdateCurrentCapacity = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity " +
                                                                     "WHERE prod_timetable_id=@prodTimeTableID AND product_capacity_id=@CapacityID AND sales_id=@SalesID AND raw_product_id=@RawProductID AND shift=@Shift AND order_type=@OrderType) " +
                                                                     "INSERT INTO CurrentCapacity(prod_timetable_id,product_capacity_id,sales_id,raw_product_id,product_id,shift,capacity_kg,blocks_logs,order_type) " +
                                                                     "VALUES (@prodTimeTableID,@CapacityID,@SalesID,@RawProductID,@ProductID,@Shift,@CapacityKG,@BlocksLogs,@OrderType) " +
                                                                     "ELSE " +
                                                                     "UPDATE CurrentCapacity SET capacity_kg = @CapacityID " +
                                                                     "WHERE prod_timetable_id=@prodTimeTableID AND product_capacity_id=@CapacityID AND sales_id=@SalesID AND raw_product_id=@RawProductID AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateShredStock = new SqlCommand("UPDATE ShredStock SET qty =@Qty " +
                                                                "WHERE shred_id = @ShredID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    int rowCount = 0;


                    foreach (var item in ccl)
                    {
                        cmdGetGradingScheduling.Transaction = trans;
                        cmdGetGradingScheduling.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@RawProductID", rawProdId);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@SalesID", item.SalesID);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdGetGradingScheduling.Parameters.AddWithValue("@OrderType", item.OrderType);
                        rowCount = (int)cmdGetGradingScheduling.ExecuteScalar();
                        cmdGetGradingScheduling.Parameters.Clear();
                    }

                    if (rowCount > 0)
                    {
                        List<int> ccRes = new List<int>();
                        List<int> ccDRes = new List<int>();
                        int pt = 0, rpid = 0, sid = 0, shift = 0, otype = 0;
                        decimal blockLogs = 0;

                        foreach (var item in ccl)
                        {
                            pt = item.ProdTimeTableID;
                            rpid = item.RawProductID;
                            sid = item.SalesID;
                            shift = item.Shift;
                            otype = item.OrderType;
                            blockLogs = item.BlocksLogs;
                            //Update CurrentCapacity
                            cmdUpdateCCSimilar.Transaction = trans;
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimeTableID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@ProductCapacityID", item.ProductCapacityID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@SalesID", item.SalesID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@Shift", item.Shift);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@OrderType", item.OrderType);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@CapacityKg", item.CapacityKG);
                            cmdUpdateCCSimilar.Parameters.AddWithValue("@BlocksLogs", item.BlocksLogs);
                            ccRes.Add(cmdUpdateCCSimilar.ExecuteNonQuery());
                            cmdUpdateCCSimilar.Parameters.Clear();
                        }

                        bool y = ccRes.Any(c => c > 0);
                        if (y)
                        {
                            cmdUpdateSSGradingScheduling.Transaction = trans;
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@ProdTimeTableID", pt);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@RawProductID", rpid);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@SalesID", sid);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@BlockLog", blockLogs);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@Shift", shift);
                            cmdUpdateSSGradingScheduling.Parameters.AddWithValue("@OrderType", otype);
                            int q = cmdUpdateSSGradingScheduling.ExecuteNonQuery();
                            if (q > 0)
                            {
                                foreach (var item in oldCcl)
                                {
                                    pt = item.ProdTimeTableID;
                                    rpid = item.RawProduct.RawProduct.RawProductID;
                                    sid = item.SalesID;
                                    shift = item.Shift;
                                    otype = item.OrderType;
                                    //Delete CurrentCapacity           
                                    cmdDeleteCC.Transaction = trans;
                                    cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                                    cmdDeleteCC.Parameters.AddWithValue("@prodCap", item.GradingID);
                                    cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                    cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", item.RawProduct.RawProduct.RawProductID);
                                    cmdDeleteCC.Parameters.AddWithValue("@oldShift", item.Shift);
                                    cmdDeleteCC.Parameters.AddWithValue("@Ordertype", item.OrderType);
                                    ccDRes.Add(cmdDeleteCC.ExecuteNonQuery());
                                    cmdDeleteCC.Parameters.Clear();
                                }
                                //Delete grading scheduling
                                bool x = ccDRes.Any(c => c > 0);
                                if (x)
                                {
                                    cmdDeleteGS.Transaction = trans;
                                    cmdDeleteGS.Parameters.AddWithValue("@ProdTimeTableID", pt);
                                    cmdDeleteGS.Parameters.AddWithValue("@RawProductID", rpid);
                                    cmdDeleteGS.Parameters.AddWithValue("@SalesID", sid);
                                    cmdDeleteGS.Parameters.AddWithValue("@Shift", shift);
                                    cmdDeleteGS.Parameters.AddWithValue("@OrderType", otype);
                                    result = cmdDeleteGS.ExecuteNonQuery();
                                }
                            }
                        }
                    }
                    else
                    {
                        cmdUpdateGradingScheduling.Transaction = trans;
                        cmdUpdateGradingScheduling.Parameters.AddWithValue("@GSID", gradingSchedulingID);
                        cmdUpdateGradingScheduling.Parameters.AddWithValue("@RawProductID", rawProdId);
                        int res = cmdUpdateGradingScheduling.ExecuteNonQuery();
                        if (res > 0)
                        {
                            List<int> res1 = new List<int>();
                            foreach (var item in ccl)
                            {
                                cmdUpdateCurrentCapacity.Transaction = trans;
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@prodTimeTableID", item.ProdTimeTableID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@CapacityID", item.ProductCapacityID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@SalesID", item.SalesID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@ProductID", 0);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@Shift", item.Shift);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@CapacityKG", item.CapacityKG);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@BlocksLogs", item.BlocksLogs);
                                cmdUpdateCurrentCapacity.Parameters.AddWithValue("@OrderType", item.OrderType);
                                res1.Add(cmdUpdateCurrentCapacity.ExecuteNonQuery());
                                cmdUpdateCurrentCapacity.Parameters.Clear();
                            }

                            bool z1 = res1.Any(x => x > 0);
                            if (z1)
                            {
                                List<int> res2 = new List<int>();
                                foreach (var item in oldCcl)
                                {
                                    //Delete Source CurrentCapacity           
                                    cmdDeleteCC.Transaction = trans;
                                    cmdDeleteCC.Parameters.AddWithValue("@prodTimeTableIdParam", item.ProdTimeTableID);
                                    cmdDeleteCC.Parameters.AddWithValue("@prodCap", item.GradingID);
                                    cmdDeleteCC.Parameters.AddWithValue("@salesIdParam", item.SalesID);
                                    cmdDeleteCC.Parameters.AddWithValue("@rawProductIdParam", item.RawProduct.RawProduct.RawProductID);
                                    cmdDeleteCC.Parameters.AddWithValue("@oldShift", item.Shift);
                                    cmdDeleteCC.Parameters.AddWithValue("@Ordertype", item.OrderType);
                                    res2.Add(cmdDeleteCC.ExecuteNonQuery());
                                    cmdDeleteCC.Parameters.Clear();
                                }

                                bool z2 = res2.Any(x => x > 0);
                                if (z2)
                                {
                                    result = 1;
                                }
                            }
                        }
                    }

                    foreach (var item in shredStock)
                    {
                        cmdUpdateShredStock.Transaction = trans;
                        cmdUpdateShredStock.Parameters.AddWithValue("@ShredID", item.Shred.ID);
                        cmdUpdateShredStock.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdUpdateShredStock.ExecuteNonQuery();
                        cmdUpdateShredStock.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static void ReturnBin(MixingProductionDetails rawProductionDetails)
        {
            decimal blockLog = 0;
            //int prodTimeTableId = 0;
            int shiftID = 0;
            DateTime prodDate = Convert.ToDateTime(rawProductionDetails.ProductionDate);
            string nDate = prodDate.ToString("yyyy-MM-dd");
            string pcName = string.Empty;
            //decimal kgTot = 0;

            pcName = System.Environment.MachineName;
            if (string.IsNullOrEmpty(pcName))
            {
                pcName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //SqlCommand cmdSelectMixingCurrCap = new SqlCommand("SELECT * FROM MixingCurrentCapacity WHERE id =@MixingCurrentCapacityID", conn);

                SqlCommand cmdInsertGradingScheduling = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                                       "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                                       "INSERT INTO GradingScheduling VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@Status,@OrderType,@Active,@PrintCounter) " +
                                                                       "ELSE " +
                                                                       "UPDATE GradingScheduling SET blocklog_qty=blocklog_qty+@BlockSLogs, status=@StatusParam WHERE " +
                                                                       "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND sales_id = @SalesId AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdInsertCurrentCapacity = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
                                                                     "prod_timetable_id=@ProdTimeTableId AND raw_product_id=@RawProductId AND shift=@Shift AND sales_id=@SalesId AND product_capacity_id=@ProdCapacityId AND order_type=@OrderType) " +
                                                                     "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                                     "ELSE " +
                                                                     "UPDATE CurrentCapacity SET blocks_logs=blocks_logs+@BlocksLogs, capacity_kg=capacity_kg+@CapacityKgParam WHERE prod_timetable_id=@ProdTimeTableId AND raw_product_id=@RawProductId AND shift=@Shift AND sales_id=@SalesId AND product_capacity_id=@ProdCapacityId AND order_type=@OrderType", conn);

                SqlCommand cmdUpdateMixingCurrCap = new SqlCommand("UPDATE MixingCurrentCapacity SET blockLog_qty = @blockLogQtyParam, active_order=@Active WHERE id = @MixingCurrentCapacityID", conn);

                SqlCommand cmdDeleteMixingCurrCap = new SqlCommand("DELETE FROM MixingCurrentCapacity WHERE id = @MixingCurrentCapacityID", conn);

                SqlCommand cmdGradingCompleted = new SqlCommand("INSERT INTO GradingCompleted VALUES(@ProdTimeTableID,@SalesID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDateTime,@CreatedTime,@Status)", conn);

                SqlCommand cmdInsertMixComp = new SqlCommand("INSERT INTO MixingCompleted(mixing_time_table_id, sales_id, raw_product_id,qty,shift,order_type,completed_by,created_date,created_time,status) " +
                                                             "VALUES (@MixingTimeTableID,@SaleID,@RawProductID,@Qty,@Shift,@OrderType,@CompletedBy,@CreatedDate,@CreatedTime,@Status)", conn);
                //Update MixingStatus
                //SqlCommand cmdUpdateMixingStatus = new SqlCommand("UPDATE MixingStatus SET pending -= 1 WHERE order_no = @OrderNo AND raw_product_id=@RawProductID", conn);

                //Update GradingStatus
                //SqlCommand cmdUpdateGradingStatus = new SqlCommand("UPDATE GradingStatus SET pending += 1,completed -= 1 WHERE order_no = @OrderNo AND raw_product_id=@RawProductID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {



                    //cmdSelectMixingCurrCap.Transaction = trans;
                    //cmdSelectMixingCurrCap.Parameters.AddWithValue("@MixingCurrentCapacityID", rawProductionDetails.MixingCurrentCapacityID);

                    //using (SqlDataReader dr = cmdSelectMixingCurrCap.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        if (dr.HasRows)
                    //        {
                    //            while (dr.Read())
                    //            {
                    //                prodTimeTableId = Convert.ToInt32(dr["prod_time_table_id"]);
                    //                blockLog = Convert.ToDecimal(dr["blockLog_qty"]);
                    //                break;
                    //            } 
                    //        }
                    //    }
                    //}                   
                    List<Shift> ShiftTimes = GetAllShifts();

                    foreach (var item in ShiftTimes)
                    {
                        bool isShift = TimeBetween(DateTime.Now, item.StartTime, item.EndTime);

                        if (isShift == true)
                        {
                            shiftID = item.ShiftID;
                        }
                    }
                    //if (ShiftTimes.Count > 0)
                    //{
                    //    foreach (var item in ShiftTimes)
                    //    {

                    //        if (DateTime.Now.TimeOfDay >= DateTime.Today.Add(item.StartTime).TimeOfDay && DateTime.Now.TimeOfDay <= DateTime.Today.Add(item.EndTime).TimeOfDay)
                    //        {
                    //            shiftID = item.ShiftID;
                    //            break;
                    //        }
                    //    }
                    //}
                    int gOrderType = 0;
                    if (rawProductionDetails.OrderType == 1 || rawProductionDetails.OrderType == 2 || rawProductionDetails.Rank == 1)
                    {
                        gOrderType = 1;
                    }
                    else if (rawProductionDetails.OrderType == 3 || rawProductionDetails.Rank == 2 || rawProductionDetails.Rank == 3 || rawProductionDetails.Rank == 4)
                    {
                        gOrderType = 3;
                    }

                    cmdInsertGradingScheduling.Transaction = trans;
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@ProdTimeTableId", rawProductionDetails.ProdTimeTableID);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@RawproductId", rawProductionDetails.RawProduct.RawProductID);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@SalesId", rawProductionDetails.SalesOrderId);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@Shift", shiftID);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@BlockSLogs", 1);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@Status", "Grading");
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@StatusParam", "Grading");
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@OrderType", gOrderType);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@Active", false);
                    cmdInsertGradingScheduling.Parameters.AddWithValue("@PrintCounter", rawProductionDetails.PrintCounter);
                    cmdInsertGradingScheduling.ExecuteNonQuery();

                    List<Formula> fList = GetFormulaDetailsByRawProdID(rawProductionDetails.RawProduct.RawProductID);
                    if (fList.Count > 0)
                    {
                        if (fList[0].ProductCapacity1 > 0)
                        {
                            cmdInsertCurrentCapacity.Transaction = trans;
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdTimeTableId", rawProductionDetails.ProdTimeTableID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@SalesId", rawProductionDetails.SalesOrderId);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@RawproductId", rawProductionDetails.RawProduct.RawProductID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@productId", 0);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@Shift", shiftID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@BlockSLogs", 1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@OrderType", gOrderType);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKgParam", fList[0].GradingWeight1);
                            cmdInsertCurrentCapacity.ExecuteNonQuery();
                        }

                        if (fList[0].ProductCapacity2 > 0)
                        {
                            cmdInsertCurrentCapacity.Parameters.Clear();

                            cmdInsertCurrentCapacity.Transaction = trans;
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdTimeTableId", rawProductionDetails.ProdTimeTableID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@ProdCapacityId", fList[0].ProductCapacity2);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@SalesId", rawProductionDetails.SalesOrderId);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@RawproductId", rawProductionDetails.RawProduct.RawProductID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@productId", 0);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@Shift", shiftID);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKg", fList[0].GradingWeight2);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@BlockSLogs", 1);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@OrderType", rawProductionDetails.OrderType);
                            cmdInsertCurrentCapacity.Parameters.AddWithValue("@CapacityKgParam", fList[0].GradingWeight2);
                            cmdInsertCurrentCapacity.ExecuteNonQuery();
                            //kgTot = 0;                         
                        }
                    }

                    blockLog = rawProductionDetails.BlockLogQty - 1;
                    if (blockLog < 0)
                    {
                        blockLog = 0;
                    }

                    cmdUpdateMixingCurrCap.Transaction = trans;
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@MixingCurrentCapacityID", rawProductionDetails.MixingCurrentCapacityID);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@blockLogQtyParam", blockLog);
                    cmdUpdateMixingCurrCap.Parameters.AddWithValue("@Active", false);
                    cmdUpdateMixingCurrCap.ExecuteNonQuery();

                    if (blockLog == 0)
                    {
                        cmdDeleteMixingCurrCap.Transaction = trans;
                        cmdDeleteMixingCurrCap.Parameters.AddWithValue("@MixingCurrentCapacityID", rawProductionDetails.MixingCurrentCapacityID);
                        cmdDeleteMixingCurrCap.ExecuteNonQuery();
                    }

                    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
                    {
                        if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                        {
                            shiftID = 1;
                        }
                        else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                        {
                            shiftID = 2;
                        }
                        else
                        {
                            shiftID = 3;
                        }
                    }

                    //GradingCompleted     
                    cmdGradingCompleted.Transaction = trans;
                    cmdGradingCompleted.Parameters.AddWithValue("@ProdTimeTableID", rawProductionDetails.ProdTimeTableID);
                    cmdGradingCompleted.Parameters.AddWithValue("@SalesID", rawProductionDetails.SalesOrderId);
                    cmdGradingCompleted.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    cmdGradingCompleted.Parameters.AddWithValue("@Qty", 1);
                    cmdGradingCompleted.Parameters.AddWithValue("@Shift", shiftID);
                    cmdGradingCompleted.Parameters.AddWithValue("@OrderType", rawProductionDetails.OrderType);
                    cmdGradingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedDateTime", DateTime.Now);
                    cmdGradingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdGradingCompleted.Parameters.AddWithValue("@Status", "Returned");
                    cmdGradingCompleted.ExecuteNonQuery();

                    //Mixing Completed
                    cmdInsertMixComp.Transaction = trans;
                    cmdInsertMixComp.Parameters.AddWithValue("@MixingTimeTableID", rawProductionDetails.MixingTimeTableID);
                    cmdInsertMixComp.Parameters.AddWithValue("@SaleID", rawProductionDetails.SalesOrderId);
                    cmdInsertMixComp.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    cmdInsertMixComp.Parameters.AddWithValue("@Qty", 1);
                    cmdInsertMixComp.Parameters.AddWithValue("@Shift", shiftID);
                    cmdInsertMixComp.Parameters.AddWithValue("@OrderType", rawProductionDetails.OrderType);
                    cmdInsertMixComp.Parameters.AddWithValue("@CompletedBy", pcName);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdInsertMixComp.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                    cmdInsertMixComp.Parameters.AddWithValue("@Status", "Returned");
                    cmdInsertMixComp.ExecuteNonQuery();

                    //cmdUpdateMixingStatus.Transaction = trans;
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@OrderNo", rawProductionDetails.SalesOrderId);
                    //cmdUpdateMixingStatus.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateMixingStatus.ExecuteNonQuery();

                    //cmdUpdateGradingStatus.Transaction = trans;
                    //cmdUpdateGradingStatus.Parameters.AddWithValue("@OrderNo", rawProductionDetails.SalesOrderId);
                    //cmdUpdateGradingStatus.Parameters.AddWithValue("@RawProductID", rawProductionDetails.RawProduct.RawProductID);
                    //cmdUpdateGradingStatus.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error on ReturnBin function: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

        }

        public static int CheckDateAvailable(DateTime date)
        {
            int result = 0;
            string newDate = date.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM ProductionTimeTable WHERE date=@newDate", conn))
                    {
                        conn.Open();

                        cmd.Parameters.AddWithValue("@newDate", newDate);
                        result = (int)cmd.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Checking production date existance ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int InsertNewPrdDates(List<CapacityInfo> capacityInfo, List<Machine> machinesList)
        {
            Int32 id = 0;
            Int32 prodTimeTableId = 0;
            Int32 mixProdTimeTableId = 0;
            //CurrentCapacityList ccl = new CurrentCapacityList();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdNewDates = new SqlCommand("INSERT INTO ProductionTimeTable(machine_id, date, machine_active, day_shift, evening_shift,night_shift) " +
                                                        "VALUES (@MachineId,@Date,@MachineActive,@DayShift,@EveningShift,@NightShift) Select Scope_Identity()", conn);

                //SqlCommand cmdGetData = new SqlCommand("SELECT MAX(id) FROM ProductionTimeTable", conn);

                SqlCommand cmdNewCapacities = new SqlCommand("INSERT INTO ProductCapacity(production_time_table_id, rubber_grading_id, shift, capacity_kg, graded_kg) " +
                                                             "VALUES (@ProdTimeTableId,@RubberGradingId,@Shift,@CapacityKg,@GradedKg)", conn);

                SqlCommand cmdNewMixingCapacity = new SqlCommand("INSERT INTO MixingCapacity(production_time_table_id, mixing_time_table_id, max_mixes) " +
                                                                 "VALUES (@ProdTimeTableId,@MixingTableId,@MaxMixes)", conn);

                SqlCommand cmdNewSlittingCapacity = new SqlCommand("INSERT INTO SlittingCapacity(prod_timetable_id, machine_id, dollar_value,shift) " +
                                                                   "VALUES (@ProdTimeTableId,@MachineID,@DollarValue,@Shift)", conn);

                SqlCommand cmdNewPeelingCapacity = new SqlCommand("INSERT INTO PeelingCapacity(prod_timetable_id, machine_id, dollar_value,shift) " +
                                                                  "VALUES (@ProdTimeTableId,@MachineID,@DollarValue,@Shift)", conn);

                SqlCommand cmdNewReRollingCapacity = new SqlCommand("INSERT INTO ReRollingCapacity(prod_timetable_id, machine_id, dollar_value,shift) " +
                                                                    "VALUES (@ProdTimeTableId,@MachineID,@DollarValue,@Shift)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capacityInfo)
                    {
                        cmdNewDates.Transaction = trans;
                        cmdNewDates.Parameters.AddWithValue("@MachineId", item.ProductionTimeTable.MachineID);
                        cmdNewDates.Parameters.AddWithValue("@Date", item.ProductionTimeTable.ProductionDate);
                        cmdNewDates.Parameters.AddWithValue("@MachineActive", item.ProductionTimeTable.IsMachineActive);
                        cmdNewDates.Parameters.AddWithValue("@DayShift", item.ProductionTimeTable.IsDayShiftActive);
                        cmdNewDates.Parameters.AddWithValue("@EveningShift", item.ProductionTimeTable.IsEveningShiftActive);
                        cmdNewDates.Parameters.AddWithValue("@NightShift", item.ProductionTimeTable.IsNightShiftActive);
                        //cmdNewDates.ExecuteScalar();
                        id = Convert.ToInt32(cmdNewDates.ExecuteScalar());
                        cmdNewDates.Parameters.Clear();


                        //cmdGetData.Transaction = trans;
                        //id = Convert.ToInt32(cmdGetData.ExecuteScalar());

                        if (item.ProductionTimeTable.MachineID == 1 || item.ProductionTimeTable.MachineID == 7)
                        {
                            prodTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 2 || item.ProductionTimeTable.MachineID == 3)
                        {
                            mixProdTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 4 || item.ProductionTimeTable.MachineID == 8)
                        {
                            prodTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 5)
                        {
                            prodTimeTableId = id;
                        }
                        if (item.ProductionTimeTable.MachineID == 6)
                        {
                            prodTimeTableId = id;
                        }

                        if (item.GradingCapacityList != null && item.ProductionTimeTable.MachineID == 1 || item.ProductionTimeTable.MachineID == 7)
                        {

                            foreach (var itemsGCL in item.GradingCapacityList)
                            {
                                if (itemsGCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {

                                    cmdNewCapacities.Transaction = trans;
                                    cmdNewCapacities.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewCapacities.Parameters.AddWithValue("@RubberGradingId", itemsGCL.RubberGrade.GradeID);
                                    cmdNewCapacities.Parameters.AddWithValue("@Shift", itemsGCL.Shift);
                                    cmdNewCapacities.Parameters.AddWithValue("@CapacityKg", itemsGCL.Capacity);
                                    cmdNewCapacities.Parameters.AddWithValue("@GradedKg", 0);
                                    cmdNewCapacities.ExecuteScalar();
                                    cmdNewCapacities.Parameters.Clear();
                                }

                            }
                        }
                        if (item.MixingCapacityList != null && item.ProductionTimeTable.MachineID == 2 || item.ProductionTimeTable.MachineID == 3)
                        {

                            foreach (var itemsMCL in item.MixingCapacityList)
                            {
                                if (itemsMCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewMixingCapacity.Transaction = trans;
                                    cmdNewMixingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewMixingCapacity.Parameters.AddWithValue("@MixingTableId", mixProdTimeTableId);
                                    cmdNewMixingCapacity.Parameters.AddWithValue("@MaxMixes", itemsMCL.MaxMixes);
                                    cmdNewMixingCapacity.ExecuteScalar();
                                    cmdNewMixingCapacity.Parameters.Clear();
                                }
                            }
                        }
                        if (item.SlittingCapacityList != null && item.ProductionTimeTable.MachineID == 4 || item.ProductionTimeTable.MachineID == 8)
                        {

                            foreach (var itemsSCL in item.SlittingCapacityList)
                            {
                                if (itemsSCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewSlittingCapacity.Transaction = trans;
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@MachineID", itemsSCL.Machine.MachineID);
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@DollarValue", itemsSCL.DollarValue);
                                    cmdNewSlittingCapacity.Parameters.AddWithValue("@Shift", itemsSCL.Shift);
                                    cmdNewSlittingCapacity.ExecuteScalar();
                                    cmdNewSlittingCapacity.Parameters.Clear();
                                }
                            }
                        }

                        if (item.PeelingCapacityList != null && item.ProductionTimeTable.MachineID == 5)
                        {

                            foreach (var itemsPCL in item.PeelingCapacityList)
                            {
                                if (itemsPCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewPeelingCapacity.Transaction = trans;
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@MachineID", itemsPCL.Machine.MachineID);
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@DollarValue", itemsPCL.DollarValue);
                                    cmdNewPeelingCapacity.Parameters.AddWithValue("@Shift", itemsPCL.Shift);
                                    cmdNewPeelingCapacity.ExecuteScalar();
                                    cmdNewPeelingCapacity.Parameters.Clear();
                                }
                            }
                        }

                        if (item.ReRollingCapacityList != null && item.ProductionTimeTable.MachineID == 6)
                        {

                            foreach (var itemsRRCL in item.ReRollingCapacityList)
                            {
                                if (itemsRRCL.Machine.MachineID == item.ProductionTimeTable.MachineID)
                                {
                                    cmdNewReRollingCapacity.Transaction = trans;
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@ProdTimeTableId", prodTimeTableId);
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@MachineID", itemsRRCL.Machine.MachineID);
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@DollarValue", itemsRRCL.DollarValue);
                                    cmdNewReRollingCapacity.Parameters.AddWithValue("@Shift", itemsRRCL.Shift);
                                    cmdNewReRollingCapacity.ExecuteScalar();
                                    cmdNewReRollingCapacity.Parameters.Clear();
                                }
                            }
                        }
                    }
                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return prodTimeTableId;
        }
        public static int UpdatePeeling(PeelingConfirmationViewModel pcvm, PeelingOrder po)
        {
            int result = 0;
            int tmpShiftId = 0;
            string pcName = string.Empty;
            pcName = System.Environment.MachineName;
            if (string.IsNullOrEmpty(pcName))
            {
                pcName = "Unknown";
            }

            //Check if it is friday
            if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
            {
                if ((DateTime.Now.TimeOfDay >= new TimeSpan(5, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(11, 29, 58)))
                {
                    tmpShiftId = 1;
                }
                else if ((DateTime.Now.TimeOfDay >= new TimeSpan(11, 30, 0)) && (DateTime.Now.TimeOfDay <= new TimeSpan(17, 14, 58)))
                {
                    tmpShiftId = 2;
                }
                else
                {
                    tmpShiftId = 3;
                }
            }
            else
            {
                tmpShiftId = pcvm.currentShift;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdatePeelingOrders = new SqlCommand("UPDATE PeelingOrders SET qty=@Qty,logs= @Logs, dollar_value = @DollarValue WHERE id = @PeelingID", conn);

                SqlCommand cmdPeelingCompleted = new SqlCommand("INSERT INTO PeelingCompleted(peeling_timetable_id,order_no,product_id,raw_product_id,no_of_logs,tot_yield_cut,order_type,shift,completed_by,created_date,created_time) " +
                                                                "VALUES (@PeelingTimeTableID,@OrderNo,@ProductID,@RawProductID,@NoOfLogs,@TotYieldCut,@OrderType,@Shift,@CompletedBy,@CreatedDate,@CreatedTime)", conn);
                /**Update RowStockReserve**/
                SqlCommand cmdUpdateRowStockReserve = new SqlCommand("UPDATE RawStockReserve SET blocks_logs -= @BlocksLogs WHERE sales_id=@SalesNo AND raw_product_id = @RawProductID AND product_id=@ProductID", conn);
                SqlCommand cmdDeleteStockReserve = new SqlCommand("DELETE RawStockReserve WHERE blocks_logs <= 0", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    //Update existing slitting details with new details
                    cmdUpdatePeelingOrders.Transaction = trans;
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@PeelingID", po.ID);
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@Logs", po.Logs);
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@Qty", po.Qty);
                    cmdUpdatePeelingOrders.Parameters.AddWithValue("@DollarValue", po.DollarValue);
                    int peelingRes = cmdUpdatePeelingOrders.ExecuteNonQuery();

                    /**Peeling Completed**/
                    if (peelingRes > 0)
                    {
                        cmdPeelingCompleted.Transaction = trans;
                        cmdPeelingCompleted.Parameters.AddWithValue("@PeelingTimeTableID", pcvm.peelingProductionDetails.ProdTimetableID);
                        cmdPeelingCompleted.Parameters.AddWithValue("@OrderNo", pcvm.peelingProductionDetails.Order.OrderNo);
                        cmdPeelingCompleted.Parameters.AddWithValue("@ProductID", pcvm.peelingProductionDetails.Product.ProductID);
                        cmdPeelingCompleted.Parameters.AddWithValue("@RawProductID", pcvm.peelingProductionDetails.Product.RawProduct.RawProductID);
                        cmdPeelingCompleted.Parameters.AddWithValue("@NoOfLogs", 1);
                        cmdPeelingCompleted.Parameters.AddWithValue("@TotYieldCut", pcvm.TotalYieldCut);
                        cmdPeelingCompleted.Parameters.AddWithValue("@OrderType", pcvm.peelingProductionDetails.Order.OrderType);
                        cmdPeelingCompleted.Parameters.AddWithValue("@Shift", tmpShiftId);
                        cmdPeelingCompleted.Parameters.AddWithValue("@CompletedBy", pcName);
                        cmdPeelingCompleted.Parameters.AddWithValue("@CreatedDate", DateTime.Now.Date);
                        cmdPeelingCompleted.Parameters.AddWithValue("@CreatedTime", DateTime.Now.TimeOfDay);
                        result = cmdPeelingCompleted.ExecuteNonQuery();
                    }

                    cmdUpdateRowStockReserve.Transaction = trans;
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@SalesNo", pcvm.peelingProductionDetails.Order.OrderNo);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@RawProductID", pcvm.peelingProductionDetails.Product.RawProduct.RawProductID);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@ProductID", pcvm.peelingProductionDetails.Product.ProductID);
                    cmdUpdateRowStockReserve.Parameters.AddWithValue("@BlocksLogs", 1);
                    cmdUpdateRowStockReserve.ExecuteNonQuery();

                    //Delete records which has zeros
                    cmdDeleteStockReserve.Transaction = trans;
                    cmdDeleteStockReserve.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static int UpdatePendingSlitPeel(PendingSlitPeel ps, decimal totYieldCut)
        {
            int res = 0;

            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            if (String.IsNullOrEmpty(userName))
            {
                userName = "Unknown";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                conn.Open();

                try
                {
                    SqlCommand cmdInsertUpPendingSlitPeel = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PendingSlitPeel " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID) " +
                                                                        "INSERT INTO PendingSlitPeel VALUES(@OrderID,@RawProductID,@ProductID,@BlocksLogs,@Qty,@Active) " +
                                                                        "ELSE " +
                                                                        "UPDATE PendingSlitPeel SET qty=@Qty,blocks_logs=@BlocksLogs " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID", conn);
                    //Update WarehouseIncoming
                    SqlCommand cmdWarehouseIncoming = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM WarehouseIncoming " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID) " +
                                                                        "INSERT INTO WarehouseIncoming VALUES(@OrderID,@ProductID,@Qty,@DateTime) " +
                                                                        "ELSE " +
                                                                        "UPDATE WarehouseIncoming SET qty+=@Qty, incoming_datetime=@DateTime " +
                                                                        "WHERE order_no = @OrderID AND product_id=@ProductID", conn);

                    //Update ProductStock
                    //SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available+=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy " +
                    //                                                  "WHERE stock_location_id = @StockLocationID AND product_id = @ProductID", conn);


                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@OrderID", ps.Order.OrderNo);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@BlocksLogs", ps.BlockLogQty);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@Qty", ps.Qty);
                    cmdInsertUpPendingSlitPeel.Parameters.AddWithValue("@Active", true);
                    cmdInsertUpPendingSlitPeel.ExecuteNonQuery();

                    cmdWarehouseIncoming.Parameters.AddWithValue("@OrderID", ps.Order.OrderNo);
                    cmdWarehouseIncoming.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    cmdWarehouseIncoming.Parameters.AddWithValue("@Qty", totYieldCut);
                    cmdWarehouseIncoming.Parameters.AddWithValue("@DateTime", DateTime.Now);
                    res = cmdWarehouseIncoming.ExecuteNonQuery();

                    //cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", 1);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@Qty", totYieldCut);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@UpdatedBy", userName);
                    //res = cmdUpdateProductStock.ExecuteNonQuery();

                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return res;
        }

        public static decimal GetTotalpeelingCompleted(Int32 orderNo, Product product)
        {
            decimal qty = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT tot_yield_cut FROM PeelingCompleted " +
                                                              "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID AND tot_yield_cut >= @MaxYield", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", product.RawProduct.RawProductID);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", product.ProductID);
                    cmdSelectSlitting.Parameters.AddWithValue("@MaxYield", product.Tile.MaxYield);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    qty += Math.Floor(Convert.ToDecimal(dr["tot_yield_cut"]) / product.Tile.MaxYield);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return qty;
        }

        public static PendingOrder GetPendingOrder(Int32 orderNo, int rawProductId, int productId)
        {
            PendingOrder po = new PendingOrder();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelectSlitting = new SqlCommand("SELECT * FROM PendingOrder WHERE order_id = @OrderNo AND product_id=@ProductID", conn);

                conn.Open();
                try
                {
                    //Read existing slitting details
                    cmdSelectSlitting.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdSelectSlitting.Parameters.AddWithValue("@RawProductID", rawProductId);
                    cmdSelectSlitting.Parameters.AddWithValue("@ProductID", productId);
                    using (SqlDataReader dr = cmdSelectSlitting.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    po.Qty = Convert.ToDecimal(dr["qty"]);
                                    po.BlockLogQty = Convert.ToDecimal(dr["blocks_logs"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error Updating Slitting Information: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return po;
        }

        public static List<PeelingOrder> GetAllPeelingOrderByID(Int32 orderNo, int productId, int rawProductId)
        {
            List<PeelingOrder> peelingOrderList = new List<PeelingOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PeelingOrders WHERE order_no = @OrderNo AND product_id=@ProductID AND raw_product_id=@RawProductID", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@OrderNo", orderNo);
                    cmdGetData.Parameters.AddWithValue("@ProductID", productId);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", rawProductId);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    PeelingOrder po = new PeelingOrder();
                                    po.ID = Convert.ToInt32(dr["id"]);
                                    po.ProdTimetableID = Convert.ToInt32(dr["prod_timetable_id"]);
                                    po.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]), OrderType = Convert.ToInt16(dr["order_type"]) };
                                    po.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                    po.Shift = new Shift() { ShiftID = Convert.ToInt16(dr["product_id"]) };
                                    po.Qty = Convert.ToDecimal(dr["qty"]);
                                    po.Logs = Convert.ToDecimal(dr["logs"]);
                                    po.DollarValue = Convert.ToDecimal(dr["dollar_value"]);
                                    po.IsReRollingReq = Convert.ToBoolean(dr["is_re_rolling_req"]);
                                    peelingOrderList.Add(po);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return peelingOrderList;
        }

        public static List<PendingSlitPeel> GetPendingSlitPeelByID(PendingSlitPeel ps)
        {
            List<PendingSlitPeel> pendingSlitPeelList = new List<PendingSlitPeel>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                try
                {
                    SqlCommand cmdGetData = new SqlCommand("SELECT * FROM PendingSlitPeel " +
                                                           "WHERE order_no = @OrderNo AND raw_product_id=@RawProductID AND product_id=@ProductID", conn);

                    cmdGetData.Parameters.AddWithValue("@OrderNo", ps.Order.OrderNo);
                    cmdGetData.Parameters.AddWithValue("@RawProductID", ps.Product.RawProduct.RawProductID);
                    cmdGetData.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                PendingSlitPeel psp = new PendingSlitPeel();
                                psp.Order = new Order() { OrderNo = Convert.ToInt32(dr["order_no"]) };
                                psp.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) } };
                                psp.BlockLogQty = Convert.ToDecimal(dr["blocks_logs"]);
                                psp.Qty = Convert.ToDecimal(dr["qty"]);
                                pendingSlitPeelList.Add(psp);
                            }
                        }
                    }
                }
                catch (Exception e)
                {

                    Debug.WriteLine("Error reading System Parameter: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return pendingSlitPeelList;
        }

        public static decimal GetPeelingMaxCapacity(int prodTimeTableId, int shift, int machineId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM PeelingCapacity WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        price = (decimal)cmdGetData.ExecuteScalar();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

        public static int AddToPeeling(List<PeelingOrder> peelingList)
        {
            int rowCount = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsUpRSR = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM RawStockReserve WHERE " +
                                                         "sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId) " +
                                                         "INSERT INTO RawStockReserve VALUES(@SalesId,@RawproductId,@ProductId,@BlockSLogs,@Qty) " +
                                                         "ELSE " +
                                                         "UPDATE RawStockReserve SET blocks_logs+=@BlockSLogs,qty=@Qty WHERE sales_id =@SalesId AND raw_product_id =@RawproductId AND product_id = @ProductId", conn);


                SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PeelingOrders " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType AND is_re_rolling_req=@ReRolling) " +
                                                     "INSERT INTO PeelingOrders VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Logs,@DollarValue,@OrderType,@Status,@ReRolling) " +
                                                     "ELSE " +
                                                     "UPDATE PeelingOrders SET qty+=@Qty,logs+=@Logs,dollar_value+=@DollarValue " +
                                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType AND is_re_rolling_req=@ReRolling", conn);

                SqlCommand cmdUpdatePeelingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PeelingStatus " +
                                                       "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId) " +
                                                       "INSERT INTO PeelingStatus VALUES(@OrderNo,@RawProdId,@ProductID,@LogsPending,@LogsCompleted,@BulkRollsCompleted) " +
                                                       "ELSE " +
                                                       "UPDATE PeelingStatus SET logs_pending+=@LogsPending " +
                                                       "WHERE order_no =@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in peelingList)
                    {
                        cmdInsUpRSR.Transaction = trans;
                        cmdInsUpRSR.Parameters.AddWithValue("@SalesId", item.Order.OrderNo);
                        cmdInsUpRSR.Parameters.AddWithValue("@RawproductId", item.Product.RawProduct.RawProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@ProductId", item.Product.ProductID);
                        cmdInsUpRSR.Parameters.AddWithValue("@BlockSLogs", item.Logs);
                        cmdInsUpRSR.Parameters.AddWithValue("@Qty", 0);
                        cmdInsUpRSR.ExecuteNonQuery();
                        cmdInsUpRSR.Parameters.Clear();

                        cmdInsUp.Transaction = trans;
                        cmdInsUp.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsUp.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsUp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsUp.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsUp.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsUp.Parameters.AddWithValue("@Qty", item.Qty);
                        cmdInsUp.Parameters.AddWithValue("@Logs", item.Logs);
                        cmdInsUp.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsUp.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdInsUp.Parameters.AddWithValue("@Status", "Peeling");
                        cmdInsUp.Parameters.AddWithValue("@ReRolling", item.IsReRollingReq);
                        rowCount = cmdInsUp.ExecuteNonQuery();
                        cmdInsUp.Parameters.Clear();

                        //Peeling Status
                        cmdUpdatePeelingStatus.Transaction = trans;
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@LogsPending", item.Logs);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@LogsCompleted", 0);
                        cmdUpdatePeelingStatus.Parameters.AddWithValue("@BulkRollsCompleted", 0);
                        rowCount = cmdUpdatePeelingStatus.ExecuteNonQuery();
                        cmdUpdatePeelingStatus.Parameters.Clear();
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to Peeling table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }


        public static int AddToMixing(List<MixingCapacity> mixingList)
        {
            int result = 0;
            //decimal mixBlockTot = 0;
            decimal mixCCBlockTot = 0;

            List<MixingOnly> mixingOnlyList = GetMixingOnly();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //Check if MixingCurrentCapacity exists
                SqlCommand cmdSelectMCC = new SqlCommand("SELECT blockLog_qty FROM MixingCurrentCapacity " +
                                                         "WHERE raw_product_id = @RawProdId AND sales_id=@SalesId AND prod_time_table_id=@ProdTimeTableId AND mixing_time_table_id=@MixingTimeTableId AND order_type=@Ordertype AND rank=@Rank", conn);

                SqlCommand cmdInsertMCC = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingCurrentCapacity WHERE raw_product_id = @RawProdId AND sales_id=@SalesId AND prod_time_table_id=@ProdTimeTableId AND mixing_time_table_id=@MixingTimeTableId  AND order_type=@Ordertype AND rank=@Rank) " +
                                                         "INSERT INTO MixingCurrentCapacity VALUES(@ProdTimeTableId,@MixingTimeTableId,@SalesId,@RawProdId,@BlockLogsQty,@Status,@OrderType,@Rank,@Active) " +
                                                         "ELSE " +
                                                         "UPDATE MixingCurrentCapacity SET blockLog_qty=@BlockLogsQty WHERE " +
                                                         "raw_product_id = @RawProdId AND sales_id=@SalesId AND prod_time_table_id=@ProdTimeTableId AND mixing_time_table_id=@MixingTimeTableId  AND order_type=@Ordertype AND rank=@Rank", conn);

                //SqlCommand cmdUpdateMixingStatus = new SqlCommand("UPDATE MixingStatus SET pending=@Pending WHERE " +
                //                                                  "order_no=@OrderNo AND raw_product_id = @RawProductID", conn);



                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in mixingList)
                    {
                        int ot = item.OrderType;
                        if (item.OrderType == 2)
                        {
                            ot = 1;
                        }
                        else if (item.OrderType == 4)
                        {
                            ot = 3;
                        }

                        //Mixing Current Capacity
                        cmdSelectMCC.Transaction = trans;
                        cmdSelectMCC.Parameters.AddWithValue("@RawProdId", item.RawProductID);
                        cmdSelectMCC.Parameters.AddWithValue("@SalesId", item.SalesId);
                        cmdSelectMCC.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelectMCC.Parameters.AddWithValue("@MixingTimeTableId", item.MixingTimeTableID);
                        cmdSelectMCC.Parameters.AddWithValue("@OrderType", ot);
                        cmdSelectMCC.Parameters.AddWithValue("@Rank", 4);

                        using (SqlDataReader dr = cmdSelectMCC.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        mixCCBlockTot += Convert.ToDecimal(dr["blockLog_qty"]);
                                    }
                                    mixCCBlockTot += item.BlockLogQty;
                                }
                                else
                                {
                                    mixCCBlockTot = item.BlockLogQty;
                                }
                            }
                        }

                        cmdSelectMCC.Parameters.Clear();

                        cmdInsertMCC.Transaction = trans;
                        cmdInsertMCC.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdInsertMCC.Parameters.AddWithValue("@MixingTimeTableId", item.MixingTimeTableID);
                        cmdInsertMCC.Parameters.AddWithValue("@SalesId", item.SalesId);
                        cmdInsertMCC.Parameters.AddWithValue("@RawProdId", item.RawProductID);
                        cmdInsertMCC.Parameters.AddWithValue("@BlockLogsQty", mixCCBlockTot);
                        cmdInsertMCC.Parameters.AddWithValue("@Status", "Mixing");
                        cmdInsertMCC.Parameters.AddWithValue("@OrderType", ot);
                        cmdInsertMCC.Parameters.AddWithValue("@Rank", 4);
                        cmdInsertMCC.Parameters.AddWithValue("@Active", false);
                        result = cmdInsertMCC.ExecuteNonQuery();
                        cmdInsertMCC.Parameters.Clear();

                        ////cmdUpdateMixingStatus.Transaction = trans;
                        ////cmdUpdateMixingStatus.Parameters.AddWithValue("@OrderNo", item.SalesId);
                        ////cmdUpdateMixingStatus.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                        ////cmdUpdateMixingStatus.Parameters.AddWithValue("@Pending", Convert.ToInt16(mixCCBlockTot));                       
                        ////cmdUpdateMixingStatus.ExecuteNonQuery();
                        ////cmdUpdateMixingStatus.Parameters.Clear();

                        //cmdSelectMixing.Transaction = trans;
                        //cmdSelectMixing.Parameters.AddWithValue("@MixingTimeTableID", item.MixingTimeTableID);
                        //cmdSelectMixing.Parameters.AddWithValue("@rawIdParam", item.RawProductID);
                        //cmdSelectMixing.Parameters.AddWithValue("@salesIdParam", salesId);

                        //using (SqlDataReader dr = cmdSelectMixing.ExecuteReader())
                        //{
                        //    if (dr != null)
                        //    {
                        //        if (dr.HasRows)
                        //        {
                        //            while (dr.Read())
                        //            {
                        //                mixBlockTot = Convert.ToDecimal(dr["blocklog_qty"]);
                        //            }
                        //            mixBlockTot += item.BlockLogQty;
                        //        }
                        //        else
                        //        {
                        //            mixBlockTot = item.BlockLogQty;
                        //        }
                        //    }
                        //}

                        //cmdSelectMixing.Parameters.Clear();
                        //cmdInsertMixing.Transaction = trans;
                        //cmdInsertMixing.Parameters.AddWithValue("@MixingTimeTableID", item.MixingTimeTableID);
                        //cmdInsertMixing.Parameters.AddWithValue("@SalesId", salesId);
                        //cmdInsertMixing.Parameters.AddWithValue("@RawProductId", item.RawProductID);
                        //cmdInsertMixing.Parameters.AddWithValue("@BlockLogQty", mixBlockTot);
                        //cmdInsertMixing.Parameters.AddWithValue("@Status", "Mixing");
                        //cmdInsertMixing.Parameters.AddWithValue("@Ordertype", item.OrderType);
                        //result = cmdInsertMixing.ExecuteNonQuery();
                        //cmdInsertMixing.Parameters.Clear();                                                
                    }

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;

        }

        public static decimal GetCurrentMixingCapacity(int mTTID)
        {
            decimal capacity = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT blockLog_qty FROM MixingCurrentCapacity " +
                                                       "WHERE mixing_time_table_id = @MixingTimeTableId", conn);

                conn.Open();
                try
                {

                    capacity = 0;
                    cmdSelect.Parameters.AddWithValue("@MixingTimeTableId", mTTID);


                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    capacity += Convert.ToDecimal(dr["blockLog_qty"]);
                                }
                            }
                            else
                            {
                                capacity = 0;
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL MixingCurrentCapacity ERROR OCCURED : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capacity;
        }

        public static List<MixingCapacity> GetMixingCapacity(int id)
        {
            //decimal maxMix = 0;
            List<MixingCapacity> mixingCapacityList = new List<MixingCapacity>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MixingCapacity " +
                                                                  "WHERE mixing_time_table_id=@id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    MixingCapacity mc = new MixingCapacity();
                                    mc.ID = Convert.ToInt32(dr["id"]);
                                    mc.ProdTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                    mc.MixingTimeTableID = Convert.ToInt32(dr["mixing_time_table_id"]);
                                    mc.MaxMixes = Convert.ToDecimal(dr["max_mixes"]);
                                    mixingCapacityList.Add(mc);
                                    //maxMix = Convert.ToDecimal(dr["max_mixes"]);                
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Mixing Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return mixingCapacityList;
        }

        public static decimal GetReRollingCurrentShiftDollarValue(int prodTimeTableId, int shift)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM ReRollingOrders WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift", conn);

                conn.Open();

                try
                {
                    cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                    cmdGetData.Parameters.AddWithValue("@Shift", shift);

                    using (SqlDataReader dr = cmdGetData.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    price += Convert.ToDecimal(dr["dollar_value"]);
                                }

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }



        public static decimal GetReRollingMaxCapacity(int prodTimeTableId, int shift, int machineId)
        {
            decimal price = 0;
            List<SlitPeel> SlitPeelList = new List<SlitPeel>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT dollar_value FROM ReRollingCapacity WHERE prod_timetable_id = @ProdTimeTableID AND shift= @Shift AND machine_id=@MachineID", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableID", prodTimeTableId);
                        cmdGetData.Parameters.AddWithValue("@Shift", shift);
                        cmdGetData.Parameters.AddWithValue("@MachineID", machineId);
                        price = (decimal)cmdGetData.ExecuteScalar();

                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return price;
        }

      

        public static int AddToReRolling(List<ReRollingOrder> reRollingList)
        {
            int rowCount = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                //SqlCommand cmdInsUp = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ReRollingOrders " +
                //                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType) " +
                //                                     "INSERT INTO ReRollingOrders VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Rolls,@DollarValue,@OrderType,@Status) " +
                //                                     "ELSE " +
                //                                     "UPDATE ReRollingOrders SET qty=@Qty,rolls+=@Rolls,dollar_value+=@DollarValue " +
                //                                     "WHERE prod_timetable_id =@ProdTimeTableID AND order_no=@OrderNo AND product_id = @ProductID AND raw_product_id =@RawProdId AND shift=@Shift AND order_type=@OrderType", conn);

                SqlCommand cmdInsUp = new SqlCommand("INSERT INTO ReRollingOrders(prod_timetable_id,order_no,product_id,raw_product_id,shift,qty,rolls,dollar_value,order_type,status) " +
                                                     "VALUES(@ProdTimeTableID,@OrderNo,@ProductID,@RawProdId,@Shift,@Qty,@Rolls,@DollarValue,@OrderType,@Status)", conn);




                //    //SqlCommand cmdInsertToNotes = new SqlCommand("INSERT INTO Notes(sales_order_id, type, notes) " +
                //    //                                              "VALUES (@SalesOrderID,@Type,@Notes)", conn);
                conn.Open();
                try
                {
                    foreach (var item in reRollingList)
                    {

                        cmdInsUp.Parameters.AddWithValue("@ProdTimeTableID", item.ProdTimetableID);
                        cmdInsUp.Parameters.AddWithValue("@OrderNo", item.Order.OrderNo);
                        cmdInsUp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdInsUp.Parameters.AddWithValue("@RawProdId", item.Product.RawProduct.RawProductID);
                        cmdInsUp.Parameters.AddWithValue("@Shift", item.Shift.ShiftID);
                        cmdInsUp.Parameters.AddWithValue("@Qty", 0);
                        cmdInsUp.Parameters.AddWithValue("@Rolls", item.Rolls);
                        cmdInsUp.Parameters.AddWithValue("@DollarValue", item.DollarValue);
                        cmdInsUp.Parameters.AddWithValue("@OrderType", item.Order.OrderType);
                        cmdInsUp.Parameters.AddWithValue("@Status", "ReRolling");
                        rowCount = cmdInsUp.ExecuteNonQuery();
                        cmdInsUp.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL ADDING COMMAND ERROR OCCURED :  Adding to ReRolling table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return rowCount;
        }

        public static int AllocateCapacity(ObservableCollection<CurrentCapacity> capData, List<CurrentCapacity> gradingList, Int32 salesId, string salesNo)
        {
            int result = 0;
            decimal totCapKg = 0;
            decimal totBlocksLogs = 0;
            decimal totBlocksLogsGS = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //CHECK EXISTING VALUES IN CURRENT CAPACITY
                SqlCommand cmdSelect = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                      "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProductCapacityId AND raw_product_id =@RawproductId AND product_id = @productId AND shift=@Shift AND sales_id = @SalesId AND order_type  =@OrderType", conn);
                //INSERT INTO CURRENT CAPACITY
                SqlCommand cmdCurrCap = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
                                                       "prod_timetable_id=@ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND raw_product_id =@RawproductId AND product_id = @productId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND product_id = @productId AND shift=@Shift", conn);

                //CHECK EXISTING VAUES IN THE GRADING SCHEDULE
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND status=@Status AND order_type=@OrderType", conn);

                //INSERT INTO GRADING
                SqlCommand cmdGradingSched = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                            "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType) " +
                                                            "INSERT INTO GradingScheduling VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@Status,@OrderType,@Active,@PrintCounter) " +
                                                            "ELSE " +
                                                            "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId", conn);
                //Update Raw Stock Status
                SqlCommand cmdUpdate = new SqlCommand("UPDATE RawStock SET status=@UpdateStatus WHERE rs_raw_product_id = @RawProdID AND status=@Status", conn);

                //Grading Status               

                //SqlCommand cmdInsertGradingStatus = new SqlCommand("UPDATE GradingStatus SET qty_rem+=@Pending WHERE order_no=@OrderNo AND raw_product_id =@RawProductID", conn);

                //SqlCommand cmdInsertGradingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingStatus WHERE " +
                //                                                   "order_no=@OrderNo AND raw_product_id =@RawProductID) " +
                //                                                   "INSERT INTO GradingStatus VALUES(@OrderNo,@RawProductID,@Pending,@Completed) " +
                //                                                   "ELSE " +
                //                                                   "UPDATE GradingStatus SET pending=@Pending WHERE order_no=@OrderNo AND raw_product_id =@RawProductID", conn);
                ////Mixing Status               
                //SqlCommand cmdInsertMixingStatus = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM MixingStatus WHERE " +
                //                                                  "order_no=@OrderNo AND raw_product_id =@RawProductID) " +
                //                                                  "INSERT INTO MixingStatus VALUES(@OrderNo,@RawProductID,@Pending,@Completed) " +
                //                                                  "ELSE " +
                //                                                  "UPDATE MixingStatus SET pending=@Pending WHERE order_no=@OrderNo AND raw_product_id =@RawProductID", conn);



                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capData)
                    {
                        //Grading Only

                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelect.Parameters.AddWithValue("@ProductCapacityId", item.ProductCapacityID);
                        cmdSelect.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelect.Parameters.AddWithValue("@productId", item.ProductID);
                        cmdSelect.Parameters.AddWithValue("@SalesId", salesId);
                        cmdSelect.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelect.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totCapKg = 0;
                                    totBlocksLogs = 0;
                                    while (dr.Read())
                                    {
                                        totCapKg += Convert.ToDecimal(dr["capacity_kg"]);
                                        totBlocksLogs += Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                    totCapKg += item.CapacityKG;
                                    totBlocksLogs += item.BlocksLogs;
                                }
                                else
                                {
                                    totCapKg = item.CapacityKG;
                                    totBlocksLogs = item.BlocksLogs;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();
                        //INSERT INTO CURRENT CAPACITY
                        cmdCurrCap.Transaction = trans;
                        cmdCurrCap.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdCurrCap.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                        cmdCurrCap.Parameters.AddWithValue("@SalesId", salesId);
                        cmdCurrCap.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdCurrCap.Parameters.AddWithValue("@productId", item.ProductID);
                        cmdCurrCap.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdCurrCap.Parameters.AddWithValue("@CapacityKg", totCapKg);
                        cmdCurrCap.Parameters.AddWithValue("@BlockSLogs", totBlocksLogs);
                        //cmdCurrCap.Parameters.AddWithValue("@InsBlockSLogs", 0);
                        cmdCurrCap.Parameters.AddWithValue("@OrderType", item.OrderType);

                        result = cmdCurrCap.ExecuteNonQuery();
                        cmdCurrCap.Parameters.Clear();

                        if (salesNo == "Stock Filling")
                        {
                            cmdUpdate.Transaction = trans;
                            cmdUpdate.Parameters.AddWithValue("@RawProdID", item.RawProductID);
                            cmdUpdate.Parameters.AddWithValue("@Status", "NF");
                            cmdUpdate.Parameters.AddWithValue("@UpdateStatus", "SF");
                            cmdUpdate.ExecuteNonQuery();
                            cmdUpdate.Parameters.Clear();
                        }
                    }

                    foreach (var item in gradingList)
                    {

                        cmdSelectGS.Transaction = trans;
                        cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelectGS.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelectGS.Parameters.AddWithValue("@SalesId", salesId);
                        cmdSelectGS.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelectGS.Parameters.AddWithValue("@Status", "Grading");
                        cmdSelectGS.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totBlocksLogsGS = 0;
                                    while (dr.Read())
                                    {
                                        totBlocksLogsGS += Convert.ToDecimal(dr["blocklog_qty"]);
                                    }
                                    totBlocksLogsGS += item.BlocksLogs;
                                }
                                else
                                {
                                    totBlocksLogsGS = item.BlocksLogs;
                                }
                            }
                        }
                        cmdSelectGS.Parameters.Clear();

                        cmdGradingSched.Transaction = trans;
                        cmdGradingSched.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdGradingSched.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdGradingSched.Parameters.AddWithValue("@SalesId", salesId);
                        cmdGradingSched.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdGradingSched.Parameters.AddWithValue("@BlockSLogs", totBlocksLogsGS);
                        cmdGradingSched.Parameters.AddWithValue("@Status", "Grading");
                        cmdGradingSched.Parameters.AddWithValue("@OrderType", item.OrderType);
                        cmdGradingSched.Parameters.AddWithValue("@Active", false);
                        cmdGradingSched.Parameters.AddWithValue("@PrintCounter", 0);
                        result = cmdGradingSched.ExecuteNonQuery();
                        cmdGradingSched.Parameters.Clear();


                        //cmdInsertGradingStatus.Transaction = trans;
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@OrderNo", salesId);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@Pending", totBlocksLogsGS);
                        //cmdInsertGradingStatus.Parameters.AddWithValue("@Completed", 0);
                        //cmdInsertGradingStatus.ExecuteNonQuery();
                        //cmdInsertGradingStatus.Parameters.Clear();

                        //cmdInsertMixingStatus.Transaction = trans;
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@OrderNo", salesId);
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@RawProductID", item.RawProductID);
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@Pending", 0);
                        //cmdInsertMixingStatus.Parameters.AddWithValue("@Completed", 0);
                        //cmdInsertMixingStatus.ExecuteNonQuery();
                        //cmdInsertMixingStatus.Parameters.Clear();
                    }
                    //if (String.IsNullOrEmpty(GradingComments))
                    //{
                    //    GradingComments = "No Comment";
                    //}
                    //cmdInsertNote.Transaction = trans;
                    //cmdInsertNote.Parameters.AddWithValue("@SalesOrderId", salesId);
                    //cmdInsertNote.Parameters.AddWithValue("@Type", "Grading");
                    //cmdInsertNote.Parameters.AddWithValue("@Comment", GradingComments);
                    //cmdInsertNote.ExecuteNonQuery();

                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static int UpdateGradedStock(List<GradedStock> gradedStockList)
        {
            int result = 0;
            decimal qty = 0;
            //decimal gSR = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM GradedStock WHERE id = @ID", conn);
                SqlCommand cmd = new SqlCommand("UPDATE GradedStock SET qty = @Qty WHERE id = @ID", conn);

                ////CHECK GRADEDSTOCKRESERVE
                //SqlCommand cmdSelectGradedStockReserve = new SqlCommand("SELECT * FROM GradedStockReserve WHERE row_id = @RowID AND grade_id = @GradedId", conn);
                ////INSERT INTO GRADEDSTOCKRESERVE
                //SqlCommand cmdGradedStockReserve = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradedStockReserve WHERE row_id = @RowID AND grade_id=@GradedId) " +
                //                                                  "INSERT INTO GradedStockReserve VALUES(@RowID,@GradedId,@ReserveQty) " +
                //                                                  "ELSE " +
                //                                                  "UPDATE GradedStockReserve SET reserve_qty=@ReserveQty WHERE row_id = @RowID AND grade_id=@GradedId", conn);



                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in gradedStockList)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ID", item.ID);

                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        qty += Convert.ToDecimal(dr["qty"]);
                                    }
                                    qty -= item.Qty;
                                }
                                else
                                {
                                    qty = item.Qty;

                                }
                                if (qty < 0)
                                {
                                    qty = 0;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();

                        cmd.Transaction = trans;
                        cmd.Parameters.AddWithValue("@ID", item.ID);
                        cmd.Parameters.AddWithValue("@QTY", qty);
                        result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Clear();
                        qty = 0;
                    }

                    //foreach (var item in gradedStockList)
                    //{
                    //    cmdSelectGradedStockReserve.Transaction = trans;
                    //    cmdSelectGradedStockReserve.Parameters.AddWithValue("@GradedId", item.ID);
                    //    cmdSelectGradedStockReserve.Parameters.AddWithValue("@RowID", item.RowID);

                    //    using (SqlDataReader dr = cmdSelectGradedStockReserve.ExecuteReader())
                    //    {
                    //        if (dr != null)
                    //        {
                    //            if (dr.HasRows)
                    //            {
                    //                while (dr.Read())
                    //                {
                    //                    gSR += Convert.ToDecimal(dr["reserve_qty"]);
                    //                }
                    //                gSR += item.Qty;
                    //            }
                    //            else
                    //            {
                    //                gSR = item.Qty;
                    //            }

                    //        }
                    //    }
                    //    cmdSelectGradedStockReserve.Parameters.Clear();

                    //    cmdGradedStockReserve.Transaction = trans;
                    //    cmdGradedStockReserve.Parameters.AddWithValue("@RowID", item.RowID);
                    //    cmdGradedStockReserve.Parameters.AddWithValue("@GradedId", item.ID);
                    //    cmdGradedStockReserve.Parameters.AddWithValue("@ReserveQty", gSR);
                    //    result = cmdGradedStockReserve.ExecuteNonQuery();
                    //    cmdGradedStockReserve.Parameters.Clear();
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static ObservableCollection<ProductCapacity> GetCapacityLimitations(int id)
        {

            ObservableCollection<ProductCapacity> capLimList = new ObservableCollection<ProductCapacity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductCapacity WHERE production_time_table_id=@ProdTimeTableId", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdTimeTableId", id);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductCapacity productCapacity = new ProductCapacity();
                                    productCapacity.ID = Convert.ToInt32(dr["id"]);
                                    productCapacity.ProductionTimeTableID = Convert.ToInt32(dr["production_time_table_id"]);
                                    productCapacity.Shift = Convert.ToInt16(dr["shift"]);
                                    productCapacity.RubberGradingID = Convert.ToInt16(dr["rubber_grading_id"]);
                                    productCapacity.CapacityKG = Convert.ToDecimal(dr["capacity_kg"]);
                                    productCapacity.GradedKG = Convert.ToDecimal(dr["graded_kg"]);
                                    capLimList.Add(productCapacity);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return capLimList;
        }

        public static int AllocateGradingCapacity(List<CurrentCapacity> capList, List<GradingScheduling> gradingList)
        {
            int result = 0;
            decimal totCapKg = 0;
            decimal totBlocksLogs = 0;
            decimal totBlocksLogsGS = 0;
            int totPrintCounter = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //CHECK EXISTING VALUES IN CURRENT CAPACITY
                SqlCommand cmdSelect = new SqlCommand("SELECT capacity_kg, blocks_logs FROM CurrentCapacity " +
                                                      "WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProductCapacityId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type = @OrderType", conn);
                //INSERT INTO CURRENT CAPACITY
                SqlCommand cmdCurrCap = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM CurrentCapacity WHERE " +
                                                       "prod_timetable_id=@ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type = @OrderType) " +
                                                       "INSERT INTO CurrentCapacity VALUES(@ProdTimeTableId,@ProdCapacityId,@SalesId,@RawproductId,@productId,@Shift,@CapacityKg,@BlockSLogs,@OrderType) " +
                                                       "ELSE " +
                                                       "UPDATE CurrentCapacity SET capacity_kg=@CapacityKg, blocks_logs=@BlockSLogs WHERE prod_timetable_id = @ProdTimeTableId AND product_capacity_id = @ProdCapacityId AND sales_id=@SalesId AND raw_product_id=@RawproductId AND shift=@Shift AND order_type=@OrderType", conn);

                //CHECK EXISTING VAUES IN THE GRADING SCHEDULE
                SqlCommand cmdSelectGS = new SqlCommand("SELECT blocklog_qty, print_counter FROM GradingScheduling " +
                                                       "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND status=@Status AND order_type = @OrderType", conn);

                //INSERT INTO GRADING
                SqlCommand cmdGradingSched = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM GradingScheduling WHERE " +
                                                            "production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type = @OrderType) " +
                                                            "INSERT INTO GradingScheduling VALUES(@ProdTimeTableId,@RawproductId,@SalesId,@BlockSLogs,@Shift,@Status,@OrderType,@Active,@PrintCounter) " +
                                                            "ELSE " +
                                                            "UPDATE GradingScheduling SET blocklog_qty=@BlockSLogs, active_order=@Active, print_counter=@PrintCounterParam " +
                                                            "WHERE production_time_table_id=@ProdTimeTableId AND raw_product_id =@RawproductId AND shift=@Shift AND sales_id = @SalesId AND order_type=@OrderType", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in capList)
                    {
                        cmdSelect.Transaction = trans;
                        cmdSelect.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdSelect.Parameters.AddWithValue("@ProductCapacityId", item.ProductCapacityID);
                        cmdSelect.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelect.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdSelect.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelect.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelect.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totCapKg = 0;
                                    totBlocksLogs = 0;
                                    while (dr.Read())
                                    {
                                        totCapKg += Convert.ToDecimal(dr["capacity_kg"]);
                                        totBlocksLogs += Convert.ToDecimal(dr["blocks_logs"]);
                                    }
                                    totCapKg += item.CapacityKG;
                                    totBlocksLogs += item.BlocksLogs;
                                }
                                else
                                {
                                    totCapKg = item.CapacityKG;
                                    totBlocksLogs = item.BlocksLogs;
                                }
                            }
                        }
                        cmdSelect.Parameters.Clear();
                        //INSERT INTO CURRENT CAPACITY
                        cmdCurrCap.Transaction = trans;
                        cmdCurrCap.Parameters.AddWithValue("@ProdTimeTableId", item.ProdTimeTableID);
                        cmdCurrCap.Parameters.AddWithValue("@ProdCapacityId", item.ProductCapacityID);
                        cmdCurrCap.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdCurrCap.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdCurrCap.Parameters.AddWithValue("@productId", item.ProductID);
                        cmdCurrCap.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdCurrCap.Parameters.AddWithValue("@CapacityKg", totCapKg);
                        cmdCurrCap.Parameters.AddWithValue("@BlockSLogs", totBlocksLogs);
                        cmdCurrCap.Parameters.AddWithValue("@OrderType", item.OrderType);

                        result = cmdCurrCap.ExecuteNonQuery();
                        cmdCurrCap.Parameters.Clear();
                    }
                    foreach (var item in gradingList)
                    {

                        cmdSelectGS.Transaction = trans;
                        cmdSelectGS.Parameters.AddWithValue("@ProdTimeTableId", item.ProductionTimeTableID);
                        cmdSelectGS.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdSelectGS.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdSelectGS.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdSelectGS.Parameters.AddWithValue("@Status", "Grading");
                        cmdSelectGS.Parameters.AddWithValue("@OrderType", item.OrderType);
                        using (SqlDataReader dr = cmdSelectGS.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    totBlocksLogsGS = 0;
                                    totPrintCounter = 0;
                                    while (dr.Read())
                                    {
                                        totBlocksLogsGS += Convert.ToDecimal(dr["blocklog_qty"]);
                                        totPrintCounter += Convert.ToInt32(dr["print_counter"]);
                                    }
                                    totBlocksLogsGS += item.BlocklogQty;
                                    totPrintCounter += item.PrintCounter;
                                }
                                else
                                {
                                    totBlocksLogsGS = item.BlocklogQty;
                                    totPrintCounter = item.PrintCounter;
                                }
                            }
                        }
                        cmdSelectGS.Parameters.Clear();

                        cmdGradingSched.Transaction = trans;
                        cmdGradingSched.Parameters.AddWithValue("@ProdTimeTableId", item.ProductionTimeTableID);
                        cmdGradingSched.Parameters.AddWithValue("@RawproductId", item.RawProductID);
                        cmdGradingSched.Parameters.AddWithValue("@SalesId", item.SalesID);
                        cmdGradingSched.Parameters.AddWithValue("@Shift", item.Shift);
                        cmdGradingSched.Parameters.AddWithValue("@BlockSLogs", totBlocksLogsGS);
                        cmdGradingSched.Parameters.AddWithValue("@Status", "Grading");
                        cmdGradingSched.Parameters.AddWithValue("@OrderType", item.OrderType);
                        cmdGradingSched.Parameters.AddWithValue("@Active", item.ActiveOrder);
                        cmdGradingSched.Parameters.AddWithValue("@PrintCounter", item.PrintCounter);
                        cmdGradingSched.Parameters.AddWithValue("@PrintCounterParam", totPrintCounter);

                        result = cmdGradingSched.ExecuteNonQuery();
                        cmdGradingSched.Parameters.Clear();
                    }


                    trans.Commit();
                }

                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static decimal GetCurrentBlockLogTotal(int prodTimeTableId)
        {

            decimal tot = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ISNULL(SUM(blocklog_qty),0) AS bl FROM GradingScheduling " +
                                                                  "WHERE production_time_table_id=@ProdTimeTableID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("ProdTimeTableID", prodTimeTableId);

                        //object result = cmdGetData.ExecuteScalar();

                        //tot = Convert.ToDecimal(result);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    tot = Convert.ToDecimal(dr["bl"]);

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return tot;

        }

        public static decimal GetMaxMixes(int id)
        {
            decimal maxMix = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT max_mixes FROM MixingCapacity " +
                                                                  "WHERE mixing_time_table_id=@id", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@id", id);

                        object result = cmdGetData.ExecuteScalar();

                        maxMix = (decimal)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Mixing Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return maxMix;
        }

        public static List<GradedStock> GetGradedStock()
        {
            List<GradedStock> gStockList = new List<GradedStock>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdSelect = new SqlCommand("SELECT * FROM GradedStock", conn);

                conn.Open();
                try
                {
                    using (SqlDataReader dr = cmdSelect.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    GradedStock gs = new GradedStock();
                                    gs.ID = Convert.ToInt16(dr["id"]);
                                    gs.GradeName = dr["grade_name"].ToString();
                                    gs.Qty = Convert.ToDecimal(dr["qty"]);
                                    gs.ReOrderQty = Convert.ToDecimal(dr["re_order_qty"]);
                                    gStockList.Add(gs);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return gStockList;
        }

        public static ObservableCollection<SalesOrder> GetCurrentOrders(string status)
        {
            ObservableCollection<SalesOrder> list = new ObservableCollection<SalesOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,SalesOrder.order_priority,SalesOrder.customer_id,Customers.company_name,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,SalesOrder.freight_id,Freight.FreightName,SalesOrder.quote_no,SalesOrder.customer_order_no,SalesOrder.bill_to,SalesOrder.ship_to,SalesOrder.pickup_time,SalesOrder.dispatch_date,SalesOrder.terms_id,SalesOrder.list_price_total,SalesOrder.freight_total,SalesOrder.total_amount,SalesOrder.gst,SalesOrder.stock_location,SalesOrder.sales_made_by,SalesOrder.sales_completed_by,SalesOrder.order_status,SalesOrder.last_modified_date,SalesOrder.last_modified_by,SalesOrder.payment_due_date,SalesOrder.gst_enabled,SalesOrder.payment_recieved, " +
                                                                "PrePaidCustomers.prepaid_customer_name,DispatchOrders.dispatched_date " +
                                                                "FROM SalesOrder " +
                                                                "INNER JOIN  Freight ON SalesOrder.freight_id = Freight.ID " +
                                                                "LEFT JOIN  Customers ON SalesOrder.customer_id = Customers.id " +
                                                                "INNER JOIN PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                                "LEFT JOIN DispatchOrders ON SalesOrder.sales_no = DispatchOrders.sales_no " +
                                                                "WHERE " + status + " ORDER BY SalesOrder.dispatch_date DESC", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SalesOrder so = new SalesOrder();
                                    so.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                    
                                    so.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    so.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                    so.Customer = new Customer()
                                    {
                                        CustomerId = Convert.ToInt16(dr["customer_id"]),
                                        CompanyName = Convert.ToInt16(dr["customer_id"]) > 0 ? dr["company_name"].ToString() : dr["prepaid_customer_name"].ToString(),
                                        CreditLimit = CheckNull<decimal>(dr["credit_limit"]),
                                        CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]),
                                        Debt = CheckNull<decimal>(dr["debt"]),
                                        CreditOwed = CheckNull<decimal>(dr["credit_owed"])
                                    };
                                    so.FreightCarrier = new FreightCarrier() { Id = Convert.ToInt16(dr["freight_id"]), FreightName = dr["FreightName"].ToString() };
                                    so.DispatchOrder = new DispatchOrder() { DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]) };
                                    so.QuoteNo = Convert.ToInt16(dr["quote_no"]);
                                    so.CustomerOrderNo = dr["customer_order_no"].ToString();
                                    so.BillTo = dr["bill_to"].ToString();
                                    so.ShipTo = dr["ship_to"].ToString();
                                    so.PickupTime = dr["pickup_time"].ToString();
                                    so.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                    so.TermsID = dr["terms_id"].ToString();
                                    so.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                    so.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                    so.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                    so.GST = Convert.ToDecimal(dr["gst"]);
                                    so.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                    so.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location"]) };
                                    so.SalesMadeBy = dr["sales_made_by"].ToString();
                                    so.SalesCompletedBy = dr["sales_completed_by"].ToString();
                                    so.OrderStatus = dr["order_status"].ToString();
                                    so.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                    so.LastModifiedBy = dr["last_modified_by"].ToString();
                                    so.GSTEnabled = Convert.ToBoolean(dr["gst_enabled"]);
                                    so.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                    //so.StockReserved = (CheckNull<decimal>(dr["qty_reserved"]) == 0  ? "No" : "Yes");
                                    list.Add(so);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return list;
        }

        public static ObservableCollection<ProductStockReserved> CheckProductStockReserved(ObservableCollection<SalesOrder> so)
        {
            ObservableCollection<ProductStockReserved> psRList = new ObservableCollection<ProductStockReserved>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT SalesOrderDetails.id AS SodID,SalesOrderDetails.sales_no,SalesOrderDetails.product_id,SalesOrderDetails.qty, " +
                                                                "ProductStockReserved.qty_reserved " +
                                                                "FROM SalesOrderDetails " +
                                                                "LEFT JOIN ProductStockReserved ON ProductStockReserved.prod_stock_reserved_id = SalesOrderDetails.id AND ProductStockReserved.product_id = SalesOrderDetails.product_id " +
                                                                "WHERE SalesOrderDetails.sales_no=@SalesNo AND ProductStockReserved.stock_location_id=@StockLocationID", conn))
                    {

                        foreach (var item in so)
                        {
                            cmdGetId.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                            cmdGetId.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                            using (SqlDataReader dr = cmdGetId.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        ProductStockReserved psr = new ProductStockReserved();
                                        psr.ProductStockReservedID = Convert.ToInt32(dr["SodID"]);
                                        psr.SalesNo = Convert.ToInt32(dr["sales_no"]);
                                        psr.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                        psr.QtyOrdered = Convert.ToDecimal(dr["qty"]);
                                        psr.QtyReserved = (CheckNull<decimal>(dr["qty_reserved"]) == 0 ? 0 : Convert.ToDecimal(dr["qty_reserved"]));
                                        psRList.Add(psr);
                                    }
                                }
                            }
                            cmdGetId.Parameters.Clear();
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return psRList;
        }

        public static int InsertUpdateDiscount(List<DiscountStructure> dsList)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsertUpdateDiscount = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Discount " +
                                                                           "WHERE customer_id=@CustomerID AND category_id = @CategoryID) " +
                                                                           "INSERT INTO Discount(customer_id,category_id,discount,comment,updated_date,updated_by) VALUES(@CustomerID,@CategoryID,@Discount,@Comment,@UpdatedDate,@UpdatedBy) " +
                                                                           "ELSE " +
                                                                           "UPDATE Discount SET discount=@Discount,updated_date=@UpdatedDate,updated_by=@UpdatedBy " +
                                                                           "WHERE customer_id=@CustomerID AND category_id = @CategoryID AND discount <> @Discount", conn);

                conn.Open();
                try
                {
                    List<int> res = new List<int>();
                    foreach (var item in dsList)
                    {
                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@CustomerID", item.CustomerID);
                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@CategoryID", item.Category.CategoryID);
                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@Discount", item.Discount);
                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@Comment", "");
                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedDate", item.UpdatedDate);
                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                        result = cmdInsertUpdateDiscount.ExecuteNonQuery();
                        res.Add(result);
                        cmdInsertUpdateDiscount.Parameters.Clear();
                    }

                    bool x = res.Any(z => z == 1);
                    if (x)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static Invoice InsertUpdateInvoice(Int32 salesNo, DateTime dispatchDate)
        {
            //Int32 invNo = 0;
            Invoice invoice = new Invoice();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsUpInvoice = new SqlCommand("MERGE INTO Invoice i " +
                                                            "USING (select @SalesOrderNo as sales_order_no,@InvoicedDate as invoiced_date,@ExportToMyob as exported_to_myob,@CompletedDate as completed_date,@CompletedBy as completed_by, @IsCompleted as is_completed, @IsTaken as is_taken, @IsActive as is_active) d " +
                                                            "ON d.sales_order_no=i.sales_order_no WHEN NOT MATCHED THEN " +
                                                            "INSERT (sales_order_no,invoiced_date,exported_to_myob,completed_date,completed_by,is_completed,is_taken,is_active) VALUES (d.sales_order_no,d.invoiced_date,d.exported_to_myob,d.completed_date,d.completed_by,d.is_completed,d.is_taken,d.is_active);", conn);

                //SqlCommand cmdGetInvoiceNo = new SqlCommand("SELECT id FROM Invoice WHERE sales_order_no=@SalesOrderNo", conn);

                SqlCommand cmdGetInvoice = new SqlCommand("SELECT * FROM Invoice WHERE sales_order_no=@SalesOrderNo", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdInsUpInvoice.Transaction = trans;
                    cmdInsUpInvoice.Parameters.AddWithValue("@SalesOrderNo", salesNo);
                    cmdInsUpInvoice.Parameters.AddWithValue("@InvoicedDate", dispatchDate);
                    cmdInsUpInvoice.Parameters.AddWithValue("@ExportToMyob", false);
                    cmdInsUpInvoice.Parameters.AddWithValue("@CompletedDate", DBNull.Value);
                    cmdInsUpInvoice.Parameters.AddWithValue("@CompletedBy", string.Empty);
                    cmdInsUpInvoice.Parameters.AddWithValue("@IsCompleted", false);
                    cmdInsUpInvoice.Parameters.AddWithValue("@IsTaken", true);
                    cmdInsUpInvoice.Parameters.AddWithValue("@IsActive", false);
                    cmdInsUpInvoice.ExecuteNonQuery();

                    cmdGetInvoice.Transaction = trans;
                    cmdGetInvoice.Parameters.AddWithValue("@SalesOrderNo", salesNo);
                    cmdGetInvoice.ExecuteScalar();

                    using (SqlDataReader dr = cmdGetInvoice.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                invoice.InvoiceNo = Convert.ToInt16(dr["id"]);
                                invoice.SalesOrderNo = Convert.ToInt16(dr["sales_order_no"]);
                                invoice.InvoicedDate = Convert.ToDateTime(dr["invoiced_date"]);
                                invoice.ExportedToMyOb = Convert.ToBoolean(dr["exported_to_myob"]);
                                invoice.CompletedDate = CheckNull<DateTime>(dr["completed_date"]);
                                invoice.CompletedBy = dr["completed_by"].ToString();
                                invoice.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                invoice.IsTaken = Convert.ToBoolean(dr["is_taken"]);
                                invoice.IsActive = Convert.ToBoolean(dr["is_active"]);
                            }
                        }
                    }

                    //invNo = Convert.ToInt32(cmdGetInvoiceNo.ExecuteScalar());

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return invoice;
        }

        public static int UpdateInvoiceDate(Int32 salesOrderNo, DateTime datetime)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdMD = new SqlCommand("UPDATE Invoice " +
                                                  "SET invoiced_date = @InvoicedDate " +
                                                  "WHERE sales_order_no = @SalesOrderNo AND (invoiced_date <> @InvoicedDate)", conn);

                conn.Open();
                try
                {

                    cmdMD.Parameters.AddWithValue("@InvoicedDate", datetime);
                    cmdMD.Parameters.AddWithValue("@SalesOrderNo", salesOrderNo);
                    result = cmdMD.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static List<DateTime> GetSalesOrderDates()
        {
            List<DateTime> dateList = new List<DateTime>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdGetSalesOrderDate = new SqlCommand("SELECT DISTINCT order_date FROM SalesOrder " +
                                                                      "ORDER BY order_date ", conn);
                    {

                        conn.Open();
                        using (SqlDataReader dr = cmdGetSalesOrderDate.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    dateList.Add(Convert.ToDateTime(dr["order_date"]));
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return dateList;
        }

        public static ObservableCollection<SalesOrder> GetSalesOrdersByDatesByCustomer(Customer customer, string fromDate, string toDate)
        {
            ObservableCollection<SalesOrder> salesOrders = new ObservableCollection<SalesOrder>();
            bool exe = true;
            string where = string.Empty;



            if (customer != null && (string.IsNullOrWhiteSpace(fromDate) && string.IsNullOrWhiteSpace(toDate)))
            {
                where = "WHERE SalesOrder.customer_id = " + customer.CustomerId;
            }
            else if (customer != null && (!string.IsNullOrWhiteSpace(fromDate) && string.IsNullOrWhiteSpace(toDate)))
            {
                where = "WHERE SalesOrder.customer_id = " + customer.CustomerId + " AND SalesOrder.order_date = " + fromDate;
            }
            else if (customer != null && (string.IsNullOrWhiteSpace(fromDate) && !string.IsNullOrWhiteSpace(toDate)))
            {
                where = "WHERE SalesOrder.customer_id = " + customer.CustomerId + " AND SalesOrder.order_date = " + toDate;
            }
            else if (customer != null && (!string.IsNullOrWhiteSpace(fromDate) && !string.IsNullOrWhiteSpace(toDate)))
            {
                where = "WHERE SalesOrder.customer_id = " + customer.CustomerId + " AND SalesOrder.order_date BETWEEN " + fromDate + " AND " + toDate + " ";
            }
            else if (customer == null && (!string.IsNullOrWhiteSpace(fromDate) && string.IsNullOrWhiteSpace(toDate)))
            {
                where = "WHERE SalesOrder.order_date = " + fromDate;
            }
            else if (customer == null && (!string.IsNullOrWhiteSpace(toDate) && string.IsNullOrWhiteSpace(fromDate)))
            {
                where = "WHERE SalesOrder.order_date = " + toDate;
            }
            else if (customer == null && (!string.IsNullOrWhiteSpace(fromDate) && !string.IsNullOrWhiteSpace(toDate)))
            {
                where = "WHERE SalesOrder.order_date BETWEEN " + fromDate + " AND " + toDate + " ";
            }
            else
            {
                salesOrders = null;
                exe = false;
            }

            if (exe)
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {
                    try
                    {
                        SqlCommand cmdGetSalesOrderDate = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,SalesOrder.customer_id,Customers.company_name,PrePaidCustomers.prepaid_customer_name,SalesOrder.list_price_total " +
                                                                         "FROM SalesOrder " +
                                                                         "INNER JOIN Customers ON SalesOrder.customer_id = Customers.id " +
                                                                         "LEFT JOIN PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                                         "" + where + "", conn);
                        {

                            conn.Open();
                            //cmdGetSalesOrderDate.Parameters.AddWithValue("@From", fromDate);
                            //cmdGetSalesOrderDate.Parameters.AddWithValue("@To", toDate);
                            using (SqlDataReader dr = cmdGetSalesOrderDate.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        SalesOrder so = new SalesOrder();
                                        so.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                        so.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                        so.Customer = new Customer()
                                        {
                                            CustomerId = Convert.ToInt16(dr["customer_id"]),
                                            CompanyName = Convert.ToInt16(dr["customer_id"]) > 0 ? dr["company_name"].ToString() : dr["prepaid_customer_name"].ToString()
                                        };
                                        so.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                        salesOrders.Add(so);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading sales order lines: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }

            return salesOrders;
        }

        public static ObservableCollection<SalesOrder> GetSalesOrderLinesByProductID(int prodId)
        {
            ObservableCollection<SalesOrder> salesOrderLine = new ObservableCollection<SalesOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT SalesOrderDetails.sales_no,SalesOrderDetails.order_line,SalesOrderDetails.line_status,SalesOrderDetails.qty,SalesOrderDetails.discount,SalesOrderDetails.total, " +
                                                                  "Products.unit_price,Products.unit, " +
                                                                  "SalesOrder.order_status,SalesOrder.order_date,SalesOrder.dispatch_date,SalesOrder.sales_completed_by, " +
                                                                  "Customers.company_name " +
                                                                  "FROM SalesOrderDetails " +
                                                                  "INNER JOIN SalesOrder ON SalesOrderDetails.sales_no = SalesOrder.sales_no " +
                                                                  "INNER JOIN Customers ON SalesOrder.customer_id = Customers.id " +
                                                                  "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id " +
                                                                  "WHERE SalesOrderDetails.product_id=@ProdID AND SalesOrderDetails.line_status='Open'", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdID", prodId);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SalesOrder so = new SalesOrder();
                                    so.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                    so.SalesOrderDetails = new ObservableCollection<SalesOrderDetails>();
                                    so.SalesOrderDetails.Add(new SalesOrderDetails() { OrderLine = Convert.ToInt16(dr["order_line"]), LineStatus = dr["line_status"].ToString(), Quantity = Convert.ToDecimal(dr["qty"]), Discount = Convert.ToInt16(dr["discount"]), Total = Convert.ToDecimal(dr["total"]), Product = new Product() { UnitPrice = Convert.ToDecimal(dr["unit_price"]), ProductUnit = dr["unit"].ToString() } });
                                    so.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    so.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                    so.Customer = new Customer() { CompanyName = dr["company_name"].ToString() };
                                    so.OrderStatus = dr["order_status"].ToString();
                                    so.SalesCompletedBy = dr["sales_completed_by"].ToString();
                                    salesOrderLine.Add(so);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return salesOrderLine;
        }


        public static decimal GetQtyHold(int prodId)
        {
            decimal qtyHold = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT SUM(ProductStockReserved.qty_reserved)  " +
                                                                  "FROM SalesOrder " +
                                                                  "INNER JOIN ProductStockReserved ON SalesOrder.sales_no = ProductStockReserved.sales_no " +
                                                                  "WHERE ProductStockReserved.product_id = @ProdID AND (SalesOrder.order_status = 'ReadyToDispatch' OR SalesOrder.order_status = 'InWarehouse' OR SalesOrder.order_status = 'HoldStockAllocated')", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@ProdID", prodId);
                        qtyHold = CheckNull<decimal>(cmdGetData.ExecuteScalar());
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return qtyHold;
        }

        public static ObservableCollection<ProductStock> GetAllProductStock(int inv)
        {
            ObservableCollection<ProductStock> prodColl = new ObservableCollection<ProductStock>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT  Products.id AS ProductId,Category.id AS CategoryID,Category.category_name,Products.commodity_code,Products.product_code,Products.product_description,Products.unit,Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.is_manufactured,Products.is_purchased,Products.active,Products.last_modified_by,Products.last_modified_date,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point,Products.is_auto_order,Products.time_stamp AS ProdTimeStamp, " +
                                                                  "ProductStock.id AS ProductStockID,ProductStock.qty_available,ProductStock.last_updated_date,ProductStock.updated_by,ProductStock.updated_by, " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.order_qty) " +
                                                                  "	  FROM PurchasingOrderItems " +
                                                                  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no " +
                                                                  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS TotalSupply,  " +
                                                                  "StockLocation.id AS StockID,StockLocation.stock_name,  " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.received_qty) " +
                                                                  "	  FROM PurchasingOrderItems  " +
                                                                  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no  " +
                                                                  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS ReceivedQty, " +
                                                                  "ISNULL((SELECT SUM(ProductStockReserved.qty_reserved) " +
                                                                  "		  FROM SalesOrder " +
                                                                  "		  INNER JOIN ProductStockReserved ON SalesOrder.sales_no = ProductStockReserved.sales_no " +
                                                                  "		  WHERE ProductStockReserved.product_id = Products.id AND ProductStockReserved.stock_location_id=StockLocation.id ),0) AS QTY_RESERVED, " +
                                                                  "SupplierProduct.lead_time,SupplierProduct.time_stamp AS SupTimeStamp, " +
                                                                  "Supplier.id AS SupplierID,Supplier.supplier_code,Supplier.Supplier_name  " +
                                                                  "FROM Products  " +
                                                                  "INNER JOIN Category ON Products.category_id = Category.id  " +
                                                                  "INNER JOIN ProductStock ON Products.id = ProductStock.product_id  " +
                                                                  "LEFT JOIN SupplierProduct ON Products.id = SupplierProduct.product_id  " +
                                                                  "LEFT JOIN Supplier ON SupplierProduct.supplier_id = Supplier.id  " +
                                                                  "INNER JOIN StockLocation ON ProductStock.stock_location_id = StockLocation.id  " +
                                                                  "WHERE ProductStock.stock_location_id = @InvId " +
                                                                  "ORDER BY StockLocation.id, Products.product_code", conn))
                    {

                        //item.Product.LastModifiedBy = item.ProductStock.LastUpdatedDate >= item.Product.LastModifiedDate ? item.ProductStock.UpdatedBy + " " + item.ProductStock.LastUpdatedDate : item.Product.LastModifiedBy + " " + item.Product.LastModifiedDate;
                        cmdGetData.Parameters.AddWithValue("@InvId", inv);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductStock prod = new ProductStock();
                                    prod.Product = new Product()
                                    {
                                        ProductID = Convert.ToInt16(dr["ProductId"]),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        ProductUnit = dr["unit"].ToString(),
                                        MaterialCost = Convert.ToDecimal(dr["material_cost"]),
                                        UnitsPerPack = Convert.ToInt16(dr["units_per_package"]),
                                        UnitCost = Convert.ToDecimal(dr["unit_cost"]),
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        IsManufactured = Convert.ToBoolean(dr["is_manufactured"]),
                                        IsPurchased = Convert.ToBoolean(dr["is_purchased"]),
                                        Active = Convert.ToBoolean(dr["active"]),
                                        IsAutoOrder = Convert.ToBoolean(dr["is_auto_order"]),
                                        LastModifiedBy = CheckNull<DateTime>(dr["last_updated_date"]) >= CheckNull<DateTime>(dr["last_modified_date"]) ? dr["updated_by"].ToString() + " " + CheckNull<DateTime>(dr["last_updated_date"]) : dr["last_modified_by"].ToString() + " " + CheckNull<DateTime>(dr["last_modified_date"]),
                                        LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]),
                                        MinimumOrderQty = Convert.ToInt16(dr["minimum_order_qty"]),
                                        OrderInMultiplesOf = Convert.ToInt16(dr["orders_in_multiples_of"]),
                                        SafetyStockQty = Convert.ToInt32(dr["safety_stock_qty"]),
                                        OrderPoint = Convert.ToInt32(dr["order_point"]),
                                        Category = new Category() { CategoryID = Convert.ToInt16(dr["CategoryID"]), CategoryName = dr["category_name"].ToString() },
                                        CommodityCode = dr["commodity_code"].ToString(),
                                        TimeStamp = Convert.ToBase64String(dr["ProdTimeStamp"] as byte[])
                                    };
                                    prod.SupplierProduct = new SupplierProduct() { Supplier = new Supplier() { SupplierID = CheckNull<int>(dr["SupplierID"]), SupplierCode = CheckNull<string>(dr["supplier_code"]), SupplierName = CheckNull<string>(dr["supplier_name"]) }, LeadTime = CheckNull<int>(dr["lead_time"]), TimeStamp = Convert.ToBase64String(dr["SupTimeStamp"] as byte[]) };
                                    prod.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                    prod.LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]);
                                    prod.UpdatedBy = dr["updated_by"].ToString();
                                    prod.TotalSupply = Convert.ToDecimal(dr["ReceivedQty"]) < Convert.ToDecimal(dr["TotalSupply"]) ? Convert.ToDecimal(dr["TotalSupply"]) - Convert.ToDecimal(dr["ReceivedQty"]) : Convert.ToDecimal(dr["TotalSupply"]);
                                    prod.ProjectedAvailable = Convert.ToDecimal(dr["qty_available"]) + prod.TotalSupply;
                                    prod.QtyOnHold = Convert.ToDecimal(dr["QTY_RESERVED"]);
                                    prod.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockID"]), StockName = dr["stock_name"].ToString() };
                                    prodColl.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;

        }

        public static ProductStock GetSelectedProductStock(int inv,int prodId)
        {
            ProductStock prod = new ProductStock();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT  Products.id AS ProductId,Category.id AS CategoryID,Category.category_name,Products.commodity_code,Products.product_code,Products.product_description,Products.unit,Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.is_manufactured,Products.is_purchased,Products.active,Products.last_modified_by,Products.last_modified_date,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point,Products.is_auto_order,Products.time_stamp AS ProdTimeStamp, " +
                                                                  "ProductStock.id AS ProductStockID,ProductStock.qty_available,ProductStock.last_updated_date,ProductStock.updated_by,ProductStock.updated_by, " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.order_qty) " +
                                                                  "	  FROM PurchasingOrderItems " +
                                                                  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no " +
                                                                  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS TotalSupply,  " +
                                                                  "StockLocation.id AS StockID,StockLocation.stock_name,  " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.received_qty) " +
																  "	  FROM PurchasingOrderItems  " +
																  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no  " +
																  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS ReceivedQty, " +
                                                                  "ISNULL((SELECT SUM(ProductStockReserved.qty_reserved) " +
                                                                  "		  FROM SalesOrder " +
                                                                  "		  INNER JOIN ProductStockReserved ON SalesOrder.sales_no = ProductStockReserved.sales_no " +
                                                                  "		  WHERE ProductStockReserved.product_id = Products.id AND ProductStockReserved.stock_location_id=StockLocation.id ),0) AS QTY_RESERVED, " +
                                                                  "SupplierProduct.lead_time,SupplierProduct.time_stamp AS SupTimeStamp,   " +
                                                                  "Supplier.id AS SupplierID,Supplier.supplier_code,Supplier.Supplier_name  " +
                                                                  "FROM Products  " +
                                                                  "INNER JOIN Category ON Products.category_id = Category.id  " +
                                                                  "INNER JOIN ProductStock ON Products.id = ProductStock.product_id  " +
                                                                  "LEFT JOIN SupplierProduct ON Products.id = SupplierProduct.product_id  " +
                                                                  "LEFT JOIN Supplier ON SupplierProduct.supplier_id = Supplier.id  " +
                                                                  "INNER JOIN StockLocation ON ProductStock.stock_location_id = StockLocation.id  " +
                                                                  "WHERE  Products.id =@ProdId AND ProductStock.stock_location_id = @InvId " +
                                                                  "ORDER BY StockLocation.id, Products.product_code", conn))
                    {

                        //item.Product.LastModifiedBy = item.ProductStock.LastUpdatedDate >= item.Product.LastModifiedDate ? item.ProductStock.UpdatedBy + " " + item.ProductStock.LastUpdatedDate : item.Product.LastModifiedBy + " " + item.Product.LastModifiedDate;
                        cmdGetData.Parameters.AddWithValue("@InvId", inv);
                        cmdGetData.Parameters.AddWithValue("@ProdId", prodId);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    prod.Product = new Product()
                                    {
                                        ProductID = Convert.ToInt16(dr["ProductId"]),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        ProductUnit = dr["unit"].ToString(),
                                        MaterialCost = Convert.ToDecimal(dr["material_cost"]),
                                        UnitsPerPack = Convert.ToInt16(dr["units_per_package"]),
                                        UnitCost = Convert.ToDecimal(dr["unit_cost"]),
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        IsManufactured = Convert.ToBoolean(dr["is_manufactured"]),
                                        IsPurchased = Convert.ToBoolean(dr["is_purchased"]),
                                        Active = Convert.ToBoolean(dr["active"]),
                                        IsAutoOrder = Convert.ToBoolean(dr["is_auto_order"]),
                                        LastModifiedBy = CheckNull<DateTime>(dr["last_updated_date"]) >= CheckNull<DateTime>(dr["last_modified_date"]) ? dr["updated_by"].ToString() + " " + CheckNull<DateTime>(dr["last_updated_date"]) : dr["last_modified_by"].ToString() + " " + CheckNull<DateTime>(dr["last_modified_date"]),
                                        LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]),
                                        MinimumOrderQty = Convert.ToInt16(dr["minimum_order_qty"]),
                                        OrderInMultiplesOf = Convert.ToInt16(dr["orders_in_multiples_of"]),
                                        SafetyStockQty = Convert.ToInt32(dr["safety_stock_qty"]),
                                        OrderPoint = Convert.ToInt32(dr["order_point"]),
                                        Category = new Category() { CategoryID = Convert.ToInt16(dr["CategoryID"]), CategoryName = dr["category_name"].ToString() },
                                        CommodityCode = dr["commodity_code"].ToString(),
                                        TimeStamp = Convert.ToBase64String(dr["ProdTimeStamp"] as byte[])
                                    };
                                    prod.SupplierProduct = new SupplierProduct() { Supplier = new Supplier() { SupplierID = CheckNull<int>(dr["SupplierID"]), SupplierCode = CheckNull<string>(dr["supplier_code"]), SupplierName = CheckNull<string>(dr["supplier_name"]) }, LeadTime = CheckNull<int>(dr["lead_time"]), TimeStamp = Convert.ToBase64String(dr["SupTimeStamp"] as byte[]) };
                                    prod.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                    prod.LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]);
                                    prod.UpdatedBy = dr["updated_by"].ToString();
                                    prod.TotalSupply = Convert.ToDecimal(dr["ReceivedQty"]) < Convert.ToDecimal(dr["TotalSupply"]) ? Convert.ToDecimal(dr["TotalSupply"]) - Convert.ToDecimal(dr["ReceivedQty"]) : Convert.ToDecimal(dr["TotalSupply"]);
                                    prod.ProjectedAvailable = Convert.ToDecimal(dr["qty_available"]) + prod.TotalSupply;
                                    prod.QtyOnHold = Convert.ToDecimal(dr["QTY_RESERVED"]);
                                    prod.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockID"]), StockName = dr["stock_name"].ToString() };
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading product stock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prod;

        }

        public static List<Supplier> GetAllSuppliers(bool active)
        {
            List<Supplier> suppliers = new List<Supplier>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT  * FROM Supplier " +
                                                                  "WHERE active = @Active ORDER BY supplier_name", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@Active", active);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Supplier s = new Supplier();
                                    s.SupplierID = Convert.ToInt16(dr["id"]);
                                    s.SupplierCode = dr["supplier_code"].ToString();
                                    s.SupplierName = dr["supplier_name"].ToString();
                                    s.SupplierAddress = dr["supplier_address"].ToString();
                                    s.SupplierSuburb = dr["supplier_suburb"].ToString();
                                    s.SupplierState = dr["supplier_state"].ToString();
                                    s.SupplierCountry = dr["supplier_country"].ToString();
                                    s.SupplierTelephone = dr["supplier_telephone"].ToString();
                                    s.SupplierFax = dr["supplier_fax"].ToString();
                                    s.SupplierEmail = dr["supplier_email"].ToString();
                                    s.SupplierWebUrl = dr["supplier_web_url"].ToString();
                                    s.Designation1 = dr["designation1"].ToString();
                                    s.FirstName1 = dr["first_name1"].ToString();
                                    s.LastName1 = dr["last_name1"].ToString();
                                    s.Telephone1 = dr["telephone1"].ToString();
                                    s.Mobile1 = dr["mobile1"].ToString();
                                    s.Email1 = dr["email1"].ToString();
                                    s.Fax1 = dr["fax1"].ToString();
                                    s.Designation2 = dr["designation2"].ToString();
                                    s.FirstName2 = dr["first_name2"].ToString();
                                    s.LastName2 = dr["last_name2"].ToString();
                                    s.Telephone2 = dr["telephone2"].ToString();
                                    s.Mobile2 = dr["mobile2"].ToString();
                                    s.Email2 = dr["email2"].ToString();
                                    s.Fax2 = dr["fax2"].ToString();
                                    s.Designation3 = dr["designation3"].ToString();
                                    s.FirstName3 = dr["first_name3"].ToString();
                                    s.LastName3 = dr["last_name3"].ToString();
                                    s.Telephone3 = dr["telephone3"].ToString();
                                    s.Mobile3 = dr["mobile3"].ToString();
                                    s.Email3 = dr["email3"].ToString();
                                    s.Fax3 = dr["fax3"].ToString();
                                    s.Active = Convert.ToBoolean(dr["active"]);
                                    s.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    suppliers.Add(s);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return suppliers;

        }

        public static Tuple<int, string, SupplierProduct> UpdateProductStock(ProductStock productStock)
        {
            int res = 0;
            string str = string.Empty;
            string supProdTimeStamp = string.Empty;
            SupplierProduct sp = new SupplierProduct();
            sp.Supplier = new Supplier();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateProduct = new SqlCommand("UPDATE Products SET product_code = @ProductCode,product_description=@ProductDescription,unit=@Unit,commodity_code=@CommodityCode,material_cost=@MaterialCost,unit_cost=@UnitCost,unit_price=@UnitPrice,category_id=@CategoryID,active=@Inactive,is_manufactured=@Manufactured,is_purchased=@IsPurchased,is_auto_order=@AutoOrder,units_per_package=@UnitsPerPack,order_point=@OrderPoint,safety_stock_qty=@SafetyStockQty,minimum_order_qty=@MiniOrderQty,orders_in_multiples_of=@OrdersInMultiplesOf " +
                                                                "WHERE id = @ProdID AND (product_code <> @ProductCode OR product_description <> @ProductDescription OR unit <> @Unit OR commodity_code <> @CommodityCode OR material_cost <> @MaterialCost OR unit_cost <> @UnitCost OR unit_price <> @UnitPrice OR category_id <> @CategoryID OR active <> @Inactive OR is_manufactured <> @Manufactured OR is_purchased <> @IsPurchased OR is_auto_order <> @AutoOrder OR units_per_package <> @UnitsPerPack OR order_point <> @OrderPoint OR safety_stock_qty <> @SafetyStockQty OR minimum_order_qty <> @MiniOrderQty OR orders_in_multiples_of <> @OrdersInMultiplesOf)", conn);

                SqlCommand cmdUpdateProductDate = new SqlCommand("UPDATE Products SET last_modified_by = @LastModifiedBy,last_modified_date=@LastModifiedDate " +
                                                                 "WHERE id = @ProdID", conn);

                SqlCommand cmdGetSupplierProductTimeStamp = new SqlCommand("SELECT time_stamp FROM SupplierProduct " +
                                                                           "WHERE product_id = @ProdID", conn);

                SqlCommand cmdGetNewSupplier = new SqlCommand("SELECT Supplier.id,Supplier.supplier_name,SupplierProduct.lead_time,SupplierProduct.time_stamp " +
                                                              "FROM Supplier " +
                                                              "INNER JOIN SupplierProduct ON Supplier.id = SupplierProduct.supplier_id " +
                                                              "WHERE SupplierProduct.product_id=35", conn);           

                SqlCommand cmdInsertUpdateSupplierProduct = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SupplierProduct " +
                                                                           "WHERE product_id = @ProdID) " +
                                                                           "INSERT INTO SupplierProduct(supplier_id,product_id,lead_time) VALUES(@SupID,@ProdID,@LeadTime) " +
                                                                           "ELSE " +
                                                                           "UPDATE SupplierProduct SET lead_time = @LeadTime,supplier_id= @SupID " +
                                                                           "WHERE product_id = @ProdID AND (lead_time <> @LeadTime OR supplier_id <> @SupID)", conn);

                SqlCommand cmdGetDate = new SqlCommand("SELECT Products.last_modified_by,Products.last_modified_date,ProductStock.last_updated_date,ProductStock.updated_by " +
                                                       "FROM Products " +
                                                       "INNER JOIN ProductStock ON Products.id = ProductStock.product_id " +
                                                       "WHERE Products.id=@ProdID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    //Check if supplier has changed
                    cmdGetSupplierProductTimeStamp.Transaction = trans;
                    cmdGetSupplierProductTimeStamp.Parameters.AddWithValue("@ProdID", productStock.Product.ProductID);
                    using (SqlDataReader dr = cmdGetSupplierProductTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                supProdTimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]); ;
                            }
                        }
                    }

                    if (productStock.SupplierProduct.TimeStamp != supProdTimeStamp)
                    {
                        res = 2;
                        //Get new supplier for the product
                        cmdGetNewSupplier.Transaction = trans;
                        cmdGetNewSupplier.Parameters.AddWithValue("@ProdID", productStock.Product.ProductID);
                        using (SqlDataReader dr = cmdGetNewSupplier.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    sp.LeadTime = Convert.ToInt16(dr["lead_time"]);
                                    sp.Supplier.SupplierID = Convert.ToInt16(dr["id"]);
                                    sp.Supplier.SupplierName = dr["supplier_name"].ToString();
                                    sp.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                }
                            }
                        }

                    }
                    else
                    {
                        cmdUpdateProduct.Transaction = trans;
                        cmdUpdateProduct.Parameters.AddWithValue("@ProdID", productStock.Product.ProductID);
                        cmdUpdateProduct.Parameters.AddWithValue("@ProductCode", productStock.Product.ProductCode);
                        cmdUpdateProduct.Parameters.AddWithValue("@ProductDescription", productStock.Product.ProductDescription);
                        cmdUpdateProduct.Parameters.AddWithValue("@Unit", productStock.Product.ProductUnit);
                        cmdUpdateProduct.Parameters.AddWithValue("@CommodityCode", productStock.Product.CommodityCode);
                        cmdUpdateProduct.Parameters.AddWithValue("@CategoryID", productStock.Product.Category.CategoryID);
                        cmdUpdateProduct.Parameters.AddWithValue("@MaterialCost", productStock.Product.MaterialCost);
                        cmdUpdateProduct.Parameters.AddWithValue("@UnitCost", productStock.Product.UnitCost);
                        cmdUpdateProduct.Parameters.AddWithValue("@UnitPrice", productStock.Product.UnitPrice);
                        cmdUpdateProduct.Parameters.AddWithValue("@Inactive", productStock.Product.Active);
                        cmdUpdateProduct.Parameters.AddWithValue("@Manufactured", productStock.Product.IsManufactured);
                        cmdUpdateProduct.Parameters.AddWithValue("@IsPurchased", productStock.Product.IsPurchased);
                        cmdUpdateProduct.Parameters.AddWithValue("@AutoOrder", productStock.Product.IsAutoOrder);
                        cmdUpdateProduct.Parameters.AddWithValue("@UnitsPerPack", productStock.Product.UnitsPerPack);
                        cmdUpdateProduct.Parameters.AddWithValue("@OrderPoint", productStock.Product.OrderPoint);
                        cmdUpdateProduct.Parameters.AddWithValue("@SafetyStockQty", productStock.Product.SafetyStockQty);
                        cmdUpdateProduct.Parameters.AddWithValue("@MiniOrderQty", productStock.Product.MinimumOrderQty);
                        cmdUpdateProduct.Parameters.AddWithValue("@OrdersInMultiplesOf", productStock.Product.OrderInMultiplesOf);
                        int prodRows = cmdUpdateProduct.ExecuteNonQuery();

                        cmdInsertUpdateSupplierProduct.Transaction = trans;
                        cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@ProdID", productStock.Product.ProductID);
                        cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@SupID", productStock.SupplierProduct.Supplier.SupplierID);
                        cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@LeadTime", productStock.SupplierProduct.LeadTime);
                        int supProdRows = cmdInsertUpdateSupplierProduct.ExecuteNonQuery();

                        if (prodRows > 0 || supProdRows > 0)
                        {                            
                            cmdUpdateProductDate.Transaction = trans;
                            cmdUpdateProductDate.Parameters.AddWithValue("@ProdID", productStock.Product.ProductID);
                            cmdUpdateProductDate.Parameters.AddWithValue("@LastModifiedBy", productStock.UpdatedBy);
                            cmdUpdateProductDate.Parameters.AddWithValue("@LastModifiedDate", DateTime.Now);
                            int r = cmdUpdateProductDate.ExecuteNonQuery();
                            if (r > 0)
                            {
                                cmdGetDate.Transaction = trans;
                                cmdGetDate.Parameters.AddWithValue("@ProdID", productStock.Product.ProductID);
                                using (SqlDataReader dr = cmdGetDate.ExecuteReader())
                                {
                                    if (dr != null)
                                    {
                                        while (dr.Read())
                                        {
                                            str = Convert.ToDateTime(dr["last_updated_date"]) >= Convert.ToDateTime(dr["last_modified_date"]) ? dr["updated_by"].ToString() + " " + Convert.ToDateTime(dr["last_updated_date"]) : dr["last_modified_by"].ToString() + " " + Convert.ToDateTime(dr["last_modified_date"]);
                                        }
                                    }
                                }
                                res = 1;
                            }                            
                        }
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {

                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return Tuple.Create(res, str, sp);
        }

        public static ObservableCollection<ProductStockMaintenance> GetProductInventoryInfo(string stkLocation, string productSource)
        {
            string editButtonVisibility = "Visible";
            string str = string.Empty;
            if (stkLocation == "QLD")
            {
                str = " ProductStock.stock_location_id = 1 ";
            }
            else if (stkLocation == "NSW")
            {
                str = " ProductStock.stock_location_id = 2 ";
            }
            else if (stkLocation == "All")
            {
                str = " ProductStock.stock_location_id = 1 OR ProductStock.stock_location_id = 2 ";
            }

            if (productSource == "Purchased")
            {
                str += " AND Products.is_purchased = 'True' AND Products.is_manufactured = 'False' ";
            }
            else if (productSource == "Manufactured")
            {
                str += " AND Products.is_purchased = 'False' AND Products.is_manufactured = 'True' ";
            }
            else if (productSource == "All")
            {
                str += " AND (Products.is_purchased = 'True' OR Products.is_manufactured = 'True') ";
            }

            if (UserData.UserPrivilages != null)
            {
                foreach (var item in UserData.UserPrivilages)
                {
                    if (item.Area.Trim() == "Product_Maintenance_Product_Cost")
                    {
                       
                            editButtonVisibility = item.Visibility;
                      
                        break;
                    }
                }
            }

            ObservableCollection<ProductStockMaintenance> psmList = new ObservableCollection<ProductStockMaintenance>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id AS ProductId,Products.commodity_code,Products.product_code,Products.product_description,Products.unit,Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.is_manufactured,Products.is_purchased,Products.active,Products.last_modified_by,Products.last_modified_date,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point, " +
                                                                  "ProductStock.id AS ProductStockID,ProductStock.qty_available,ProductStock.last_updated_date,ProductStock.updated_by,ProductStock.time_stamp, " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.order_qty) " +
                                                                  "		  FROM PurchasingOrderItems " +
                                                                  "		  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no " +
                                                                  "		  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS TotalSupply,  " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.received_qty) " +
                                                                  "	  FROM PurchasingOrderItems  " +
                                                                  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no  " +
                                                                  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS ReceivedQty, " +
                                                                  "ISNULL((SELECT SUM(ProductStockReserved.qty_reserved) " +
                                                                  "		  FROM SalesOrder " +
                                                                  "		  INNER JOIN ProductStockReserved ON SalesOrder.sales_no = ProductStockReserved.sales_no " +
                                                                  "		  WHERE ProductStockReserved.product_id = Products.id AND ProductStockReserved.stock_location_id=StockLocation.id ),0) AS QTY_RESERVED, " +
                                                                  "StockLocation.id AS StockID,StockLocation.stock_name  " +
                                                                  "FROM Products   " +
                                                                  "INNER JOIN ProductStock ON Products.id = ProductStock.product_id   " +
                                                                  "INNER JOIN StockLocation ON ProductStock.stock_location_id = StockLocation.id   " +
                                                                  "WHERE " + str + "" +
                                                                  "ORDER BY StockLocation.id, Products.product_code", conn))
                    {
                        //cmdGetData.Parameters.AddWithValue("@Location", location);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    decimal totalSupply = Convert.ToDecimal(dr["ReceivedQty"]) < Convert.ToDecimal(dr["TotalSupply"]) ? Convert.ToDecimal(dr["TotalSupply"]) - Convert.ToDecimal(dr["ReceivedQty"]) : Convert.ToDecimal(dr["TotalSupply"]);
                                    ProductStockMaintenance psm = new ProductStockMaintenance();
                                    psm.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockID"]), StockName = dr["stock_name"].ToString() };
                                    psm.ViewEditButtonVisibility = editButtonVisibility;
                                    psm.Product = new Product()
                                    {
                                        ProductID = Convert.ToInt16(dr["ProductId"]),
                                        CommodityCode = dr["commodity_code"].ToString(),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        ProductUnit = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(dr["unit"].ToString().ToLower()),
                                        UnitCost = Convert.ToDecimal(dr["unit_cost"]),
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        IsManufactured = Convert.ToBoolean(dr["is_manufactured"]),
                                        IsPurchased = Convert.ToBoolean(dr["is_purchased"]),
                                        Active = Convert.ToBoolean(dr["active"]),
                                        LastModifiedBy = dr["last_modified_by"].ToString(),
                                        LastModifiedDate = CheckNull<DateTime>(dr["last_modified_date"]) > CheckNull<DateTime>(dr["last_updated_date"]) ? CheckNull<DateTime>(dr["last_modified_date"]) : CheckNull<DateTime>(dr["last_updated_date"]),
                                        UnitsPerPack = Convert.ToDecimal(dr["units_per_package"]),
                                        MaterialCost = Convert.ToDecimal(dr["material_cost"]),
                                        MinimumOrderQty = Convert.ToDecimal(dr["minimum_order_qty"]),
                                        OrderInMultiplesOf = Convert.ToDecimal(dr["orders_in_multiples_of"]),
                                        SafetyStockQty = Convert.ToDecimal(dr["safety_stock_qty"]),
                                        OrderPoint = Convert.ToDecimal(dr["order_point"])
                                    };
                                    psm.ProductStock = new ProductStock() 
                                    { 
                                        QtyAvailable = Convert.ToDecimal(dr["qty_available"]), 
                                        LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]), 
                                        UpdatedBy = dr["updated_by"].ToString(),
                                        TotalSupply = totalSupply,
                                        ProjectedAvailable = Convert.ToDecimal(dr["qty_available"]) + totalSupply,
                                        QtyOnHold = Convert.ToDecimal(dr["QTY_RESERVED"]), 
                                        TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[])
                                    };
                                    
                                    psmList.Add(psm);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return psmList;
        }


        public static ProductStockMaintenance GetProductInventoryInfoByStockIDProdID(int stockId,int productID)
        {
            ProductStockMaintenance psm = new ProductStockMaintenance();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id AS ProductId,Products.commodity_code,Products.product_code,Products.product_description,Products.unit,Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.is_manufactured,Products.is_purchased,Products.active,Products.last_modified_by,Products.last_modified_date,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point, " +
                                                                  "ProductStock.id AS ProductStockID,ProductStock.qty_available,ProductStock.last_updated_date,ProductStock.updated_by,ProductStock.time_stamp, " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.order_qty) " +
                                                                  "		  FROM PurchasingOrderItems " +
                                                                  "		  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no " +
                                                                  "		  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS TotalSupply,  " +
                                                                  "ISNULL((SELECT SUM(PurchasingOrderItems.received_qty) " +
                                                                  "	  FROM PurchasingOrderItems  " +
                                                                  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no  " +
                                                                  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending'),0) AS ReceivedQty, " +
                                                                  "ISNULL((SELECT SUM(ProductStockReserved.qty_reserved) " +
                                                                  "		  FROM SalesOrder " +
                                                                  "		  INNER JOIN ProductStockReserved ON SalesOrder.sales_no = ProductStockReserved.sales_no " +
                                                                  "		  WHERE ProductStockReserved.product_id = Products.id AND ProductStockReserved.stock_location_id=StockLocation.id ),0) AS QTY_RESERVED, " +
                                                                  "StockLocation.id AS StockID,StockLocation.stock_name, " +
                                                                  "SupplierProduct.lead_time,SupplierProduct.time_stamp AS SupTimeStamp, " +
                                                                  "Supplier.id AS SupplierID,Supplier.supplier_code,Supplier.Supplier_name  " +
                                                                  "FROM Products   " +
                                                                  "INNER JOIN ProductStock ON Products.id = ProductStock.product_id   " +
                                                                  "INNER JOIN StockLocation ON ProductStock.stock_location_id = StockLocation.id " +
                                                                  "LEFT JOIN SupplierProduct ON Products.id = SupplierProduct.product_id  " +
                                                                  "LEFT JOIN Supplier ON SupplierProduct.supplier_id = Supplier.id  " +
                                                                  "WHERE ProductStock.stock_location_id = @StockId AND Products.id=@ProductID " +
                                                                  "ORDER BY StockLocation.id, Products.product_code", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@StockId", stockId);
                        cmdGetData.Parameters.AddWithValue("@ProductID", productID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    decimal totalSupply = Convert.ToDecimal(dr["ReceivedQty"]) < Convert.ToDecimal(dr["TotalSupply"]) ? Convert.ToDecimal(dr["TotalSupply"]) - Convert.ToDecimal(dr["ReceivedQty"]) : Convert.ToDecimal(dr["TotalSupply"]);
                                   
                                    psm.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockID"]), StockName = dr["stock_name"].ToString() };
                                    psm.Product = new Product()
                                    {
                                        ProductID = Convert.ToInt16(dr["ProductId"]),
                                        CommodityCode = dr["commodity_code"].ToString(),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        ProductUnit = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(dr["unit"].ToString().ToLower()),
                                        UnitCost = Convert.ToDecimal(dr["unit_cost"]),
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        IsManufactured = Convert.ToBoolean(dr["is_manufactured"]),
                                        IsPurchased = Convert.ToBoolean(dr["is_purchased"]),
                                        Active = Convert.ToBoolean(dr["active"]),
                                        LastModifiedBy = dr["last_modified_by"].ToString(),
                                        LastModifiedDate = CheckNull<DateTime>(dr["last_modified_date"]) > CheckNull<DateTime>(dr["last_updated_date"]) ? CheckNull<DateTime>(dr["last_modified_date"]) : CheckNull<DateTime>(dr["last_updated_date"]),
                                        UnitsPerPack = Convert.ToDecimal(dr["units_per_package"]),
                                        MaterialCost = Convert.ToDecimal(dr["material_cost"]),
                                        MinimumOrderQty = Convert.ToDecimal(dr["minimum_order_qty"]),
                                        OrderInMultiplesOf = Convert.ToDecimal(dr["orders_in_multiples_of"]),
                                        SafetyStockQty = Convert.ToDecimal(dr["safety_stock_qty"]),
                                        OrderPoint = Convert.ToDecimal(dr["order_point"])
                                        
                                    };
                                    psm.ProductStock = new ProductStock()
                                    {
                                        QtyAvailable = Convert.ToDecimal(dr["qty_available"]),
                                        LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]),
                                        UpdatedBy = dr["updated_by"].ToString(),
                                        TotalSupply = totalSupply,
                                        ProjectedAvailable = Convert.ToDecimal(dr["qty_available"]) + totalSupply,
                                        QtyOnHold = Convert.ToDecimal(dr["QTY_RESERVED"]),
                                        TimeStamp  = Convert.ToBase64String(dr["time_stamp"] as byte[]),
                                        SupplierProduct = new SupplierProduct() { Supplier = new Supplier() { SupplierID = CheckNull<int>(dr["SupplierID"]), SupplierCode = CheckNull<string>(dr["supplier_code"]), SupplierName = CheckNull<string>(dr["supplier_name"]) }, LeadTime = CheckNull<int>(dr["lead_time"]), TimeStamp = Convert.ToBase64String(dr["SupTimeStamp"] as byte[]) }
                                    };
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return psm;
        }

        public static ObservableCollection<ProductTransactions> GetProductTransactions(string where)
        {
            
            ObservableCollection<ProductTransactions> ptList = new ObservableCollection<ProductTransactions>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ProductTransactions.id,ProductTransactions.transaction_date,ProductTransactions.qty,ProductTransactions.type,ProductTransactions.reason,ProductTransactions.sales_no,ProductTransactions.shipping_no,ProductTransactions.purchase_no,ProductTransactions.work_order_no,ProductTransactions.product_id,ProductTransactions.line_no,ProductTransactions.added_by, " +
                                                                  "Products.product_code, Products.category_id, Products.commodity_code, Category.category_name " +
                                                                  "FROM ProductTransactions " +
                                                                  "INNER JOIN Products ON ProductTransactions.product_id = Products.id " +
                                                                  "INNER JOIN Category ON Products.category_id = Category.id " +
                                                                  where +
                                                                  "ORDER BY ProductTransactions.transaction_date DESC", conn))
                    {                        
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductTransactions pt = new ProductTransactions();
                                    pt.ID = Convert.ToInt32(dr["id"]);
                                    pt.TransactionDate = Convert.ToDateTime(dr["transaction_date"]);
                                    pt.Type = dr["type"].ToString();
                                    pt.Qty = dr["qty"].ToString();
                                    pt.Reason = dr["reason"].ToString();
                                    pt.SalesNo = Convert.ToInt16(dr["sales_no"]);
                                    pt.ShippingNo = Convert.ToInt16(dr["shipping_no"]);
                                    pt.PurchaseNo = Convert.ToInt16(dr["purchase_no"]);
                                    pt.WorkOrderNo = Convert.ToInt16(dr["work_order_no"]);
                                    pt.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), CommodityCode = dr["commodity_code"].ToString(), Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]), CategoryName = dr["category_name"].ToString() } };
                                    pt.LineNo = Convert.ToInt16(dr["line_no"]);
                                    pt.AddedBy = dr["added_by"].ToString();

                                    ptList.Add(pt);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return ptList;
        }

        public static int UpdateSupplier(Supplier supplier, string userName)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdateSupplier = new SqlCommand("UPDATE Supplier SET supplier_name= @CompanyName,supplier_address=@CompanyAddress,supplier_suburb=@CompanyCity,supplier_state=@CompanyState,supplier_postcode=@CompanyPostcode,supplier_country=@CompanyCountry,supplier_email = @CompanyEmail,supplier_telephone=@CompanyTelephone,supplier_fax=@CompanyFax,supplier_web_url=@WebURL,designation1=@Designation1,first_name1=@FirstName1,last_name1=@LastName1,telephone1=@Telephone1,mobile1=@Mobile1,fax1=@Fax1,email1=@Email1,designation2=@Designation2,first_name2=@FirstName2,last_name2=@LastName2,telephone2=@Telephone2,mobile2=@Mobile2,fax2=@Fax2,email2=@Email2,designation3=@Designation3,first_name3=@FirstName3,last_name3=@LastName3,telephone3=@Telephone3,mobile3=@Mobile3,fax3=@Fax3,email3=@Email3,active=@Active " +
                                                              "WHERE id=@CustomerID AND EXISTS " +
                                                              "( " +
                                                              "SELECT supplier_name,supplier_address,supplier_suburb,supplier_state,supplier_postcode,supplier_country,supplier_email,supplier_telephone,supplier_fax,supplier_web_url,designation1,first_name1,last_name1,telephone1,mobile1,fax1,email1,designation2,first_name2,last_name2,telephone2,mobile2,fax2,email2,designation3,first_name3,last_name3,telephone3,mobile3,fax3,email3,active " +
                                                              "EXCEPT " +
                                                              "SELECT supplier_name= @CompanyName,supplier_address =@CompanyAddress,supplier_suburb=@CompanyCity,supplier_state=@CompanyState,supplier_postcode=@CompanyPostcode,supplier_country=@CompanyCountry,supplier_email = @CompanyEmail,supplier_telephone=@CompanyTelephone,supplier_fax=@CompanyFax,supplier_web_url=@WebURL,designation1=@Designation1,first_name1=@FirstName1,last_name1=@LastName1,telephone1=@Telephone1,mobile1=@Mobile1,fax1=@Fax1,email1=@Email1,designation2=@Designation2,first_name2=@FirstName2,last_name2=@LastName2,telephone2=@Telephone2,mobile2=@Mobile2,fax2=@Fax2,email2=@Email2,designation3=@Designation3,first_name3=@FirstName3,last_name3=@LastName3,telephone3=@Telephone3,mobile3=@Mobile3,fax3=@Fax3,email3=@Email3,active=@Active " +
                                                              ") ", conn);


                SqlCommand cmdUpdateSupplierDateTime = new SqlCommand("UPDATE Supplier SET last_updated_by = @LastUpdatedBy,last_updated_datetime= @LastUpdatedDatetime " +
                                                                      "WHERE id = @CustomerID", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdUpdateSupplier.Transaction = trans;
                    cmdUpdateSupplier.Parameters.AddWithValue("@CustomerID", supplier.SupplierID);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyName", supplier.SupplierName);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyAddress", supplier.SupplierAddress);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyCity", supplier.SupplierSuburb);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyState", supplier.SupplierState);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyPostcode", supplier.SupplierPostCode);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyCountry", supplier.SupplierCountry);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyEmail", supplier.SupplierEmail);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyTelephone", supplier.SupplierTelephone);
                    cmdUpdateSupplier.Parameters.AddWithValue("@CompanyFax", supplier.SupplierFax);
                    cmdUpdateSupplier.Parameters.AddWithValue("@WebURL", supplier.SupplierWebUrl);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Designation1", supplier.Designation1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@FirstName1", supplier.FirstName1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@LastName1", supplier.LastName1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Telephone1", supplier.Telephone1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Mobile1", supplier.Mobile1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Fax1", supplier.Fax1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Email1", supplier.Email1);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Designation2", supplier.Designation2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@FirstName2", supplier.FirstName2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@LastName2", supplier.LastName2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Telephone2", supplier.Telephone2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Mobile2", supplier.Mobile2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Fax2", supplier.Fax2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Email2", supplier.Email2);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Designation3", supplier.Designation3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@FirstName3", supplier.FirstName3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@LastName3", supplier.LastName3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Telephone3", supplier.Telephone3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Mobile3", supplier.Mobile3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Fax3", supplier.Fax3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Email3", supplier.Email3);
                    cmdUpdateSupplier.Parameters.AddWithValue("@Active", supplier.Active);
                    int uc = cmdUpdateSupplier.ExecuteNonQuery();

                    if (uc > 0)
                    {
                        cmdUpdateSupplierDateTime.Transaction = trans;
                        cmdUpdateSupplierDateTime.Parameters.AddWithValue("@CustomerID", supplier.SupplierID);
                        cmdUpdateSupplierDateTime.Parameters.AddWithValue("@LastUpdatedBy", userName);
                        cmdUpdateSupplierDateTime.Parameters.AddWithValue("@LastUpdatedDatetime", DateTime.Now);
                        cmdUpdateSupplierDateTime.ExecuteNonQuery();

                        result = 1;
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Supplier table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static Supplier GetSupplierByProductID(int prodId)
        {
            Supplier supplier = new Supplier();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetSupplier = new SqlCommand("SELECT Products.id, SupplierProduct.supplier_id,Supplier.supplier_code,Supplier.supplier_name,Supplier.designation1,Supplier.first_name1,Supplier.last_name1,Supplier.telephone1,Supplier.mobile1,Supplier.email1,Supplier.fax1,Supplier.designation2,Supplier.first_name2,Supplier.last_name2,Supplier.telephone2,Supplier.mobile2,Supplier.email2,Supplier.fax2,Supplier.designation3,Supplier.first_name3,Supplier.last_name3,Supplier.telephone3,Supplier.mobile3,Supplier.email3,Supplier.fax3,Supplier.active,SupplierProduct.lead_time,Supplier.supplier_address,Supplier.supplier_suburb,Supplier.supplier_state,supplier.supplier_postcode " +
                                                                      "FROM Products " +
                                                                      "INNER JOIN SupplierProduct ON Products.id = SupplierProduct.product_id " +
                                                                      "INNER JOIN Supplier ON SupplierProduct.supplier_id = Supplier.id " +
                                                                      "WHERE Products.id = @ProdID", conn))
                    {
                        cmdGetSupplier.Parameters.AddWithValue("@ProdID", prodId);
                        using (SqlDataReader dr = cmdGetSupplier.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    supplier.SupplierID = Convert.ToInt16(dr["supplier_id"]);
                                    supplier.SupplierCode = dr["supplier_code"].ToString();
                                    supplier.SupplierName = dr["supplier_name"].ToString();
                                    supplier.Designation1 = dr["designation1"].ToString();
                                    supplier.FirstName1 = dr["first_name1"].ToString();
                                    supplier.LastName1 = dr["last_name1"].ToString();
                                    supplier.Telephone1 = dr["telephone1"].ToString();
                                    supplier.Mobile1 = dr["mobile1"].ToString();
                                    supplier.Email1 = dr["email1"].ToString();
                                    supplier.Fax1 = dr["fax1"].ToString();
                                    supplier.Designation2 = dr["designation2"].ToString();
                                    supplier.FirstName2 = dr["first_name2"].ToString();
                                    supplier.LastName2 = dr["last_name2"].ToString();
                                    supplier.Telephone2 = dr["telephone2"].ToString();
                                    supplier.Mobile2 = dr["mobile2"].ToString();
                                    supplier.Email2 = dr["email2"].ToString();
                                    supplier.Fax2 = dr["fax2"].ToString();
                                    supplier.Designation3 = dr["designation3"].ToString();
                                    supplier.FirstName3 = dr["first_name3"].ToString();
                                    supplier.LastName3 = dr["last_name3"].ToString();
                                    supplier.Telephone3 = dr["telephone3"].ToString();
                                    supplier.Mobile3 = dr["mobile3"].ToString();
                                    supplier.Email3 = dr["email3"].ToString();
                                    supplier.Fax3 = dr["fax3"].ToString();
                                    supplier.Active = Convert.ToBoolean(dr["active"]);
                                    supplier.LeadTime = Convert.ToInt16(dr["lead_time"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return supplier;
        }

        public static List<ProductUnit> GetAllUnitsActive(bool isActive)
        {
            List<ProductUnit> unitList = new List<ProductUnit>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Units " +
                                                                "WHERE is_active=@Active ORDER BY unit", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@Active", isActive);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductUnit u = new ProductUnit();
                                    u.ID = Convert.ToInt16(dr["id"]);
                                    u.UnitName = dr["unit"].ToString();
                                    u.IsActive = Convert.ToBoolean(dr["is_active"]);
                                    unitList.Add(u);
                                }
                            }
                        }
                        cmdGetId.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return unitList;
        }

        public static decimal GetQtyReserved(int stockLocationId, int productId)
        {
            decimal totReserved = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ISNULL(SUM (qty_reserved),0) FROM ProductStockReserved " +
                                                                  "WHERE stock_location_id=@Location AND product_id=@ProductID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@Location", stockLocationId);
                        cmdGetData.Parameters.AddWithValue("@ProductID", productId);
                        object result = cmdGetData.ExecuteScalar();
                        totReserved = Convert.ToDecimal(result);
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return totReserved;
        }

        public static List<Supplier> GetAllSuppliers()
        {
            List<Supplier> supplierList = new List<Supplier>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetSupplier = new SqlCommand("SELECT * FROM Supplier " +
                                                                      "WHERE active='True' " +
                                                                      "ORDER BY supplier_name", conn))
                    {
                        using (SqlDataReader dr = cmdGetSupplier.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Supplier s = new Supplier();
                                    s.SupplierID = Convert.ToInt16(dr["id"]);
                                    s.SupplierCode = dr["supplier_code"].ToString();
                                    s.SupplierName = dr["supplier_name"].ToString();
                                    s.SupplierAddress = dr["supplier_address"].ToString();
                                    s.SupplierSuburb = dr["supplier_suburb"].ToString();
                                    s.SupplierPostCode = dr["supplier_postcode"].ToString();
                                    s.SupplierState = dr["supplier_state"].ToString();
                                    s.SupplierCountry = dr["supplier_country"].ToString();
                                    s.SupplierTelephone = dr["supplier_telephone"].ToString();
                                    s.SupplierFax = dr["supplier_fax"].ToString();
                                    s.SupplierEmail = dr["supplier_email"].ToString();
                                    s.SupplierWebUrl = dr["supplier_web_url"].ToString();
                                    s.Designation1 = dr["designation1"].ToString();
                                    s.FirstName1 = dr["first_name1"].ToString();
                                    s.LastName1 = dr["last_name1"].ToString();
                                    s.Telephone1 = dr["telephone1"].ToString();
                                    s.Mobile1 = dr["mobile1"].ToString();
                                    s.Email1 = dr["email1"].ToString();
                                    s.Fax1 = dr["fax1"].ToString();
                                    s.Designation2 = dr["designation2"].ToString();
                                    s.FirstName2 = dr["first_name2"].ToString();
                                    s.LastName2 = dr["last_name2"].ToString();
                                    s.Telephone2 = dr["telephone2"].ToString();
                                    s.Mobile2 = dr["mobile2"].ToString();
                                    s.Email2 = dr["email2"].ToString();
                                    s.Fax2 = dr["fax2"].ToString();
                                    s.Designation3 = dr["designation3"].ToString();
                                    s.FirstName3 = dr["first_name3"].ToString();
                                    s.LastName3 = dr["last_name3"].ToString();
                                    s.Telephone3 = dr["telephone3"].ToString();
                                    s.Mobile3 = dr["mobile3"].ToString();
                                    s.Email3 = dr["email3"].ToString();
                                    s.Fax3 = dr["fax3"].ToString();
                                    s.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    s.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    s.Active = Convert.ToBoolean(dr["active"]);
                                    supplierList.Add(s);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return supplierList;
        }

        public static List<StockLocation> GetStockLocations()
        {
            List<StockLocation> stockList = new List<StockLocation>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM StockLocation", conn))
                    {
                        conn.Open();
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    StockLocation sl = new StockLocation();
                                    sl.ID = Convert.ToInt16(dr["id"]);
                                    sl.StockName = dr["stock_name"].ToString();
                                    sl.Address = dr["address"].ToString();
                                    sl.Suburb = dr["suburb"].ToString();
                                    sl.State = dr["state"].ToString();
                                    stockList.Add(sl);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return stockList;
        }

              


        public static int UpdateProductAndStock(UpdateProductViewModel upivm, ProductStock ps)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateProduct = new SqlCommand("UPDATE Products SET product_code = @Code,product_description=@Description,unit=@Unit,is_manufactured=@IsManufactured,is_purchased=@IsPurchased,material_cost=@MaterialCost,units_per_package=@UnitsPerPackage,unit_cost=@UnitCost,unit_price=@UnitPrice, minimum_order_qty=@MinOrderQty,orders_in_multiples_of=@OrderInMultiples,safety_stock_qty=@SafetyStockQty,order_point=@OrderPoint " +
                                                             "WHERE id=@ProdID AND (product_code <> @Code OR product_description <> @Description OR unit <> @Unit OR is_manufactured <> @IsManufactured OR is_purchased <> @IsPurchased OR material_cost <> @MaterialCost OR units_per_package <> @UnitsPerPackage OR unit_cost <> @UnitCost OR unit_price <> @UnitPrice OR  minimum_order_qty <> @MinOrderQty OR orders_in_multiples_of <> @OrderInMultiples OR safety_stock_qty <> @SafetyStockQty OR order_point <> @OrderPoint)", conn);

                SqlCommand cmdUpdateProductModifiedDate = new SqlCommand("UPDATE Products SET last_modified_by = @LastModifiedBy,last_modified_date=@LastModifiedDate " +
                                                                         "WHERE id=@ProdID", conn);

                SqlCommand cmdUpdateProductStock = new SqlCommand("UPDATE ProductStock SET qty_available=@QtyAvailable,total_supply=@TotalSupply " +
                                                                  "WHERE product_id=@ProdID AND stock_location_id=@StockLocationID AND (qty_available <> @QtyAvailable OR total_supply <> @TotalSupply)", conn);

                SqlCommand cmdUpdatecmdUpdateProductStockModifiedDate = new SqlCommand("UPDATE ProductStock SET updated_by = @LastModifiedBy,last_updated_date=@LastModifiedDate " +
                                                                                       "WHERE product_id=@ProdID AND stock_location_id=@StockLocationID", conn);

                //SqlCommand cmdUpdateSupplier = new SqlCommand("UPDATE Supplier SET lead_time = @LeadTime " +
                //                                              "WHERE id=@SupplierID", conn);

                SqlCommand cmdInsertUpdateSupplierProduct = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM SupplierProduct " +
                                                                           "WHERE product_id=@ProductID) " +
                                                                           "INSERT INTO SupplierProduct(supplier_id,product_id,lead_time) VALUES (@SupplierID,@ProductID,@LeadTime) " +
                                                                           "ELSE " +
                                                                           "UPDATE SupplierProduct SET supplier_id=@SupplierID,product_id=@ProductID,lead_time=@LeadTime " +
                                                                           "WHERE product_id=@ProductID AND (supplier_id <> @SupplierID OR lead_time<>@LeadTime)", conn);

                SqlCommand cmdUpdateSupplier = new SqlCommand("UPDATE Supplier SET supplier_code = @SupplierCode,supplier_name=@SupplierName,contact_name1=@ContactName1,telephone1=@Telephone1,mobile1=@Mobile1,email1=@Email1, " +
                                                              "contact_name2=@ContactName2,telephone2=@Telephone2,mobile2=@Mobile2,email2=@Email2,address=@Address,suburb=@Suburb,state=@State,post_code=@PostCode " +
                                                                                       "WHERE product_id=@ProdID AND stock_location_id=@StockLocationID", conn);

                SqlCommand cmdGetProductStock = new SqlCommand("SELECT qty_available FROM ProductStock WHERE stock_location_id=1 AND product_id=@ProdID", conn);

                SqlCommand cmdInsertProdTransactions = new SqlCommand("INSERT INTO ProductTransactions(transaction_date,qty,type,reason,sales_no,shipping_no,purchase_no,work_order_no,product_id,line_no,added_by) " +
                                                                      "VALUES (@TransactionDate,@Qty,@Type,@Reason,@SalesNo,@ShippingNo,@PurchaseNo,@WorkOrderNo,@ProductID,@LineNo,@AddedBy)", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    decimal qtyAva = 0;
                    cmdGetProductStock.Transaction = trans;
                    cmdGetProductStock.Parameters.AddWithValue("@ProdID", ps.Product.ProductID);
                    using (SqlDataReader dr = cmdGetProductStock.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                qtyAva = Convert.ToDecimal(dr["qty_available"]);

                            }
                        }
                    }

                    cmdUpdateProduct.Transaction = trans;
                    cmdUpdateProduct.Parameters.AddWithValue("@ProdID", upivm.Product.ProductID);
                    cmdUpdateProduct.Parameters.AddWithValue("@Code", upivm.Product.ProductCode);
                    cmdUpdateProduct.Parameters.AddWithValue("@Description", upivm.Product.ProductDescription);
                    cmdUpdateProduct.Parameters.AddWithValue("@Unit", upivm.SelectedUnit.UnitName);
                    cmdUpdateProduct.Parameters.AddWithValue("@IsManufactured", upivm.IsManufactured);
                    cmdUpdateProduct.Parameters.AddWithValue("@IsPurchased", upivm.IsPurchased);
                    cmdUpdateProduct.Parameters.AddWithValue("@MaterialCost", upivm.MaterialCost);
                    cmdUpdateProduct.Parameters.AddWithValue("@UnitsPerPackage", upivm.UnitsPerPack);
                    cmdUpdateProduct.Parameters.AddWithValue("@UnitCost", upivm.UnitCost);
                    cmdUpdateProduct.Parameters.AddWithValue("@UnitPrice", upivm.UnitPrice);
                    cmdUpdateProduct.Parameters.AddWithValue("@SafetyStockQty", upivm.Product.SafetyStockQty);
                    cmdUpdateProduct.Parameters.AddWithValue("@MinOrderQty", upivm.Product.MinimumOrderQty);
                    cmdUpdateProduct.Parameters.AddWithValue("@OrderPoint", upivm.Product.OrderPoint);
                    cmdUpdateProduct.Parameters.AddWithValue("@OrderInMultiples", upivm.Product.OrderInMultiplesOf);
                    int upProdRes = cmdUpdateProduct.ExecuteNonQuery();
                    int upProdStatus = 0;
                    if (upProdRes > 0)
                    {
                        cmdUpdateProductModifiedDate.Transaction = trans;
                        cmdUpdateProductModifiedDate.Parameters.AddWithValue("@ProdID", upivm.Product.ProductID);
                        cmdUpdateProductModifiedDate.Parameters.AddWithValue("@LastModifiedDate", DateTime.Now);
                        cmdUpdateProductModifiedDate.Parameters.AddWithValue("@LastModifiedBy", UserData.FirstName + " " + UserData.LastName);
                        upProdStatus = cmdUpdateProductModifiedDate.ExecuteNonQuery();
                    }

                    cmdUpdateProductStock.Transaction = trans;
                    cmdUpdateProductStock.Parameters.AddWithValue("@ProdID", ps.Product.ProductID);
                    cmdUpdateProductStock.Parameters.AddWithValue("@StockLocationID", ps.StockLocation.ID);
                    //cmdUpdateProductStock.Parameters.AddWithValue("@QtyOnHold", ps.QtyOnHold);
                    cmdUpdateProductStock.Parameters.AddWithValue("@QtyAvailable", ps.QtyAvailable);
                    cmdUpdateProductStock.Parameters.AddWithValue("@TotalSupply", ps.TotalSupply);
                    int upProdStockRes = cmdUpdateProductStock.ExecuteNonQuery();
                    int upProdStockModDate = 0;
                    if (upProdStockRes > 0)
                    {
                        string qty = string.Empty;
                        string reason = string.Empty;

                        if (qtyAva == ps.QtyAvailable)
                        {
                            qty = ps.QtyAvailable.ToString();
                            reason = "";
                        }
                        else if (qtyAva < ps.QtyAvailable)
                        {
                            qty = "+" + ps.QtyAvailable.ToString();
                            reason = "Added To Stock";
                        }
                        else if (qtyAva > ps.QtyAvailable)
                        {
                            qty = "-" + ps.QtyAvailable.ToString();
                            reason = "Deducted From Stock";
                        }

                        /**INSERT to ProductTransactions**/
                        cmdInsertProdTransactions.Transaction = trans;
                        cmdInsertProdTransactions.Parameters.AddWithValue("@TransactionDate", DateTime.Now);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@Qty", qty);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@Type", ProductTransactionsStatus.Adjustment.ToString());
                        cmdInsertProdTransactions.Parameters.AddWithValue("@Reason", reason);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@SalesNo", 0);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@ShippingNo", 0);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@PurchaseNo", 0);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@WorkOrderNo", 0);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@ProductID", upivm.Product.ProductID);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@LineNo", 0);
                        cmdInsertProdTransactions.Parameters.AddWithValue("@AddedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdInsertProdTransactions.ExecuteNonQuery();

                        cmdUpdatecmdUpdateProductStockModifiedDate.Transaction = trans;
                        cmdUpdatecmdUpdateProductStockModifiedDate.Parameters.AddWithValue("@ProdID", ps.Product.ProductID);
                        cmdUpdatecmdUpdateProductStockModifiedDate.Parameters.AddWithValue("@StockLocationID", ps.StockLocation.ID);
                        cmdUpdatecmdUpdateProductStockModifiedDate.Parameters.AddWithValue("@LastModifiedDate", ps.LastUpdatedDate);
                        cmdUpdatecmdUpdateProductStockModifiedDate.Parameters.AddWithValue("@LastModifiedBy", UserData.FirstName + " " + UserData.LastName);
                        upProdStockModDate = cmdUpdatecmdUpdateProductStockModifiedDate.ExecuteNonQuery();
                    }

                    //cmdUpdateSupplier.Transaction = trans;
                    //cmdUpdateSupplier.Parameters.AddWithValue("@SupplierID", upivm.SelectedSupplier.SupplierID);
                    //cmdUpdateSupplier.Parameters.AddWithValue("@LeadTime", upivm.Supplier.LeadTime);
                    //int upSupplier = cmdUpdateSupplier.ExecuteNonQuery();
                    int supid = 0;
                    int leadTime = 0;
                    if (upivm.SelectedSupplier == null || upivm.SelectedSupplier.SupplierID == 0 || upivm.SelectedSupplier.SupplierName == "Select")
                    {
                        supid = 0;
                        leadTime = 0;
                    }
                    else
                    {
                        supid = upivm.SelectedSupplier.SupplierID;
                        leadTime = upivm.LeadTime;
                    }

                    cmdInsertUpdateSupplierProduct.Transaction = trans;
                    cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@SupplierID", supid);
                    cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@ProductID", upivm.Product.ProductID);
                    cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@LeadTime", leadTime);
                    //cmdInsertUpdateSupplierProduct.Parameters.AddWithValue("@TimeStamp","DEFAULT");
                    int upSupProd = cmdInsertUpdateSupplierProduct.ExecuteNonQuery();

                    if (upProdStatus > 0 || upProdStockModDate > 0 || upSupProd > 0)
                    {
                        result = 1;
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static int InsertSupplier(Supplier suplier)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdCheckSupplier = new SqlCommand("SELECT COUNT(*) FROM Supplier WHERE supplier_name LIKE @CompanyName", conn);

                SqlCommand cmdInsertTemp = new SqlCommand("INSERT INTO Supplier(supplier_name,supplier_address,supplier_suburb,supplier_postcode,supplier_state,supplier_country,supplier_telephone,supplier_fax,supplier_email,supplier_web_url,designation1,first_name1,last_name1,telephone1,mobile1,fax1,email1,designation2,first_name2,last_name2,telephone2,mobile2,fax2,email2,designation3,first_name3,last_name3,telephone3,mobile3,fax3,email3,last_updated_by,last_updated_datetime,active) " +
                                                          "VALUES(@CompanyName,@CompanyAddress,@CompanySuburb,@CompanyPostcode,@CompanyState,@CompanyCountry,@CompanyTelephone,@CompanyFax,@CompanyEmail,@WebSite,@Designation1,@FirstName1,@LastName1,@Telephone1,@Mobile1,@Fax1,@Email1,@Designation2,@FirstName2,@LastName2,@Telephone2,@Mobile2,@Fax2,@Email2,@Designation3,@FirstName3,@LastName3,@Telephone3,@Mobile3,@Fax3,@Email3,@LastUpdatedBy,@LastUpdatedDatetime,@Active)", conn);





                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    cmdCheckSupplier.Transaction = trans;
                    cmdCheckSupplier.Parameters.AddWithValue("@CompanyName", suplier.SupplierName);
                    int userCount = (int)cmdCheckSupplier.ExecuteScalar();
                    if (userCount > 0)
                    {
                        result = -2;
                    }
                    else
                    {
                        cmdInsertTemp.Transaction = trans;
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyName", suplier.SupplierName);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyAddress", suplier.SupplierAddress);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanySuburb", suplier.SupplierSuburb);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyState", suplier.SupplierState);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyPostcode", suplier.SupplierPostCode);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyCountry", suplier.SupplierCountry);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyEmail", suplier.SupplierEmail);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyTelephone", suplier.SupplierTelephone);
                        cmdInsertTemp.Parameters.AddWithValue("@CompanyFax", suplier.SupplierFax);
                        cmdInsertTemp.Parameters.AddWithValue("@WebSite", suplier.SupplierWebUrl);
                        cmdInsertTemp.Parameters.AddWithValue("@WebURL", suplier.SupplierWebUrl);
                        cmdInsertTemp.Parameters.AddWithValue("@Designation1", suplier.Designation1);
                        cmdInsertTemp.Parameters.AddWithValue("@FirstName1", suplier.FirstName1);
                        cmdInsertTemp.Parameters.AddWithValue("@LastName1", suplier.LastName1);
                        cmdInsertTemp.Parameters.AddWithValue("@Telephone1", suplier.Telephone1);
                        cmdInsertTemp.Parameters.AddWithValue("@Mobile1", suplier.Mobile1);
                        cmdInsertTemp.Parameters.AddWithValue("@Fax1", suplier.Fax1);
                        cmdInsertTemp.Parameters.AddWithValue("@Email1", suplier.Email1);
                        cmdInsertTemp.Parameters.AddWithValue("@Designation2", suplier.Designation2);
                        cmdInsertTemp.Parameters.AddWithValue("@FirstName2", suplier.FirstName2);
                        cmdInsertTemp.Parameters.AddWithValue("@LastName2", suplier.LastName2);
                        cmdInsertTemp.Parameters.AddWithValue("@Telephone2", suplier.Telephone2);
                        cmdInsertTemp.Parameters.AddWithValue("@Mobile2", suplier.Mobile2);
                        cmdInsertTemp.Parameters.AddWithValue("@Fax2", suplier.Fax2);
                        cmdInsertTemp.Parameters.AddWithValue("@Email2", suplier.Email2);
                        cmdInsertTemp.Parameters.AddWithValue("@Designation3", suplier.Designation3);
                        cmdInsertTemp.Parameters.AddWithValue("@FirstName3", suplier.FirstName3);
                        cmdInsertTemp.Parameters.AddWithValue("@LastName3", suplier.LastName3);
                        cmdInsertTemp.Parameters.AddWithValue("@Telephone3", suplier.Telephone3);
                        cmdInsertTemp.Parameters.AddWithValue("@Mobile3", suplier.Mobile3);
                        cmdInsertTemp.Parameters.AddWithValue("@Fax3", suplier.Fax3);
                        cmdInsertTemp.Parameters.AddWithValue("@Email3", suplier.Email3);
                        cmdInsertTemp.Parameters.AddWithValue("@LastUpdatedBy", suplier.LastUpdatedBy);
                        cmdInsertTemp.Parameters.AddWithValue("@LastUpdatedDatetime", suplier.LastUpdatedDateTime);
                        cmdInsertTemp.Parameters.AddWithValue("@Active", suplier.Active);
                        result = cmdInsertTemp.ExecuteNonQuery();
                    }



                    //cmdUpdateQuote.Transaction = trans;
                    //cmdUpdateQuote.Parameters.AddWithValue("@QuoteApproved", true);
                    //result = cmdUpdateQuote.ExecuteNonQuery();

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<ReasonCode> GetReasonCodes()
        {
            List<ReasonCode> rsList = new List<ReasonCode>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ReasonCodes " +
                                                                  "ORDER BY code", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ReasonCode rs = new ReasonCode();
                                    rs.ID = Convert.ToInt16(dr["id"]);
                                    rs.Code = dr["code"].ToString();
                                    rs.Reason = dr["reason"].ToString();
                                    rsList.Add(rs);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Reason Codes: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return rsList;
        }

        public static Tuple<int,ProductStock> UpdateStock(int stkId, int prodId, string TimeStamp, string selectedType, decimal quantity, string reason)
        {
            int res = 0;
            decimal qty = 0;
            string strQty = string.Empty;
            string result = string.Empty;
            ProductStock psRe = new ProductStock();
            ProductStock ps = new ProductStock();
            List<ProductStockReserved> prodStockReserved = new List<ProductStockReserved>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetProductStock = new SqlCommand("SELECT * FROM ProductStock " +
                                                               "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlCommand cmdUpdateProdStock = new SqlCommand("UPDATE ProductStock SET qty_available=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy " +
                                                               "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlCommand cmdInsertProdTransactions = new SqlCommand("INSERT INTO ProductTransactions(transaction_date,qty,type,reason,sales_no,shipping_no,purchase_no,work_order_no,product_id,line_no,added_by,result) " +
                                                                      "VALUES (@TransactionDate,@Qty,@Type,@Reason,@SalesNo,@ShippingNo,@PurchaseNo,@WorkOrderNo,@ProductID,@LineNo,@AddedBy,@Result)", conn);

                SqlCommand cmdGetProductStockRe = new SqlCommand("SELECT * FROM ProductStock " +
                                                                 "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction(System.Data.IsolationLevel.Serializable);
                try
                {



                    cmdGetProductStock.Transaction = trans;
                    cmdGetProductStock.Parameters.AddWithValue("@StockLocationID", stkId);
                    cmdGetProductStock.Parameters.AddWithValue("@ProductID", prodId);
                    using (SqlDataReader dr = cmdGetProductStock.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                ps.QtyAvailable = Convert.ToInt16(dr["qty_available"]);
                                ps.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                            }
                        }
                    }


                    bool y = true;

                    if (TimeStamp != ps.TimeStamp)
                    {
                        y = false;
                    }

                    if (y)
                    {

                        if (selectedType == "Adjust In")
                        {
                            qty = ps.QtyAvailable + quantity;
                            strQty = "+" + quantity;
                            result = "Added";
                        }
                        else if (selectedType == "Adjust Out")
                        {
                            qty = ps.QtyAvailable - quantity < 0 ? 0 : ps.QtyAvailable - quantity;
                            strQty = "-" + quantity;
                            result = "Deducted";
                        }

                        cmdUpdateProdStock.Transaction = trans;
                        cmdUpdateProdStock.Parameters.AddWithValue("@Qty", qty);
                        cmdUpdateProdStock.Parameters.AddWithValue("@StockLocationID", stkId);
                        cmdUpdateProdStock.Parameters.AddWithValue("@ProductID", prodId);
                        cmdUpdateProdStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        cmdUpdateProdStock.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        int r = cmdUpdateProdStock.ExecuteNonQuery();

                        if (r > 0)
                        {
                            /**INSERT to ProductTransactions**/
                            cmdInsertProdTransactions.Transaction = trans;
                            cmdInsertProdTransactions.Parameters.AddWithValue("@TransactionDate", DateTime.Now);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Qty", strQty);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Type", ProductTransactionsStatus.Adjustment.ToString());
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Reason", reason == null ? "" : reason);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@SalesNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@ShippingNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@PurchaseNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@WorkOrderNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@ProductID", prodId);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@LineNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@AddedBy", UserData.FirstName + " " + UserData.LastName);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Result", result);
                            res = cmdInsertProdTransactions.ExecuteNonQuery();
                        }


                        cmdGetProductStockRe.Transaction = trans;
                        cmdGetProductStockRe.Parameters.AddWithValue("@StockLocationID", stkId);
                        cmdGetProductStockRe.Parameters.AddWithValue("@ProductID", prodId);
                        using (SqlDataReader dr = cmdGetProductStockRe.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    psRe.ID = Convert.ToInt16(dr["id"]);
                                    psRe.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                    psRe.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                    psRe.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                    psRe.TotalSupply = ps.TotalSupply;
                                    psRe.LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]);
                                    psRe.UpdatedBy = dr["updated_by"].ToString();
                                    psRe.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                }
                            }
                        }
                    }
                    else
                    {
                        res = -1;
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(res,psRe);
        }

        public static List<Product> GetEveryProducts()
        {
            List<Product> prodColl = new List<Product>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id, Products.category_id, Products.product_type_id,ProductTypes.product_type, Products.raw_product_id, Products.commodity_code, Products.product_name, Products.product_code, Products.product_description, Products.unit, Products.material_cost, Products.unit_cost, Products.unit_price, " +
                                                                  "Products.is_manufactured, Products.is_purchased,  Products.is_raw_material, Products.is_auto_order, Products.active " +
                                                                  "FROM Products " +
                                                                  "INNER JOIN ProductTypes ON Products.product_type_id = ProductTypes.id " +
                                                                  "ORDER BY product_code", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Product prod = new Product();

                                    prod.ProductID = Convert.ToInt16(dr["id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    prod.ProductType = new ProductType() { ProductTypeID = Convert.ToInt16(dr["product_type_id"]), Type = dr["product_type"].ToString() };
                                    prod.RawProduct = new RawProduct() { RawProductID = Convert.ToInt16(dr["raw_product_id"]) };
                                    prod.CommodityCode = dr["commodity_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.MaterialCost = Convert.ToDecimal(dr["material_cost"]);
                                    prod.UnitCost = Convert.ToDecimal(dr["unit_cost"]);
                                    prod.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prod.IsPurchased = Convert.ToBoolean(dr["is_purchased"]);
                                    prod.IsManufactured = Convert.ToBoolean(dr["is_manufactured"]);
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    prodColl.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;

        }

        public static List<ProductType> GetProductTypes()
        {
            List<ProductType> prodColl = new List<ProductType>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM ProductTypes " +
                                                                  "ORDER BY product_type", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductType prodType = new ProductType();
                                    prodType.ProductTypeID = Convert.ToInt16(dr["id"]);
                                    prodType.Type = dr["product_type"].ToString();
                                    prodType.Description = dr["description"].ToString();
                                    prodColl.Add(prodType);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;
        }

        public static List<InventoryValue> GetInventoryValue(int stockLocation, Int32 productId, int productTypeID, string commodityCode)
        {
            string where = string.Empty;
            List<InventoryValue> prodColl = new List<InventoryValue>();

            where = "WHERE ProductStock.stock_location_id=@LocationID ";

            if (productId > 0)
            {
                where = "WHERE ProductStock.stock_location_id=@LocationID AND ProductStock.product_id=@ProductID ";
            }

            if (productTypeID > 0)
            {
                where += " AND Products.product_type_id=@ProductTypeID";
            }

            if (!string.IsNullOrWhiteSpace(commodityCode))
            {
                where += " AND Products.commodity_code=@CommodityCode";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id,ProductStock.stock_location_id,StockLocation.stock_name,ProductStock.qty_available, Products.category_id, Products.raw_product_id, Products.type, Products.commodity_code, Products.product_name, Products.product_code, Products.product_description, Products.unit, Products.material_cost, Products.units_per_package, Products.unit_cost, Products.unit_price, Products.minimum_order_qty, " +
                                                                  "Products.is_manufactured, Products.is_purchased,  Products.is_raw_material, Products.active " +                                                                 
                                                                  "FROM Products " +
                                                                  "INNER JOIN ProductStock ON Products.id = ProductStock.product_id " +
                                                                  "INNER JOIN StockLocation ON ProductStock.stock_location_id = StockLocation.id " +
                                                                  "" + where, conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@LocationID", stockLocation);
                        cmdGetData.Parameters.AddWithValue("@ProductID", productId);
                        cmdGetData.Parameters.AddWithValue("@ProductTypeID", productTypeID);
                        cmdGetData.Parameters.AddWithValue("@CommodityCode", commodityCode);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    InventoryValue prod = new InventoryValue();

                                    prod.ProductID = Convert.ToInt16(dr["id"]);
                                    prod.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) };
                                    prod.RawProduct = new RawProduct()
                                    {
                                        RawProductID = Convert.ToInt16(dr["raw_product_id"])
                                    };
                                    prod.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]), StockName = dr["stock_name"].ToString() };
                                    prod.Type = dr["type"].ToString();
                                    prod.CommodityCode = dr["commodity_code"].ToString();
                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.MaterialCost = Convert.ToDecimal(dr["material_cost"]);
                                    prod.UnitsPerPack = Convert.ToDecimal(dr["units_per_package"]);
                                    prod.UnitCost = Convert.ToDecimal(dr["unit_cost"]);
                                    prod.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prod.MinimumOrderQty = Convert.ToDecimal(dr["minimum_order_qty"]);
                                    //prod.OrderInMultiplesOf = Convert.ToDecimal(dr["orders_in_multiples_of"]);
                                    //prod.SafetyStockQty = Convert.ToDecimal(dr["safety_stock_qty"]);
                                    prod.IsPurchased = Convert.ToBoolean(dr["is_purchased"]);
                                    prod.IsManufactured = Convert.ToBoolean(dr["is_manufactured"]);
                                    prod.Active = Convert.ToBoolean(dr["active"]);
                                    prod.QtyOnHand = Convert.ToDecimal(dr["qty_available"]);
                                    prod.TotalValue = prod.QtyOnHand * Convert.ToDecimal(dr["material_cost"]);
                                    prodColl.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;
        }


        public static ObservableCollection<ProductStock> GetStockedProducts(string sqlStr)
        {
            string whereStr = string.Empty;

            if (sqlStr == "Purchased")
            {
                whereStr = " AND Products.is_manufactured = 'false' AND Products.is_purchased = 'true' ";
            }
            else if (sqlStr == "Fabricated")
            {
                whereStr = " AND Products.is_manufactured = 'true' AND Products.is_purchased = 'false' ";
            }
            //else if (sqlStr == "Both")
            //{
            //    whereStr = " AND (Products.is_manufactured = 'false' OR Products.is_purchased = 'true')";
            //}
            ObservableCollection<ProductStock> productStockLine = new ObservableCollection<ProductStock>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT Products.id,Products.category_id,Products.active,Products.product_code,Products.product_description,Products.commodity_code,Products.is_manufactured,Products.is_purchased,Products.unit,Products.material_cost, " +
                                                                  "ISNULL(SupplierProduct.lead_time, 0 ) AS LeadTime, " +
                                                                  "(SELECT ISNULL(SUM(PSR.qty_ordered),0) FROM ProductStockReserved PSR WHERE PSR.product_id = Products.id AND (PSR.status != 'Shipped' AND PSR.status != 'Dispatched' AND PSR.status != 'Cancel')) AS OrderQty, " +
                                                                  "EstimatedTotalCost = Products.material_cost*(SELECT ISNULL(SUM(PSR.qty_ordered),0) FROM ProductStockReserved PSR WHERE PSR.product_id = Products.id AND (PSR.status != 'Shipped' AND PSR.status != 'Dispatched' AND PSR.status != 'Cancel')), " +
                                                                  "ProductStock.qty_available,(SELECT ISNULL(SUM(PSR.qty_ordered),0) FROM ProductStockReserved PSR WHERE PSR.product_id = Products.id AND (PSR.status != 'Shipped' AND PSR.status != 'Dispatched' AND PSR.status != 'Cancel')) AS NetDemand, " +
                                                                  "(SELECT ISNULL(SUM(PurchasingOrderItems.order_qty ),0) " +
                                                                  "	  FROM PurchasingOrderItems  " +
                                                                  "	  INNER JOIN PurchasingOrders ON  PurchasingOrderItems.purchase_order_no = PurchasingOrders.purchasing_order_no  " +
                                                                  "	  WHERE PurchasingOrderItems.product_id = Products.id AND PurchasingOrderItems.line_status='Open' AND PurchasingOrders.status='Pending') AS TotalSupply, " +
                                                                  "ProductStock.projected_available,Products.order_point,Products.safety_stock_qty,Products.minimum_order_qty,Products.orders_in_multiples_of  " +
                                                                  "FROM Products  " +
                                                                  "LEFT JOIN SupplierProduct ON Products.id = SupplierProduct.product_id  " +
                                                                  "INNER JOIN ProductStock ON Products.id = ProductStock.product_id WHERE ProductStock.stock_location_id=1" + whereStr, conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductStock ps = new ProductStock();
                                    ps.Product = new Product()
                                    {
                                        ProductID = Convert.ToInt16(dr["id"]),
                                        Active = Convert.ToBoolean(dr["active"]),
                                        ProductCode = dr["product_code"].ToString(),
                                        ProductDescription = dr["product_description"].ToString(),
                                        CommodityCode = dr["commodity_code"].ToString(),
                                        IsManufactured = Convert.ToBoolean(dr["is_manufactured"]),
                                        IsPurchased = Convert.ToBoolean(dr["is_purchased"]),
                                        ProductUnit = dr["unit"].ToString(),
                                        MaterialCost = CheckNull<decimal>(dr["material_cost"]),
                                        OrderPoint = CheckNull<decimal>(dr["order_point"]),
                                        SafetyStockQty = CheckNull<decimal>(dr["safety_stock_qty"]),
                                        MinimumOrderQty = CheckNull<decimal>(dr["minimum_order_qty"]),
                                        OrderInMultiplesOf = CheckNull<decimal>(dr["orders_in_multiples_of"])
                                    };
                                    ps.SupplierProduct = new SupplierProduct() { LeadTime = Convert.ToInt16(dr["LeadTime"]) };
                                    ps.OrderQty = Convert.ToDecimal(dr["OrderQty"]);
                                    ps.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                    ps.NetDemand = Convert.ToDecimal(dr["NetDemand"]);
                                    ps.TotalSupply = Convert.ToDecimal(dr["TotalSupply"]);
                                    ps.ProjectedAvailable = ((Convert.ToDecimal(dr["qty_available"]) + Convert.ToDecimal(dr["TotalSupply"])) - Convert.ToDecimal(dr["NetDemand"]));//< 0 ? 0 : (Convert.ToDecimal(dr["qty_available"]) + Convert.ToDecimal(dr["total_supply"])) - Convert.ToDecimal(dr["NetDemand"]);
                                    ps.ProductionButtonVisible = Convert.ToInt16(dr["category_id"]) != 9 ? Convert.ToBoolean(dr["is_manufactured"]) == true ? "Visible" : "Collapsed" : "Collapsed";
                                    ps.PurchaseButtonVisible = Convert.ToInt16(dr["category_id"]) != 9 ? Convert.ToBoolean(dr["is_purchased"]) == true ? "Visible" : "Collapsed" : "Collapsed";
                                    ps.ProjAvaForeground = "White";
                                    ps.ProjAvaBackground = ps.ProjectedAvailable <= 0 ? "#ff3333" : "#009933";
                                    ps.QtyAvaForeground = "White";
                                    //ps.QtyAvaBackground = ps.QtyAvailable < ps.Product.SafetyStockQty ? "#ff3333" : "#009933";

                                    if (ps.QtyAvailable <= ps.Product.SafetyStockQty)
                                    {
                                        ps.QtyAvaBackground = "#3333ff";
                                        if (ps.QtyAvailable <= ps.Product.OrderPoint)
                                        {
                                            ps.QtyAvaBackground = "#ff3333";
                                        }
                                    }
                                    else if (ps.QtyAvailable <= ps.Product.OrderPoint)
                                    {
                                        ps.QtyAvaBackground = "#ff3333";
                                    }
                                    else
                                    {
                                        ps.QtyAvaBackground = "#009933";
                                    }


                                    productStockLine.Add(ps);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return productStockLine;
        }

        public static PurchaseOrder GetSupplierDetailsByProduct(Product p)
        {
            SqlTransaction trans = null;
            PurchaseOrder po = new PurchaseOrder();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {

                    SqlCommand cmdGetData = new SqlCommand("SELECT SupplierProduct.lead_time, " +
                                                           "Supplier.id,Supplier.supplier_code,Supplier.supplier_name,Supplier.supplier_address,Supplier.supplier_suburb,Supplier.supplier_state,Supplier.supplier_postcode " +
                                                           "FROM SupplierProduct  " +
                                                           "INNER JOIN Supplier ON SupplierProduct.supplier_id = Supplier.id " +
                                                           "WHERE SupplierProduct.product_id=@ProdId", conn);

                    SqlCommand cmdGetSystemParameter = new SqlCommand("SELECT description " +
                                                           "FROM SystemParameter  " +
                                                           "WHERE parameter_code=@ParaCode", conn);
                    {

                        conn.Open();
                        trans = conn.BeginTransaction();

                        cmdGetData.Transaction = trans;
                        cmdGetData.Parameters.AddWithValue("@ProdId", p.ProductID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    po.Supplier = new Supplier() { SupplierID = Convert.ToInt16(dr["id"]), SupplierCode = dr["supplier_code"].ToString(), SupplierName = dr["supplier_name"].ToString(), SupplierAddress = dr["supplier_address"].ToString(), SupplierSuburb = dr["supplier_suburb"].ToString(), SupplierState = dr["supplier_state"].ToString(), SupplierPostCode = dr["supplier_postcode"].ToString(), LeadTime = Convert.ToInt16(dr["lead_time"]) };
                                }
                            }
                        }
                        cmdGetSystemParameter.Transaction = trans;
                        cmdGetSystemParameter.Parameters.AddWithValue("@ParaCode", "A1Address");
                        using (SqlDataReader dr = cmdGetSystemParameter.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    po.ShipTo = dr["description"].ToString();
                                }
                            }
                        }

                        trans.Commit();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return po;
        }

        public static ObservableCollection<SalesOrderLines> GetOpenSalesOrders()
        {
            ObservableCollection<SalesOrderLines> salesOrderLine = new ObservableCollection<SalesOrderLines>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ISNULL(SupplierProduct.lead_time, 0 ) AS LeadTime,SalesOrderDetails.sales_no,SalesOrderDetails.order_line,SalesOrderDetails.qty AS OrderQty,ISNULL(DispatchOrderItem.dispatched_qty,0) AS ShippedQty, " +
                                                                  "ProductStockReserved.qty_reserved,ProductStockReserved.qty_remaining, " +
                                                                  "Products.product_code,Products.unit,Products.is_manufactured,Products.is_purchased,Products.commodity_code,  " +
                                                                  "SalesOrder.order_status,SalesOrder.order_date,SalesOrder.dispatch_date,SalesOrder.sales_completed_by,  " +
                                                                  "Customers.company_name  " +
                                                                  "FROM SalesOrderDetails  " +
                                                                  "INNER JOIN SalesOrder ON SalesOrderDetails.sales_no = SalesOrder.sales_no  " +
                                                                  "INNER JOIN Customers ON SalesOrder.customer_id = Customers.id  " +
                                                                  "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id  " +
                                                                  "LEFT JOIN SupplierProduct ON Products.id = SupplierProduct.product_id  " +
                                                                  "LEFT JOIN DispatchOrderItem ON SalesOrder.sales_no = DispatchOrderItem.sales_no  " +
                                                                  "INNER JOIN ProductStockReserved ON SalesOrderDetails.sales_no = ProductStockReserved.sales_no AND SalesOrderDetails.product_id = ProductStockReserved.product_id  " +
                                                                  "WHERE  SalesOrderDetails.line_status='Open'" +
                                                                  "ORDER BY SalesOrder.dispatch_date desc,SalesOrderDetails.sales_no desc", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SalesOrderLines sol = new SalesOrderLines();
                                    sol.SalesOrder = new SalesOrder() { SalesOrderNo = Convert.ToInt32(dr["sales_no"]), OrderStatus = dr["order_status"].ToString(), OrderDate = Convert.ToDateTime(dr["order_date"]), DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]), SalesCompletedBy = dr["sales_completed_by"].ToString(), Customer = new Customer() { CompanyName = dr["company_name"].ToString() }, SalesOrderDetails = new ObservableCollection<SalesOrderDetails>() { new SalesOrderDetails() { Product = new Product() { ProductCode = dr["product_code"].ToString(), ProductUnit = dr["unit"].ToString(), IsManufactured = Convert.ToBoolean(dr["is_manufactured"]), IsPurchased = Convert.ToBoolean(dr["is_purchased"]), CommodityCode = dr["commodity_code"].ToString() }, OrderLine = Convert.ToInt16(dr["order_line"]), Quantity = Convert.ToDecimal(dr["OrderQty"]) } } };
                                    sol.SupplierProduct = new SupplierProduct() { LeadTime = Convert.ToInt16(dr["LeadTime"]) };
                                    sol.DispatchOrderItem = new DispatchOrderItem() { DispatchQty = Convert.ToDecimal(dr["ShippedQty"]) };
                                    sol.ProductStockReserved = new ProductStockReserved() { QtyReserved = Convert.ToDecimal(dr["qty_reserved"]), QtyRemaining = Convert.ToDecimal(dr["qty_remaining"]) };
                                    salesOrderLine.Add(sol);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return salesOrderLine;
        }

        public static string GetSystemParameterByParaCode(string paraCode)
        {
            string desc = string.Empty;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdGetSystemParameter = new SqlCommand("SELECT description " +
                                                                      "FROM SystemParameter  " +
                                                                      "WHERE parameter_code=@ParaCode", conn);
                    {

                        conn.Open();

                        cmdGetSystemParameter.Parameters.AddWithValue("@ParaCode", paraCode);
                        using (SqlDataReader dr = cmdGetSystemParameter.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    desc = dr["description"].ToString();
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return desc;
        }

        public static List<SupplierProduct> GetAllSupplierProducts()
        {
            List<SupplierProduct> spList = new List<SupplierProduct>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetSupplier = new SqlCommand("SELECT * FROM SupplierProduct", conn))
                    {
                        using (SqlDataReader dr = cmdGetSupplier.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SupplierProduct sp = new SupplierProduct();
                                    sp.ID = Convert.ToInt16(dr["id"]);
                                    sp.Supplier = new Supplier() { SupplierID = Convert.ToInt16(dr["supplier_id"]) };
                                    sp.ProductID = Convert.ToInt16(dr["product_id"]);
                                    sp.LeadTime = Convert.ToInt16(dr["lead_time"]);
                                    spList.Add(sp);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return spList;
        }

        public static ObservableCollection<PurchaseOrder> GetPendingPurchasingOrders(int supplierId)
        {
            ObservableCollection<PurchaseOrder> purchasingOrders = new ObservableCollection<PurchaseOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdGetSupplier = new SqlCommand("SELECT PurchasingOrders.purchasing_order_no,PurchasingOrders.supplier_id,PurchasingOrders.order_date,PurchasingOrders.order_time,PurchasingOrders.recieve_on_date,PurchasingOrders.received_date,PurchasingOrders.status,PurchasingOrders.supplier_quote_reference,PurchasingOrders.last_modified_by,PurchasingOrders.last_modified_date,PurchasingOrders.purchase_from,PurchasingOrders.ship_to,PurchasingOrders.sub_total,PurchasingOrders.gst,PurchasingOrders.grand_total,PurchasingOrders.last_modified_date,PurchasingOrders.completed, " +
                                                               "PurchasingOrderItems.id AS POIID,PurchasingOrderItems.purchase_order_no,PurchasingOrderItems.line_no,PurchasingOrderItems.line_status,PurchasingOrderItems.order_qty,PurchasingOrderItems.product_id,Products.product_code,Products.product_description,Products.unit,Products.material_cost,PurchasingOrderItems.total,PurchasingOrderItems.line_desired_received_date,PurchasingOrderItems.last_updated_by,PurchasingOrderItems.last_updated_date, " +
                                                               "SupplierProduct.lead_time, " +
                                                               "Comments.comment " +
                                                               "FROM PurchasingOrders  " +
                                                               "INNER JOIN PurchasingOrderItems ON PurchasingOrders.purchasing_order_no = PurchasingOrderItems.purchase_order_no " +
                                                               "INNER JOIN Products ON PurchasingOrderItems.product_id = Products.id " +
                                                               "LEFT JOIN SupplierProduct ON Products.id = SupplierProduct.product_id " +
                                                               "LEFT JOIN Comments ON PurchasingOrders.purchasing_order_no = Comments.no AND Comments.prefix='PO' " +
                                                               "WHERE PurchasingOrders.supplier_id=@SupID AND PurchasingOrders.status = 'Pending' AND PurchasingOrders.completed='false'", conn);

                    conn.Open();

                    cmdGetSupplier.Parameters.AddWithValue("@SupID", supplierId);
                    using (SqlDataReader dr1 = cmdGetSupplier.ExecuteReader())
                    {
                        if (dr1 != null)
                        {
                            while (dr1.Read())
                            {
                                PurchaseOrder po = new PurchaseOrder();
                                po.PurchasingOrderNo = Convert.ToInt16(dr1["purchasing_order_no"]);
                                po.Supplier = new Supplier() { SupplierID = Convert.ToInt16(dr1["supplier_id"]), LeadTime = CheckNull<int>(dr1["lead_time"]) };
                                po.OrderDate = Convert.ToDateTime(dr1["order_date"]);
                                po.RecieveOnDate = CheckNull<DateTime>(dr1["recieve_on_date"]);
                                po.ReceivedDate = CheckNull<DateTime>(dr1["received_date"]);
                                po.Status = dr1["status"].ToString();
                                po.SupplierQuoteReference = dr1["supplier_quote_reference"].ToString();
                                po.LastModifiedBy = dr1["last_modified_by"].ToString();
                                po.LastModifiedDate = CheckNull<DateTime>(dr1["last_modified_date"]);
                                po.SubTotal = Convert.ToDecimal(dr1["sub_total"]);
                                po.Tax = Convert.ToDecimal(dr1["gst"]);
                                po.TotalAmount = Convert.ToDecimal(dr1["grand_total"]);
                                po.Completed = Convert.ToBoolean(dr1["completed"]);
                                po.Notes = dr1["comment"].ToString();
                                po.PurchaseOrderDetails = new ObservableCollection<PurchaseOrderDetails>();
                                po.PurchaseOrderDetails.Add(new PurchaseOrderDetails() { ID = Convert.ToInt32(dr1["POIID"]), PurchaseOrderID = Convert.ToInt32(dr1["purchase_order_no"]), LineNo = Convert.ToInt16(dr1["line_no"]), LineStatus = dr1["line_status"].ToString(), OrderQty = Convert.ToDecimal(dr1["order_qty"]), Product = new Product() { ProductID = Convert.ToInt16(dr1["product_id"]), ProductCode = dr1["product_code"].ToString(), ProductDescription = dr1["product_description"].ToString(), ProductUnit = dr1["unit"].ToString(), MaterialCost = Convert.ToDecimal(dr1["material_cost"]) }, Total = Convert.ToDecimal(dr1["total"]), LineDesiredRecieveDate = Convert.ToDateTime(dr1["line_desired_received_date"]), LastUpdatedDate = Convert.ToDateTime(dr1["last_updated_date"]), LastUpdatedBy = dr1["last_updated_by"].ToString() });
                                purchasingOrders.Add(po);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return purchasingOrders;
        }


        public static int CreatePurchaseOrder(PurchaseOrder po, string userName)
        {
            Int32 purchaseOrderNo = 0;
            int result = 0;
            int rowCount = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdPurchasingOrder = new SqlCommand("INSERT INTO PurchasingOrders(supplier_id,order_date,order_time,recieve_on_date,status,supplier_quote_reference,purchase_from,ship_to,sub_total,gst,grand_total,completed) " +
                                                                "OUTPUT INSERTED.purchasing_order_no VALUES (@SupplierID,@OrderDate,@OrderTime,@RecieveOnDate,@Status,@SupplierQuoteReference,@PurchaseFrom,@ShipTo,@SubTotal,@Gst,@GrandTotal,@Completed)", conn);

                SqlCommand cmdPurchasingOrderItems = new SqlCommand("INSERT INTO PurchasingOrderItems(purchase_order_no,line_no,line_status,order_qty,product_id,total,line_desired_received_date,last_updated_by,last_updated_date) " +
                                                                    "VALUES (@PurchaseOrderNo,@LineNo,@LineStatus,@OrderQty,@ProductId,@Total,@LineDesiredReceivedDate,@LastUpdatedBy,@LastUpdatedDate)", conn);

                SqlCommand cmdUpdatePS = new SqlCommand("UPDATE ProductStock SET total_supply += @TotalSupply, last_updated_date=@UpdatedDate, updated_by=@UpdateBy " +
                                                        "WHERE stock_location_id = @StockLocationID AND product_id=@ProductID", conn);

                //Comments
                SqlCommand cmdInsertComment = new SqlCommand("INSERT INTO Comments(prefix,no,location_id,comment,created_date,created_by,last_updated_date) " +
                                                             "VALUES (@Prefix,@No,@LocationID,@Comment,@CreatedDate,@CreatedBy,@LastUpdatedDate)", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    cmdPurchasingOrder.Transaction = trans;
                    cmdPurchasingOrder.Parameters.AddWithValue("@SupplierID", po.Supplier.SupplierID);
                    cmdPurchasingOrder.Parameters.AddWithValue("@OrderDate", po.OrderDate);
                    cmdPurchasingOrder.Parameters.AddWithValue("@OrderTime", po.OrderTIme);
                    cmdPurchasingOrder.Parameters.AddWithValue("@RecieveOnDate", po.RecieveOnDate);
                    cmdPurchasingOrder.Parameters.AddWithValue("@Status", po.Status);
                    cmdPurchasingOrder.Parameters.AddWithValue("@SupplierQuoteReference", po.SupplierQuoteReference == null ? "" : po.SupplierQuoteReference);
                    cmdPurchasingOrder.Parameters.AddWithValue("@PurchaseFrom", po.PurchaseFrom);
                    cmdPurchasingOrder.Parameters.AddWithValue("@ShipTo", po.ShipTo);
                    cmdPurchasingOrder.Parameters.AddWithValue("@SubTotal", po.SubTotal);
                    cmdPurchasingOrder.Parameters.AddWithValue("@Gst", po.Tax);
                    cmdPurchasingOrder.Parameters.AddWithValue("@GrandTotal", po.TotalAmount);
                    cmdPurchasingOrder.Parameters.AddWithValue("@Completed", false);

                    purchaseOrderNo = (Int32)cmdPurchasingOrder.ExecuteScalar();

                    foreach (var item in po.PurchaseOrderDetails)
                    {
                        cmdPurchasingOrderItems.Transaction = trans;
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@PurchaseOrderNo", purchaseOrderNo);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@LineNo", item.LineNo);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@LineStatus", item.LineStatus);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@OrderQty", item.OrderQty);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@ProductId", item.Product.ProductID);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@Total", item.Total);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@LineDesiredReceivedDate", po.RecieveOnDate);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@LastUpdatedBy", userName == null ? "Test" : userName);
                        cmdPurchasingOrderItems.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        rowCount = cmdPurchasingOrderItems.ExecuteNonQuery();
                        cmdPurchasingOrderItems.Parameters.Clear();

                        cmdUpdatePS.Transaction = trans;
                        cmdUpdatePS.Parameters.AddWithValue("@StockLocationID", 1);
                        cmdUpdatePS.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdatePS.Parameters.AddWithValue("@TotalSupply", item.OrderQty);
                        cmdUpdatePS.Parameters.AddWithValue("@UpdatedDate", DateTime.Now);
                        cmdUpdatePS.Parameters.AddWithValue("@UpdateBy", UserData.FirstName + " " + UserData.LastName);
                        cmdUpdatePS.ExecuteNonQuery();
                        cmdUpdatePS.Parameters.Clear();

                    }

                    if (!string.IsNullOrWhiteSpace(po.Notes))
                    {
                        cmdInsertComment.Transaction = trans;
                        cmdInsertComment.Parameters.AddWithValue("@Prefix", "PO");
                        cmdInsertComment.Parameters.AddWithValue("@No", purchaseOrderNo);
                        cmdInsertComment.Parameters.AddWithValue("@LocationID", 10);
                        cmdInsertComment.Parameters.AddWithValue("@Comment", po.Notes ?? (object)DBNull.Value);
                        cmdInsertComment.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                        cmdInsertComment.Parameters.AddWithValue("@CreatedBy", userName == null ? "Test" : userName);
                        cmdInsertComment.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        cmdInsertComment.ExecuteNonQuery();
                    }
                    if (rowCount > 0 && purchaseOrderNo > 0)
                    {
                        result = purchaseOrderNo;
                    }
                    else
                    {
                        result = 0;
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding data to products: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }
        }

        public static List<Product> GetProductBySupplier(int supplierID)
        {
            List<Product> prodList = new List<Product>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmdGetSystemParameter = new SqlCommand("SELECT SupplierProduct.supplier_id,SupplierProduct.lead_time,Products.id,Products.product_code,Products.product_name,Products.product_description,Products.unit,Products.material_cost " +
                                                                      "FROM SupplierProduct " +
                                                                      "INNER JOIN Products ON SupplierProduct.product_id = Products.id " +
                                                                      "WHERE supplier_id=@SupplierID", conn);
                    {

                        conn.Open();

                        cmdGetSystemParameter.Parameters.AddWithValue("@SupplierID", supplierID);
                        using (SqlDataReader dr = cmdGetSystemParameter.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Product prod = new Product();
                                    prod.ProductID = Convert.ToInt16(dr["id"]);

                                    prod.ProductName = dr["product_name"].ToString();
                                    prod.ProductCode = dr["product_code"].ToString();
                                    prod.ProductDescription = dr["product_description"].ToString();
                                    prod.ProductUnit = dr["unit"].ToString();
                                    prod.MaterialCost = Convert.ToDecimal(dr["material_cost"]);
                                    prodList.Add(prod);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodList;
        }

        public static int ConsolidatePurchaseOrder(PurchaseOrder po)
        {
            int result = 0;
            List<int> resPoItemList = new List<int>();
            SqlTransaction trans = null;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdatePO = new SqlCommand("UPDATE PurchasingOrders SET order_date=@OrderDate,order_time=@OrderTime,recieve_on_date=@ReceiveOnDate,supplier_quote_reference = @SupplierQuoteReference,last_modified_by=@LastModifiedBy,last_modified_date=@LastModifiedDate,sub_total=@SubTotal,gst=@Gst,grand_total=@GrandTotal,completed=@Completed,purchase_from=@PurchaseFrom,ship_to=@ShipTo " +
                                                        "WHERE purchasing_order_no = @PurchasingOrderNo AND (supplier_quote_reference <> @SupplierQuoteReference OR sub_total <> @SubTotal OR gst <> @Gst OR grand_total <> @GrandTotal OR purchase_from <> @PurchaseFrom OR ship_to <> @ShipTo)", conn);


                SqlCommand cmdUpdatePOItems = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PurchasingOrderItems " +
                                                             "WHERE purchase_order_no = @PurchaseOrderNo AND product_id = @ProductID) " +
                                                             "INSERT INTO PurchasingOrderItems VALUES(@PurchaseOrderNo,@LineNo,@LineStatus,@OrderQty,@ReceivedQty,@ProductID,@Total,@Result,@LineDesiredReservedDate,@LastUpdatedBy,@LastUpdatedDate) " +
                                                             "ELSE " +
                                                             "UPDATE PurchasingOrderItems SET line_no=@LineNo,order_qty=@OrderQty,received_qty=@ReceivedQty, total=@Total,result=@Result,line_desired_received_date=@LineDesiredReservedDate,last_updated_by=@LastUpdatedBy,last_updated_date=@LastUpdatedDate " +
                                                             "WHERE purchase_order_no = @PurchaseOrderNo AND product_id = @ProductID AND  " +
                                                             "(order_qty <> @OrderQty OR total <> @Total)", conn);

                SqlCommand cmdUpdateComments = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Comments " +
                                                              "WHERE prefix='PO' AND no = @PurchaseOrderNo) " +
                                                              "INSERT INTO Comments(prefix,no,location_id,comment,created_date,created_by,last_updated_date) VALUES(@Prefix,@PurchaseOrderNo,@LocationID,@Comment,@CreatedDate,@CreatedBy,@LastUpdatedDate) " +
                                                              "ELSE " +
                                                              "UPDATE Comments SET comment=@Comment,last_updated_date=@LastUpdatedDate " +
                                                              "WHERE no = @PurchaseOrderNo AND prefix = 'PO' AND (comment<>@Comment)", conn);

                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdUpdatePO.Transaction = trans;
                    cmdUpdatePO.Parameters.AddWithValue("@PurchasingOrderNo", po.PurchasingOrderNo);
                    cmdUpdatePO.Parameters.AddWithValue("@OrderDate", po.OrderDate);
                    cmdUpdatePO.Parameters.AddWithValue("@OrderTime", po.OrderTIme);
                    cmdUpdatePO.Parameters.AddWithValue("@ReceiveOnDate", po.RecieveOnDate);
                    cmdUpdatePO.Parameters.AddWithValue("@SupplierQuoteReference", CheckNull<string>(po.SupplierQuoteReference));
                    cmdUpdatePO.Parameters.AddWithValue("@LastModifiedBy", po.LastModifiedBy);
                    cmdUpdatePO.Parameters.AddWithValue("@LastModifiedDate", po.LastModifiedDate);
                    cmdUpdatePO.Parameters.AddWithValue("@SubTotal", po.SubTotal);
                    cmdUpdatePO.Parameters.AddWithValue("@Gst", po.Tax);
                    cmdUpdatePO.Parameters.AddWithValue("@GrandTotal", po.TotalAmount);
                    cmdUpdatePO.Parameters.AddWithValue("@Completed", po.Completed);
                    cmdUpdatePO.Parameters.AddWithValue("@PurchaseFrom", po.PurchaseFrom);
                    cmdUpdatePO.Parameters.AddWithValue("@ShipTo", po.ShipTo);
                    int r = cmdUpdatePO.ExecuteNonQuery();
                    if (r > 0)
                    {

                        foreach (var item in po.PurchaseOrderDetails)
                        {
                            cmdUpdatePOItems.Transaction = trans;
                            cmdUpdatePOItems.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                            cmdUpdatePOItems.Parameters.AddWithValue("@LineNo", item.LineNo);
                            cmdUpdatePOItems.Parameters.AddWithValue("@LineStatus", item.LineStatus);
                            cmdUpdatePOItems.Parameters.AddWithValue("@OrderQty", item.OrderQty);
                            cmdUpdatePOItems.Parameters.AddWithValue("@ReceivedQty", item.RecievedQty);
                            cmdUpdatePOItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdUpdatePOItems.Parameters.AddWithValue("@Total", item.Total);
                            cmdUpdatePOItems.Parameters.AddWithValue("@Result", "");
                            cmdUpdatePOItems.Parameters.AddWithValue("@LineDesiredReservedDate", item.LineDesiredRecieveDate);
                            cmdUpdatePOItems.Parameters.AddWithValue("@LastUpdatedBy", item.LastUpdatedBy);
                            cmdUpdatePOItems.Parameters.AddWithValue("@LastUpdatedDate", item.LastUpdatedDate);
                            resPoItemList.Add(cmdUpdatePOItems.ExecuteNonQuery());
                            cmdUpdatePOItems.Parameters.Clear();
                        }
                    }

                    cmdUpdateComments.Transaction = trans;
                    cmdUpdateComments.Parameters.AddWithValue("@Prefix", "PO");
                    cmdUpdateComments.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                    cmdUpdateComments.Parameters.AddWithValue("@LocationID", 1);
                    cmdUpdateComments.Parameters.AddWithValue("@Comment", po.Notes);
                    cmdUpdateComments.Parameters.AddWithValue("@CreatedDate", DateTime.Now);
                    cmdUpdateComments.Parameters.AddWithValue("@CreatedBy", po.LastModifiedBy);
                    cmdUpdateComments.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                    cmdUpdateComments.ExecuteNonQuery();

                    bool d = resPoItemList.Any(x => x > 0);
                    result = d ? po.PurchasingOrderNo : 0;

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error adding data to products: " + e);
                }
                finally
                {
                    conn.Close();
                }
                return result;
            }
        }

        public static ObservableCollection<PurchaseOrder> GetPurchasingOrders(int supplierId)
        {
            ObservableCollection<PurchaseOrder> purchasingOrders = new ObservableCollection<PurchaseOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetSupplier = new SqlCommand("SELECT PurchasingOrders.purchasing_order_no, PurchasingOrders.supplier_id,Supplier.supplier_name,PurchasingOrders.order_date,PurchasingOrders.recieve_on_date,PurchasingOrders.received_date,PurchasingOrders.status,PurchasingOrders.supplier_quote_reference,PurchasingOrders.last_modified_by,PurchasingOrders.last_modified_date,PurchasingOrders.sub_total,PurchasingOrders.gst,PurchasingOrders.grand_total,PurchasingOrders.last_recieved_date " +
                                                                      "FROM PurchasingOrders " +
                                                                      "INNER JOIN Supplier ON Supplier.id = PurchasingOrders.supplier_id " +
                                                                      "WHERE PurchasingOrders.supplier_id = @SupID AND PurchasingOrders.status='Released'", conn))
                    {
                        cmdGetSupplier.Parameters.AddWithValue("@SupID", supplierId);
                        using (SqlDataReader dr = cmdGetSupplier.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PurchaseOrder po = new PurchaseOrder();
                                    po.PurchasingOrderNo = Convert.ToInt16(dr["purchasing_order_no"]);
                                    po.Supplier = new Supplier() { SupplierName = dr["supplier_name"].ToString() };
                                    po.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    po.RecieveOnDate = CheckNull<DateTime>(dr["recieve_on_date"]);
                                    po.ReceivedDate = CheckNull<DateTime>(dr["received_date"]);
                                    po.Status = dr["status"].ToString();
                                    po.SupplierQuoteReference = dr["supplier_quote_reference"].ToString();
                                    po.LastModifiedBy = dr["last_modified_by"].ToString();
                                    po.LastModifiedDate = CheckNull<DateTime>(dr["last_modified_date"]);
                                    po.SubTotal = Convert.ToDecimal(dr["sub_total"]);
                                    po.Tax = Convert.ToDecimal(dr["gst"]);
                                    po.TotalAmount = Convert.ToDecimal(dr["grand_total"]);
                                    purchasingOrders.Add(po);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return purchasingOrders;
        }

        public static ObservableCollection<PurchaseOrder> GetPurchaseOrders(string cond)
        {
            string where = string.Empty;
            if (cond == "All")
            {
                where = " ";
            }
            else if (cond == "Pending")
            {
                where = "WHERE PurchasingOrders.status='Pending' ";
            }
            else if (cond == "Other")
            {
                where = "WHERE PurchasingOrders.status <> 'Pending' ";
            }

            SqlTransaction trans = null;
            ObservableCollection<PurchaseOrder> poList = new ObservableCollection<PurchaseOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {

                    SqlCommand cmdGetPO = new SqlCommand("SELECT PurchasingOrders.purchasing_order_no,PurchasingOrders.supplier_id,Supplier.supplier_name,PurchasingOrders.order_date,PurchasingOrders.order_time,PurchasingOrders.recieve_on_date,PurchasingOrders.status,PurchasingOrders.supplier_quote_reference,PurchasingOrders.last_modified_by,PurchasingOrders.last_modified_date,PurchasingOrders.purchase_from,PurchasingOrders.ship_to,PurchasingOrders.sub_total,PurchasingOrders.gst,PurchasingOrders.grand_total,PurchasingOrders.last_recieved_date,PurchasingOrders.completed, " +
                                                         "Comments.comment " +
                                                         "FROM PurchasingOrders " +
                                                         "INNER JOIN Supplier ON PurchasingOrders.supplier_id = Supplier.id " +
                                                         "LEFT JOIN Comments ON PurchasingOrders.purchasing_order_no = Comments.no AND Comments.prefix='PO' " +
                                                         "" + where + "" +
                                                         "ORDER BY PurchasingOrders.recieve_on_date DESC", conn);

                    SqlCommand cmdGetPoItems = new SqlCommand("SELECT PurchasingOrderItems.id,PurchasingOrderItems.purchase_order_no,PurchasingOrderItems.line_no,PurchasingOrderItems.line_status,PurchasingOrderItems.order_qty,PurchasingOrderItems.received_qty,PurchasingOrderItems.product_id,Products.product_code,Products.product_description,Products.unit,Products.material_cost,PurchasingOrderItems.total,PurchasingOrderItems.result,PurchasingOrderItems.line_desired_received_date,PurchasingOrderItems.last_updated_by,PurchasingOrderItems.last_updated_date " +
                                                                      "FROM PurchasingOrderItems " +
                                                                      "INNER JOIN Products ON PurchasingOrderItems.product_id = Products.id", conn);
                    {

                        conn.Open();
                        trans = conn.BeginTransaction();
                        cmdGetPO.Transaction = trans;
                        //cmdGetData.Parameters.AddWithValue("@Status", "");
                        using (SqlDataReader dr = cmdGetPO.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PurchaseOrder po = new PurchaseOrder();
                                    po.PurchaseOrderDetails = new ObservableCollection<PurchaseOrderDetails>();
                                    //po.OrderType = dr["order_type"].ToString();
                                    po.PurchasingOrderNo = Convert.ToInt32(dr["purchasing_order_no"]);
                                    po.Supplier = new Supplier() { SupplierID = Convert.ToInt16(dr["supplier_id"]), SupplierName = dr["supplier_name"].ToString() };
                                    po.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    po.OrderTIme = (TimeSpan)dr["order_time"];
                                    po.RecieveOnDate = Convert.ToDateTime(dr["recieve_on_date"]);
                                    //po.ReceivedDate = CheckNull<DateTime>(dr["received_date"]);
                                    po.Status = dr["status"].ToString() == ReceivingStatus.Pending.ToString() ? ReceivingStatus.Select.ToString() : dr["status"].ToString();
                                    po.SupplierQuoteReference = dr["supplier_quote_reference"].ToString();
                                    po.LastModifiedDate = CheckNull<DateTime>(dr["last_modified_date"]);
                                    po.PurchaseFrom = dr["purchase_from"].ToString();
                                    po.ShipTo = dr["ship_to"].ToString();
                                    po.SubTotal = CheckNull<decimal>(dr["sub_total"]);
                                    po.Tax = CheckNull<decimal>(dr["gst"]);
                                    po.TotalAmount = CheckNull<decimal>(dr["grand_total"]);
                                    po.LastRecievedDate = CheckNull<DateTime>(dr["last_recieved_date"]);
                                    po.Completed = Convert.ToBoolean(dr["completed"]);
                                    po.Notes = dr["comment"].ToString();
                                    poList.Add(po);
                                }
                            }
                        }
                        cmdGetPoItems.Transaction = trans;
                        cmdGetPoItems.Parameters.AddWithValue("@ParaCode", "A1Address");
                        using (SqlDataReader dr = cmdGetPoItems.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    foreach (var item in poList)
                                    {
                                        if (item.PurchasingOrderNo == Convert.ToInt32(dr["purchase_order_no"]))
                                        {
                                            PurchaseOrderDetails pod = new PurchaseOrderDetails();
                                            pod.ID = Convert.ToInt32(dr["id"]);
                                            pod.PurchaseOrderID = Convert.ToInt32(dr["purchase_order_no"]);
                                            pod.LineNo = Convert.ToInt16(dr["line_no"]);
                                            pod.LineStatus = dr["line_status"].ToString();
                                            pod.OrderQty = Convert.ToDecimal(dr["order_qty"]);
                                            pod.RecievedQty = CheckNull<decimal>(dr["received_qty"]);
                                            pod.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString(), ProductUnit = dr["unit"].ToString(), MaterialCost = Convert.ToDecimal(dr["material_cost"]) };
                                            pod.Total = Convert.ToDecimal(dr["total"]);
                                            pod.Result = string.IsNullOrWhiteSpace(dr["result"].ToString()) ? "Select" : dr["result"].ToString();
                                            pod.LineDesiredRecieveDate = Convert.ToDateTime(dr["line_desired_received_date"]);
                                            pod.LastUpdatedDate = Convert.ToDateTime(dr["last_updated_date"]);
                                            pod.LastUpdatedBy = dr["last_updated_by"].ToString();
                                            pod.RowEnable = dr["line_status"].ToString() == "Closed" ? false : true;
                                            //item.PurchaseOrderDetails = new ObservableCollection<PurchaseOrderDetails>();
                                            item.PurchaseOrderDetails.Add(pod);
                                        }
                                    }

                                }
                            }
                        }

                        trans.Commit();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return poList;
        }

        public static List<string> LoadPurchasingOrderNos()
        {
            List<string> poNos = new List<string>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT purchasing_order_no FROM PurchasingOrders", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    //PurchaseOrder po = new PurchaseOrder();
                                    //po.PurchasingOrderNo = Convert.ToInt32(dr["purchasing_order_no"]);
                                    poNos.Add(dr["purchasing_order_no"].ToString());
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return poNos;
        }

        public static int UpdateReceivingOrder(PurchaseOrder po, string un, bool addToStock)
        {
            int result = 0;
            int resPo = 0;
            SqlTransaction trans = null;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdUpdatePO = new SqlCommand("UPDATE PurchasingOrders SET status = @Status,supplier_quote_reference = @SupplierQuoteReference,completed=@Completed " +
                                                        "WHERE purchasing_order_no = @PurchasingOrderNo AND (status <> @Status OR supplier_quote_reference <> @SupplierQuoteReference)", conn);

                SqlCommand cmdUpdatePOItems = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM PurchasingOrderItems " +
                                                            "WHERE purchase_order_no = @PurchaseOrderNo AND product_id = @ProductID) " +
                                                            "INSERT INTO PurchasingOrderItems VALUES(@PurchaseOrderNo,@LineNo,@LineStatus,@OrderQty,@ReceivedQty,@ProductID,@Total,@Result,@LineDesiredReservedDate,@LastUpdatedBy,@LastUpdatedDate) " +
                                                            "ELSE " +
                                                            "UPDATE PurchasingOrderItems SET line_no = @LineNo,line_status =@LineStatus,order_qty=@OrderQty, received_qty=@ReceivedQty , product_id=@ProductID, total=@Total,result=@Result " +
                                                            "WHERE purchase_order_no = @PurchaseOrderNo AND product_id = @ProductID AND " +
                                                            "(line_no <> @LineNo OR line_status <> @LineStatus OR order_qty <> @OrderQty OR product_id <> @ProductID OR total <> @Total OR result <> @Result OR @ReceivedQty > 0)", conn);

                SqlCommand cmdGetPurchaseOrderDetails = new SqlCommand("SELECT * FROM PurchasingOrderItems " +
                                                                       "WHERE purchase_order_no=@PurchaseOrderNo", conn);


                SqlCommand cmdDeletePOItem = new SqlCommand("DELETE FROM PurchasingOrderItems " +
                                                            "WHERE purchase_order_no = @PurchaseOrderNo AND product_id = @ProductID", conn);
                //Update ProductStock
                SqlCommand cmdGetPOItemQty = new SqlCommand("SELECT * FROM PurchasingOrderItems WHERE purchase_order_no=@PurchasingOrderNo", conn);
                SqlCommand cmdDeductPS = new SqlCommand("UPDATE ProductStock SET total_supply -= @TotalSupply " +
                                                        "WHERE product_id = @ProductNo AND stock_location_id=@StockLocationID", conn);

                SqlCommand cmdAddPS = new SqlCommand("UPDATE ProductStock SET total_supply += @TotalSupply " +
                                                        "WHERE product_id = @ProductNo AND stock_location_id=@StockLocationID", conn);

                SqlCommand cmdUpdatePOItemsDates = new SqlCommand("UPDATE PurchasingOrderItems SET line_status=@LineStatus,last_updated_by = @LastUpdatedBy,last_updated_date =@LastUpdatedDate " +
                                                                  "WHERE purchase_order_no = @PurchaseOrderNo AND product_id = @ProductID", conn);

                SqlCommand cmdUpdatePODates = new SqlCommand("UPDATE PurchasingOrders SET last_modified_by = @LastUpdatedBy,last_modified_date =@LastUpdatedDate " +
                                                             "WHERE purchasing_order_no = @PurchaseOrderNo", conn);

                //Add to ProductStock
                SqlCommand cmdUpdateProdStock = new SqlCommand("UPDATE ProductStock SET qty_available += @QtyAvailable,total_supply +=@TotalSupply,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy " +
                                                               "WHERE stock_location_id = @StockLocationID AND product_id = @ProductID", conn);

                //UPDATE PurchasingOrder status
                SqlCommand cmdUpdatePOStatus = new SqlCommand("UPDATE PurchasingOrders SET last_modified_date=@LastModifiedDate,last_modified_by=@LastModifiedBy " +
                                                              "WHERE purchasing_order_no = @PurchaseOrderNo", conn);

                SqlCommand cmdInsertProdTransactions = new SqlCommand("INSERT INTO ProductTransactions(transaction_date,qty,type,reason,sales_no,shipping_no,purchase_no,work_order_no,product_id,line_no,added_by) " +
                                                                      "VALUES (@TransactionDate,@Qty,@Type,@Reason,@SalesNo,@ShippingNo,@PurchaseNo,@WorkOrderNo,@ProductID,@LineNo,@AddedBy)", conn);

                SqlCommand cmdInsertPurchasOrderItemHistory = new SqlCommand("INSERT INTO PurchasingOrderItemsHistory(purchasing_order_no,product_id,received_qty,comment,updated_by,updated_time) " +
                                                                      "VALUES (@PurchasingOrderNo,@ProductID,@ReceivedQty,@Comment,@UpdatedBy,@UpdatedTime)", conn);


                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                  
                    if (po.Status == "Canceled")
                    {
                        List<PurchaseOrderDetails> podTempList = new List<PurchaseOrderDetails>();
                        cmdGetPOItemQty.Parameters.AddWithValue("@PurchasingOrderNo", po.PurchasingOrderNo);
                        cmdGetPOItemQty.Transaction = trans;
                        using (SqlDataReader dr = cmdGetPOItemQty.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PurchaseOrderDetails pod = new PurchaseOrderDetails();
                                    pod.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                    pod.OrderQty = Convert.ToDecimal(dr["order_qty"]);
                                    podTempList.Add(pod);
                                }
                            }
                        }

                        foreach (var item in podTempList)
                        {
                            cmdDeductPS.Transaction = trans;
                            cmdDeductPS.Parameters.AddWithValue("@ProductNo", item.Product.ProductID);
                            cmdDeductPS.Parameters.AddWithValue("@StockLocationID", 1);
                            cmdDeductPS.Parameters.AddWithValue("@TotalSupply", item.RecievedQty);
                            cmdDeductPS.ExecuteNonQuery();
                            cmdDeductPS.Parameters.Clear();
                        }
                    }

                    cmdUpdatePO.Transaction = trans;
                    cmdUpdatePO.Parameters.AddWithValue("@PurchasingOrderNo", po.PurchasingOrderNo);
                    cmdUpdatePO.Parameters.AddWithValue("@Status", po.Status);
                    cmdUpdatePO.Parameters.AddWithValue("@SupplierQuoteReference", po.SupplierQuoteReference ?? (object)DBNull.Value);
                    cmdUpdatePO.Parameters.AddWithValue("@SubTotal", po.SubTotal);
                    cmdUpdatePO.Parameters.AddWithValue("@GST", po.Tax);
                    cmdUpdatePO.Parameters.AddWithValue("@GrandTotal", po.TotalAmount);
                    cmdUpdatePO.Parameters.AddWithValue("@Completed", po.Completed);
                    resPo = cmdUpdatePO.ExecuteNonQuery();

                    List<int> resPoItemList = new List<int>();
                    foreach (var item in po.PurchaseOrderDetails)
                    {
                        int r = 0;
                        cmdUpdatePOItems.Transaction = trans;
                        cmdUpdatePOItems.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                        cmdUpdatePOItems.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdatePOItems.Parameters.AddWithValue("@OrderQty", item.OrderQty);
                        cmdUpdatePOItems.Parameters.AddWithValue("@ReceivedQty", item.TotalRecieved);
                        cmdUpdatePOItems.Parameters.AddWithValue("@LineNo", item.LineNo);
                        cmdUpdatePOItems.Parameters.AddWithValue("@LineStatus", item.LineStatus);
                        cmdUpdatePOItems.Parameters.AddWithValue("@Total", item.Total);
                        cmdUpdatePOItems.Parameters.AddWithValue("@Result", item.Result);
                        cmdUpdatePOItems.Parameters.AddWithValue("@LineDesiredReservedDate", po.RecieveOnDate);
                        cmdUpdatePOItems.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdUpdatePOItems.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        r = cmdUpdatePOItems.ExecuteNonQuery();
                        if (r > 0)
                        {
                            resPoItemList.Add(r);
                        }
                        cmdUpdatePOItems.Parameters.Clear();
                    }

                    /**DELETE ORDERS**/
                    List<PurchaseOrderDetails> podList = new List<PurchaseOrderDetails>();
                    cmdGetPurchaseOrderDetails.Transaction = trans;
                    cmdGetPurchaseOrderDetails.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                    using (SqlDataReader dr = cmdGetPurchaseOrderDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                PurchaseOrderDetails pod = new PurchaseOrderDetails();

                                pod.ID = Convert.ToInt32(dr["id"]);
                                pod.PurchaseOrderID = Convert.ToInt32(dr["purchase_order_no"]);
                                pod.LineNo = Convert.ToInt16(dr["line_no"]);
                                pod.LineStatus = dr["line_status"].ToString();
                                pod.OrderQty = Convert.ToDecimal(dr["order_qty"]);
                                pod.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                pod.Total = Convert.ToDecimal(dr["total"]);
                                pod.LineDesiredRecieveDate = Convert.ToDateTime(dr["line_desired_received_date"]);
                                pod.LastUpdatedBy = dr["last_updated_by"].ToString();
                                pod.LastUpdatedDate = Convert.ToDateTime(dr["last_updated_date"]);
                                podList.Add(pod);
                                cmdGetPurchaseOrderDetails.Parameters.Clear();
                            }
                        }
                    }
                    int resDelPOD = 0;
                    foreach (var itemSOL in podList)
                    {
                        bool exist = po.PurchaseOrderDetails.Any(x => x.Product.ProductID == itemSOL.Product.ProductID && x.PurchaseOrderID == itemSOL.PurchaseOrderID);
                        if (exist == false)
                        {
                            cmdDeletePOItem.Transaction = trans;
                            cmdDeletePOItem.Parameters.AddWithValue("@PurchaseOrderNo", itemSOL.PurchaseOrderID);
                            cmdDeletePOItem.Parameters.AddWithValue("@ProductID", itemSOL.Product.ProductID);
                            resDelPOD = cmdDeletePOItem.ExecuteNonQuery();
                            cmdDeletePOItem.Parameters.Clear();
                        }
                    }

                    //Update last updated date in purchasing orders and purchasing order items
                    if (resPoItemList.Count > 0 || resDelPOD > 0 || resPo > 0)
                    {

                        //Purchasing Orders
                        if (resPo > 0 || resPoItemList.Count > 0 || resDelPOD > 0)
                        {
                            cmdUpdatePODates.Transaction = trans;
                            cmdUpdatePODates.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                            cmdUpdatePODates.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                            cmdUpdatePODates.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                            int r = cmdUpdatePODates.ExecuteNonQuery();
                            if (r > 0)
                            {
                                result = 1;
                            }
                        }
                        //Update last updated by and date Purchasing Order Items
                        if (resPoItemList.Count > 0)
                        {
                            foreach (var item in po.PurchaseOrderDetails)
                            {
                                cmdUpdatePOItemsDates.Transaction = trans;
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@LineStatus", item.LineStatus);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                cmdUpdatePOItemsDates.ExecuteNonQuery();
                                cmdUpdatePOItemsDates.Parameters.Clear();
                            }
                        }
                    }

                    /**ADD to ProductStock**/
                    List<int> resPS = new List<int>();
                    List<int> resTrans = new List<int>();
                    List<int> resPOIHis = new List<int>();
                    if (addToStock)
                    {
                        foreach (var item in po.PurchaseOrderDetails)
                        {
                            if (item.EnteredQty > 0)
                            {

                                cmdUpdateProdStock.Transaction = trans;
                                cmdUpdateProdStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdateProdStock.Parameters.AddWithValue("@StockLocationID", 1);
                                cmdUpdateProdStock.Parameters.AddWithValue("@QtyAvailable", item.EnteredQty);
                                cmdUpdateProdStock.Parameters.AddWithValue("@TotalSupply", item.EnteredQty);
                                cmdUpdateProdStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                cmdUpdateProdStock.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                int r = cmdUpdateProdStock.ExecuteNonQuery();
                                cmdUpdateProdStock.Parameters.Clear();
                                if (r > 0)
                                {
                                    resPS.Add(r);
                                }

                                cmdUpdatePOItemsDates.Transaction = trans;
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@LineStatus", item.LineStatus.ToString());
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                cmdUpdatePOItemsDates.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                cmdUpdatePOItemsDates.ExecuteNonQuery();
                                cmdUpdatePOItemsDates.Parameters.Clear();

                                /**INSERT to ProductTransactions**/
                                cmdInsertProdTransactions.Transaction = trans;
                                cmdInsertProdTransactions.Parameters.AddWithValue("@TransactionDate", DateTime.Now);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@Qty", "+" + item.EnteredQty);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@Type", ProductTransactionsStatus.Purchasing.ToString());
                                cmdInsertProdTransactions.Parameters.AddWithValue("@Reason", "Purchasing Order");
                                cmdInsertProdTransactions.Parameters.AddWithValue("@SalesNo", 0);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@ShippingNo", 0);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@PurchaseNo", po.PurchasingOrderNo);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@WorkOrderNo", 0);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@LineNo", item.LineNo);
                                cmdInsertProdTransactions.Parameters.AddWithValue("@AddedBy", UserData.FirstName + " " + UserData.LastName);
                                int r1 = cmdInsertProdTransactions.ExecuteNonQuery();
                                cmdInsertProdTransactions.Parameters.Clear();
                                if (r1 > 0)
                                {
                                    resTrans.Add(r);
                                }


                                /**INSERT to PurchasingOrderItemHistory**/
                                cmdInsertPurchasOrderItemHistory.Transaction = trans;
                                cmdInsertPurchasOrderItemHistory.Parameters.AddWithValue("@PurchasingOrderNo", po.PurchasingOrderNo);
                                cmdInsertPurchasOrderItemHistory.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertPurchasOrderItemHistory.Parameters.AddWithValue("@ReceivedQty", item.EnteredQty);
                                cmdInsertPurchasOrderItemHistory.Parameters.AddWithValue("@Comment", item.Result);
                                cmdInsertPurchasOrderItemHistory.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                cmdInsertPurchasOrderItemHistory.Parameters.AddWithValue("@UpdatedTime", DateTime.Now);
                                int r2 = cmdInsertPurchasOrderItemHistory.ExecuteNonQuery();
                                cmdInsertPurchasOrderItemHistory.Parameters.Clear();
                                if (r2 > 0)
                                {
                                    resPOIHis.Add(r);
                                }
                            }
                        }
                        if (resPS.Count > 0 && resTrans.Count > 0 && resPOIHis.Count > 0)
                        {
                            cmdUpdatePOStatus.Transaction = trans;
                            cmdUpdatePOStatus.Parameters.AddWithValue("@PurchaseOrderNo", po.PurchasingOrderNo);
                            //cmdUpdatePOStatus.Parameters.AddWithValue("@Status", "Received");
                            cmdUpdatePOStatus.Parameters.AddWithValue("@LastModifiedBy", UserData.FirstName + " " + UserData.LastName);
                            cmdUpdatePOStatus.Parameters.AddWithValue("@LastModifiedDate", DateTime.Now);
                            cmdUpdatePOStatus.Parameters.AddWithValue("@Completed", po.Completed);
                            int r = cmdUpdatePOStatus.ExecuteNonQuery();
                        }
                        else
                        {
                            result = -1;
                        }
                    }

                    //if (addToStock)
                    //{
                    //    result = 2;
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static ObservableCollection<PurchaseOrder> GetPurchaseOrdersBySearch(Supplier supplier, string from, string to)
        {
            SqlTransaction trans = null;
            string where = string.Empty;

            if (supplier != null && (string.IsNullOrWhiteSpace(from) && string.IsNullOrWhiteSpace(to)))
            {
                where = "WHERE supplier_id = " + supplier.SupplierID;
            }
            else if (supplier != null && (!string.IsNullOrWhiteSpace(from) && string.IsNullOrWhiteSpace(to)))
            {
                where = "WHERE supplier_id = " + supplier.SupplierID + " AND purchasing_order_no = " + from;
            }
            else if (supplier != null && (string.IsNullOrWhiteSpace(from) && !string.IsNullOrWhiteSpace(to)))
            {
                where = "WHERE supplier_id = " + supplier.SupplierID + " AND purchasing_order_no = " + to;
            }
            else if (supplier != null && (!string.IsNullOrWhiteSpace(from) && !string.IsNullOrWhiteSpace(to)))
            {
                where = "WHERE supplier_id = " + supplier.SupplierID + " AND purchasing_order_no BETWEEN " + from + " AND " + to + " ";
            }
            else if (supplier == null && (!string.IsNullOrWhiteSpace(from) && string.IsNullOrWhiteSpace(to)))
            {
                where = "WHERE purchasing_order_no = " + from;
            }
            else if (supplier == null && (!string.IsNullOrWhiteSpace(to) && string.IsNullOrWhiteSpace(from)))
            {
                where = "WHERE purchasing_order_no = " + to;
            }
            else if (supplier == null && (!string.IsNullOrWhiteSpace(from) && !string.IsNullOrWhiteSpace(to)))
            {
                where = "WHERE purchasing_order_no BETWEEN " + from + " AND " + to + " ";
            }

            ObservableCollection<PurchaseOrder> poList = new ObservableCollection<PurchaseOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {

                    SqlCommand cmdGetPO = new SqlCommand("SELECT PurchasingOrders.purchasing_order_no,PurchasingOrders.supplier_id,Supplier.supplier_name,PurchasingOrders.order_date,PurchasingOrders.order_time,PurchasingOrders.recieve_on_date,PurchasingOrders.status,PurchasingOrders.supplier_quote_reference,PurchasingOrders.last_modified_by,PurchasingOrders.last_modified_date,PurchasingOrders.purchase_from,PurchasingOrders.ship_to,PurchasingOrders.sub_total,PurchasingOrders.gst,PurchasingOrders.grand_total,PurchasingOrders.last_recieved_date,PurchasingOrders.completed, " +
                                                         "Comments.comment " +
                                                         "FROM PurchasingOrders " +
                                                         "INNER JOIN Supplier ON PurchasingOrders.supplier_id = Supplier.id " +
                                                         "LEFT JOIN Comments ON PurchasingOrders.purchasing_order_no = Comments.no AND Comments.prefix='PO' " +
                                                         "" + where + "" +
                                                         "ORDER BY PurchasingOrders.recieve_on_date DESC", conn);

                    SqlCommand cmdGetPoItems = new SqlCommand("SELECT PurchasingOrderItems.id,PurchasingOrderItems.purchase_order_no,PurchasingOrderItems.line_no,PurchasingOrderItems.line_status,PurchasingOrderItems.order_qty,PurchasingOrderItems.product_id,Products.product_code,Products.product_description,Products.unit,Products.material_cost,PurchasingOrderItems.total,PurchasingOrderItems.line_desired_received_date,PurchasingOrderItems.last_updated_by,PurchasingOrderItems.last_updated_date " +
                                                                      "FROM PurchasingOrderItems " +
                                                                      "INNER JOIN Products ON PurchasingOrderItems.product_id = Products.id", conn);
                    {

                        conn.Open();
                        trans = conn.BeginTransaction();
                        cmdGetPO.Transaction = trans;
                        //cmdGetData.Parameters.AddWithValue("@Status", "");
                        using (SqlDataReader dr = cmdGetPO.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PurchaseOrder po = new PurchaseOrder();
                                    po.PurchaseOrderDetails = new ObservableCollection<PurchaseOrderDetails>();
                                    //po.OrderType = dr["order_type"].ToString();
                                    po.PurchasingOrderNo = Convert.ToInt32(dr["purchasing_order_no"]);
                                    po.Supplier = new Supplier() { SupplierID = Convert.ToInt16(dr["supplier_id"]), SupplierName = dr["supplier_name"].ToString() };
                                    po.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    po.OrderTIme = (TimeSpan)dr["order_time"];
                                    po.RecieveOnDate = Convert.ToDateTime(dr["recieve_on_date"]);
                                    //po.ReceivedDate = CheckNull<DateTime>(dr["received_date"]);
                                    po.Status = dr["status"].ToString();
                                    po.SupplierQuoteReference = dr["supplier_quote_reference"].ToString();
                                    po.LastModifiedDate = CheckNull<DateTime>(dr["last_modified_date"]);
                                    po.PurchaseFrom = dr["purchase_from"].ToString();
                                    po.ShipTo = dr["ship_to"].ToString();
                                    po.SubTotal = CheckNull<decimal>(dr["sub_total"]);
                                    po.Tax = CheckNull<decimal>(dr["gst"]);
                                    po.TotalAmount = CheckNull<decimal>(dr["grand_total"]);
                                    po.LastRecievedDate = CheckNull<DateTime>(dr["last_recieved_date"]);
                                    po.Completed = Convert.ToBoolean(dr["completed"]);
                                    po.Notes = dr["comment"].ToString();
                                    poList.Add(po);
                                }
                            }
                        }
                        cmdGetPoItems.Transaction = trans;
                        cmdGetPoItems.Parameters.AddWithValue("@ParaCode", "A1Address");
                        using (SqlDataReader dr = cmdGetPoItems.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    foreach (var item in poList)
                                    {
                                        if (item.PurchasingOrderNo == Convert.ToInt32(dr["purchase_order_no"]))
                                        {
                                            PurchaseOrderDetails pod = new PurchaseOrderDetails();
                                            pod.ID = Convert.ToInt32(dr["id"]);
                                            pod.PurchaseOrderID = Convert.ToInt32(dr["purchase_order_no"]);
                                            pod.LineNo = Convert.ToInt16(dr["line_no"]);
                                            pod.LineStatus = dr["line_status"].ToString();
                                            pod.OrderQty = Convert.ToDecimal(dr["order_qty"]);
                                            pod.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString(), ProductUnit = dr["unit"].ToString(), MaterialCost = Convert.ToDecimal(dr["material_cost"]) };
                                            pod.Total = Convert.ToDecimal(dr["total"]);
                                            pod.LineDesiredRecieveDate = Convert.ToDateTime(dr["line_desired_received_date"]);
                                            pod.LastUpdatedDate = Convert.ToDateTime(dr["last_updated_date"]);
                                            pod.LastUpdatedBy = dr["last_updated_by"].ToString();
                                            //item.PurchaseOrderDetails = new ObservableCollection<PurchaseOrderDetails>();
                                            item.PurchaseOrderDetails.Add(pod);
                                        }
                                    }

                                }
                            }
                        }

                        trans.Commit();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return poList;
        }

        public static ObservableCollection<DispatchOrder> GetAllDispatchOrders(string dispatchRadio, DateTime from, DateTime to)
        {
            ObservableCollection<DispatchOrder> dispatchOrderList = new ObservableCollection<DispatchOrder>();
            string where_clause = string.Empty;
            string currDate = DateTime.Now.Date.ToString("yyyy-MM-dd");
            string fromDate = from.ToString("yyyy-MM-dd");
            string toDate = to.ToString("yyyy-MM-dd");

            if (dispatchRadio == null || string.IsNullOrEmpty(dispatchRadio))
            {
                dispatchRadio = "All";
            }

            switch (dispatchRadio)
            {
                case "Dispatched": where_clause = "DispatchOrders.order_status ='Finalised' AND SalesOrder.order_status = 'PreparingInvoice' AND DispatchOrders.dispatched_date >= @FromDate AND DispatchOrders.dispatched_date <= @ToDate ";
                    break;
                case "ReadyToDis": where_clause = "DispatchOrders.order_status = 'Preparing' AND SalesOrder.order_status = 'FinalisingShipping' OR DispatchOrders.order_status = 'Preparing' AND SalesOrder.order_status = 'HoldStockAllocated' OR DispatchOrders.order_status = 'Preparing' AND SalesOrder.order_status = 'HoldStockAllocated' ";
                    break;
                default:
                    break;
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT DispatchOrders.id AS DispatchID, DispatchOrders.sales_no,DispatchOrders.con_note_number,DispatchOrders.order_dispatched,DispatchOrders.order_status,DispatchOrders.is_processing,DispatchOrders.delivery_docket_no, " +
                                                                  "SalesOrder.order_status AS SalesOrderStatus,SalesOrder.quote_no,SalesOrder.dispatch_date,DispatchOrders.dispatched_date,SalesOrder.order_date,SalesOrder.ship_to,SalesOrder.bill_to,SalesOrder.list_price_total,SalesOrder.freight_total,SalesOrder.gst,SalesOrder.total_amount,SalesOrder.customer_order_no,SalesOrder.pickup_time,SalesOrder.sales_completed_by,SalesOrder.last_modified_by,SalesOrder.sales_made_by,SalesOrder.terms_id,SalesOrder.payment_recieved,  " +
                                                                  "ISNULL(Customers.id,0) AS CustomerID,Customers.company_name,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.company_email,Customers.email1,Customers.email2,Customers.email3,  " +
                                                                  "PrePaidCustomers.prepaid_customer_name, " +
                                                                  "Freight.ID AS FreightID,Freight.FreightName,  " +
                                                                  "StockLocation.id AS StockID,StockLocation.stock_name, " +
                                                                  "Comments.comment  " +
                                                                  "FROM dbo.DispatchOrders  " +
                                                                  "INNER JOIN dbo.SalesOrder ON DispatchOrders.sales_no = SalesOrder.sales_no  " +
                                                                  "LEFT JOIN dbo.Customers ON SalesOrder.customer_id = Customers.id  " +
                                                                  "LEFT JOIN dbo.PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                                  "INNER JOIN dbo.Freight ON SalesOrder.freight_id = Freight.ID  " +
                                                                  "INNER JOIN dbo.StockLocation ON SalesOrder.stock_location = StockLocation.id " +
                                                                  "INNER JOIN dbo.Comments ON SalesOrder.sales_no = Comments.no AND Comments.location_id=8 " +
                                                                  "WHERE " + where_clause + " " +
                                                                  "ORDER BY CASE DispatchOrders.order_status  " +
                                                                  "WHEN 'ReadyToDispatch' THEN 1  " +
                                                                  "WHEN 'Dispatched' THEN 2  " +
                                                                  "WHEN 'Cancelled' THEN 3  " +
                                                                  "WHEN 'Return' THEN 4 " +
                                                                  "WHEN 'Return' THEN 5 END", conn))
                    {

                        cmdGetData.Parameters.AddWithValue("@FromDate", fromDate);
                        cmdGetData.Parameters.AddWithValue("@ToDate", toDate);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    DispatchOrder diso = new DispatchOrder();
                                    diso.DispatchOrderID = Convert.ToInt16(dr["DispatchID"]);
                                    diso.CustomerOrderNo = dr["customer_order_no"].ToString();
                                    diso.SalesOrderNo = Convert.ToInt16(dr["sales_no"]);
                                    diso.DeliveryDocketNo = Convert.ToInt16(dr["DispatchID"]);
                                    diso.QuoteNo = Convert.ToInt16(dr["quote_no"]);
                                    diso.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    diso.PickupTime = dr["pickup_time"].ToString();
                                    diso.ConNoteNumber = dr["con_note_number"].ToString();
                                    diso.OrderDispatched = Convert.ToBoolean(dr["order_dispatched"]);
                                    diso.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                    diso.DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]);
                                    diso.ShipTo = dr["ship_to"].ToString();
                                    diso.BillTo = dr["bill_to"].ToString();
                                    diso.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                    diso.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                    diso.GST = Convert.ToDecimal(dr["gst"]);
                                    diso.TotalAmount = Convert.ToDecimal(dr["total_amount"]);

                                    if (Convert.ToInt16(dr["CustomerID"]) > 0)
                                    {
                                        diso.Customer = new Customer() { CompanyName = dr["company_name"].ToString(), FirstName1 = dr["first_name1"].ToString(), LastName1 = dr["last_name1"].ToString(), Telephone1 = dr["telephone1"].ToString(), Mobile1 = dr["mobile1"].ToString(), CompanyEmail = dr["company_email"].ToString(), Email1 = dr["email1"].ToString(), Email2 = dr["email2"].ToString(), Email3 = dr["email3"].ToString() };
                                    }
                                    else
                                    {
                                        diso.Customer = new Customer() { CompanyName = dr["prepaid_customer_name"].ToString() };
                                    }

                                    diso.FreightCarrier = new FreightCarrier() { Id = Convert.ToInt16(dr["FreightID"]), FreightName = dr["FreightName"].ToString() };
                                    diso.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockID"]), StockName = dr["stock_name"].ToString() };
                                    diso.DispatchOrderStatus = dr["order_status"].ToString();
                                    diso.OrderStatus = dr["SalesOrderStatus"].ToString();
                                    diso.SalesCompletedBy = dr["sales_completed_by"].ToString();
                                    diso.LastModifiedBy = dr["last_modified_by"].ToString();
                                    diso.SalesMadeBy = dr["sales_made_by"].ToString();
                                    diso.TermsID = dr["terms_id"].ToString();
                                    diso.IsProcessing = Convert.ToBoolean(dr["is_processing"]);
                                    diso.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                    dispatchOrderList.Add(diso);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("ERROR DISPATCH DETAILS: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return dispatchOrderList;
        }

        public static bool CheckIfDispatchBeingProcessed(Int32 id)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT is_processing FROM DispatchOrders " +
                                                                  "WHERE sales_no=@SalesNo", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@SalesNo", id);

                        object result = cmdGetData.ExecuteScalar();

                        res = (bool)cmdGetData.ExecuteScalar();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading System Parameter Table: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }


        public static DispatchOrder GetDispatchOrderDetails(Int32 salesNo)
        {
            DispatchOrder disO = new DispatchOrder();
            disO.DispatchOrderItem = new ObservableCollection<DispatchOrderItem>();
            disO.Comments = new List<Comment>();
            disO.Invoice = new Invoice();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetOrder = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,SalesOrder.order_priority,SalesOrder.customer_order_no,SalesOrder.bill_to,SalesOrder.ship_to,SalesOrder.pickup_time,SalesOrder.dispatch_date,SalesOrder.terms_id,SalesOrder.payment_recieved,SalesOrder.payment_due_date,SalesOrder.sales_made_by,SalesOrder.sales_completed_by,SalesOrder.order_status,SalesOrder.last_modified_date,SalesOrder.last_modified_by,SalesOrder.time_stamp AS SalesOrderTimeStamp,  " +
	                                                    "DispatchOrders.id AS delivery_docket_no,DispatchOrders.con_note_number,DispatchOrders.order_dispatched,DispatchOrders.dispatched_date,DispatchOrders.order_dispatched AS DispatchOrderStatus,DispatchOrders.is_processing,DispatchOrders.completed_by,DispatchOrders.completed_date_time,DispatchOrders.is_active,DispatchOrders.time_stamp AS DispatchOrderTimestap  " +
                                                        "FROM SalesOrder " +
                                                        "INNER JOIN DispatchOrders ON SalesOrder.sales_no = DispatchOrders.sales_no " +
                                                        "WHERE SalesOrder.sales_no=@SalesNo", conn);

                SqlCommand cmdGetDispOrderItems = new SqlCommand("SELECT DispatchOrderItem.id AS DispatchOrderItemID,DispatchOrderItem.product_id,DispatchOrderItem.order_qty,DispatchOrderItem.packed_qty,DispatchOrderItem.dispatched_qty, " +
                                                                    "Products.product_code,SalesOrderDetails.description,Products.unit,Products.unit_cost,Products.unit_price, " +
                                                                    "SalesOrderDetails.order_line,SalesOrderDetails.discount,SalesOrderDetails.total " +
                                                                    "FROM DispatchOrderItem " +
                                                                    "INNER JOIN dbo.Products ON DispatchOrderItem.product_id = Products.id  " +
                                                                    "INNER JOIN dbo.SalesOrderDetails ON DispatchOrderItem.id = SalesOrderDetails.id " +
                                                                    "WHERE DispatchOrderItem.sales_no = @SalesNo ORDER BY SalesOrderDetails.order_line", conn);

                SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,Freight.ID AS FreightID,Freight.FreightName, " +
                                                                    "FreightCodes.code,FreightCodes.unit AS FreightCode,  " +
                                                                    "FreightDetails.freight_code_id, FreightDetails.description, FreightDetails.pallets,FreightDetails.price AS FreightPrice,FreightDetails.Discount AS FDiscount,FreightDetails.total  " +
                                                                    "FROM SalesOrder  " +
                                                                    "INNER JOIN dbo.Freight ON SalesOrder.freight_id = Freight.ID  " +
                                                                    "INNER JOIN dbo.FreightDetails ON SalesOrder.sales_no = FreightDetails.order_no  " +
                                                                    "INNER JOIN dbo.FreightCodes ON FreightDetails.freight_code_id = FreightCodes.id  " +
                                                                    "WHERE SalesOrder.sales_no = @SalesNo", conn);

                SqlCommand cmdGetComments = new SqlCommand("SELECT * FROM Comments " +
                                                           "WHERE no = @SalesNo AND location_id=@LocationID", conn);

                SqlCommand cmdGetInvoice = new SqlCommand("SELECT * FROM Invoice " +
                                                          "WHERE sales_order_no = @SalesNo AND is_completed='True'", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    cmdGetOrder.Transaction = trans;
                    cmdGetOrder.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetOrder.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                disO.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                disO.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                disO.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                disO.CustomerOrderNo = dr["customer_order_no"].ToString();
                                disO.BillTo = dr["bill_to"].ToString();
                                disO.ShipTo = dr["ship_to"].ToString();
                                disO.PickupTime = dr["pickup_time"].ToString();
                                disO.DispatchedDate = Convert.ToDateTime(dr["dispatch_date"]);
                                disO.TermsID = dr["terms_id"].ToString();
                                disO.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                disO.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                disO.SalesMadeBy = dr["sales_made_by"].ToString();
                                disO.SalesCompletedBy = dr["sales_completed_by"].ToString();
                                disO.OrderStatus = dr["order_status"].ToString();
                                disO.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                disO.LastModifiedBy = dr["last_modified_by"].ToString();
                                disO.DispatchTimeStamp = Convert.ToBase64String(dr["SalesOrderTimeStamp"] as byte[]);
                                disO.DeliveryDocketNo = Convert.ToInt16(dr["delivery_docket_no"]);
                                disO.ConNoteNumber = dr["con_note_number"].ToString();
                                disO.OrderDispatched = Convert.ToBoolean(dr["order_dispatched"]);
                                disO.DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]);
                                disO.IsProcessing = Convert.ToBoolean(dr["is_processing"]);
                                disO.CompletedDateTime = CheckNull<DateTime>(dr["completed_date_time"]);
                                disO.IsActive = Convert.ToBoolean(dr["is_active"]);                                                               
                            }
                        }
                    }

                    cmdGetDispOrderItems.Transaction = trans;
                    cmdGetDispOrderItems.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetDispOrderItems.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                DispatchOrderItem disoItem = new DispatchOrderItem();
                                disoItem.DispatchOrderItemID = Convert.ToInt16(dr["DispatchOrderItemID"]);
                                disoItem.OrderLine = Convert.ToInt16(dr["order_line"]);
                                disoItem.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["description"].ToString(), ProductUnit = dr["unit"].ToString(), UnitCost = Convert.ToDecimal(dr["unit_cost"]), UnitPrice = Convert.ToDecimal(dr["unit_price"]) };
                                disoItem.OrderQty = Convert.ToDecimal(dr["order_qty"]);
                                disoItem.PackedQty = Convert.ToDecimal(dr["packed_qty"]);
                                disoItem.DispatchQty = Convert.ToDecimal(dr["dispatched_qty"]);
                                disoItem.Discount = Convert.ToInt16(dr["discount"]);
                                disoItem.Total = Convert.ToDecimal(dr["total"]);
                                disO.DispatchOrderItem.Add(disoItem);
                            }
                        }
                    }

                    cmdGetFreightDetails.Transaction = trans;
                    cmdGetFreightDetails.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                disO.FreightCarrier = new FreightCarrier() { Id = Convert.ToInt16(dr["FreightID"]), FreightName = dr["FreightName"].ToString() };
                                disO.FreightDetails = new BindingList<FreightDetails>() { new FreightDetails() { FreightCodeDetails = new FreightCode() { ID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["FreightCode"].ToString(), Price = Convert.ToDecimal(dr["FreightPrice"]) }, Discount = Convert.ToInt16(dr["FDiscount"]), Pallets = Convert.ToDecimal(dr["pallets"]) } };
                            }
                        }
                    }

                    cmdGetComments.Transaction = trans;
                    cmdGetComments.Parameters.AddWithValue("@SalesNo", salesNo);
                    cmdGetComments.Parameters.AddWithValue("@LocationID", 8);
                    using (SqlDataReader dr = cmdGetComments.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                disO.Comments.Add(new Comment() { Note = dr["Comment"].ToString() });
                            }
                        }
                    }

                    cmdGetInvoice.Transaction = trans;
                    cmdGetInvoice.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetInvoice.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                disO.Invoice.InvoiceNo = Convert.ToInt16(dr["id"]);
                                disO.Invoice.InvoicedDate = Convert.ToDateTime(dr["invoiced_date"]);
                            }
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("ERROR DISPATCH DETAILS: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return disO;
        }

        public static int ReAssignProductStock(Int32 salesNo, string user)
        {
            int res = 0;
            List<ProductStockReserved> prodStockReserved = new List<ProductStockReserved>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetProdReserved = new SqlCommand("SELECT * FROM ProductStockReserved WHERE sales_no = @SalesNo", conn);
                SqlCommand cmdUpdateProdStock = new SqlCommand("UPDATE ProductStock SET qty+=@Qty,last_updated_date=@LastUpdatedDate,update_by=@UpdatedBy " +
                                                               "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);
                SqlCommand cmdUpdateProductStockReserved = new SqlCommand("UPDATE ProductStockReserved SET status=@Status,activity_date=@ActivityDate " +
                                                                          "WHERE sales_no=@SalesNo AND stock_location_id=@StockLocationID AND product_id=@ProductID", conn);
                SqlCommand cmdUpdateDispatchOrders = new SqlCommand("UPDATE DispatchOrders SET order_dispatched=@OrderDispatched,order_status=@OrderStatus,is_processing='False',completed_by=@CompletedBy,completed_date_time=@CompletedDateTime,is_active='False' " +
                                                                    "WHERE sales_no=@SalesNo", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction(System.Data.IsolationLevel.Serializable);
                try
                {
                    cmdGetProdReserved.Transaction = trans;
                    cmdGetProdReserved.Parameters.AddWithValue("@SalesNo", salesNo);
                    using (SqlDataReader dr = cmdGetProdReserved.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    ProductStockReserved psr = new ProductStockReserved();
                                    psr.ProductStockReservedID = Convert.ToInt32(dr["id"]);
                                    psr.SalesNo = Convert.ToInt32(dr["sales_no"]);
                                    psr.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                    psr.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                    psr.QtyReserved = Convert.ToDecimal(dr["qty_reserved"]);
                                    prodStockReserved.Add(psr);
                                }
                            }
                        }
                    }

                    foreach (var item in prodStockReserved)
                    {
                        cmdUpdateProdStock.Transaction = trans;
                        cmdUpdateProdStock.Parameters.AddWithValue("@Qty", item.QtyReserved);
                        cmdUpdateProdStock.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                        cmdUpdateProdStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdateProdStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        cmdUpdateProdStock.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdUpdateProdStock.ExecuteNonQuery();
                        cmdUpdateProdStock.Parameters.Clear();

                        cmdUpdateProductStockReserved.Transaction = trans;
                        cmdUpdateProductStockReserved.Parameters.AddWithValue("@SalesNo", item.SalesNo);
                        cmdUpdateProductStockReserved.Parameters.AddWithValue("@StockLocationID", item.StockLocation.ID);
                        cmdUpdateProductStockReserved.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        cmdUpdateProductStockReserved.Parameters.AddWithValue("@Status", StockReserved.ReAllocated.ToString());
                        cmdUpdateProductStockReserved.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
                        res = cmdUpdateProductStockReserved.ExecuteNonQuery();
                        cmdUpdateProductStockReserved.Parameters.Clear();
                    }

                    cmdUpdateDispatchOrders.Transaction = trans;
                    cmdUpdateDispatchOrders.Parameters.AddWithValue("@SalesNo", salesNo);
                    cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderDispatched", false);
                    cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderStatus", OrderStatus.Cancel.ToString());
                    cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedBy", UserData.FirstName + " " + UserData.LastName);
                    cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedDateTime", DateTime.Now);
                    cmdUpdateDispatchOrders.ExecuteNonQuery();




                    //cmdUpdate.Transaction = trans;
                    //cmdUpdate.Parameters.AddWithValue("@SalesNo", id);
                    //cmdUpdate.ExecuteNonQuery();

                    //cmdGetIdFree.Transaction = trans;
                    //using (SqlDataReader dr = cmdGetIdFree.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        if (dr.HasRows)
                    //        {
                    //            while (dr.Read())
                    //            {
                    //                ddIds.Add(Convert.ToInt32(dr["id"]));
                    //            }
                    //        }
                    //    }
                    //}

                    ////System.Threading.Thread.Sleep(4000);                      

                    //if (ddIds.Count == 1)
                    //{
                    //    firstSalesId = ddIds[0];

                    //    cmdUpdateStatus.Transaction = trans;
                    //    cmdUpdateStatus.Parameters.AddWithValue("@FDDID", firstSalesId);
                    //    cmdUpdateStatus.ExecuteNonQuery();

                    //    orderId = firstSalesId + 1;
                    //    cmdCrateNewDDId.Transaction = trans;
                    //    cmdCrateNewDDId.Parameters.AddWithValue("@DDID", orderId);
                    //    cmdCrateNewDDId.Parameters.AddWithValue("@Status", "FREE");
                    //    cmdCrateNewDDId.ExecuteNonQuery();
                    //}
                    //else if (ddIds.Count > 1)
                    //{
                    //    firstSalesId = ddIds.Min();
                    //    cmdUpdateStatus.Transaction = trans;
                    //    cmdUpdateStatus.Parameters.AddWithValue("@FDDID", firstSalesId);
                    //    cmdUpdateStatus.ExecuteNonQuery();
                    //}
                    //else if (ddIds.Count == 0)
                    //{
                    //    cmdGetMaxId.Transaction = trans;
                    //    Int32 maxId = (Int32)cmdGetMaxId.ExecuteScalar();

                    //    firstSalesId = maxId + 1;
                    //    cmdCrateNewDDId.Transaction = trans;
                    //    cmdCrateNewDDId.Parameters.AddWithValue("@DDID", firstSalesId);
                    //    cmdCrateNewDDId.Parameters.AddWithValue("@Status", "TAKEN");
                    //    cmdCrateNewDDId.ExecuteNonQuery();
                    //    cmdCrateNewDDId.Parameters.Clear();

                    //    orderId = firstSalesId + 1;
                    //    cmdCrateNewDDId.Transaction = trans;
                    //    cmdCrateNewDDId.Parameters.AddWithValue("@DDID", orderId);
                    //    cmdCrateNewDDId.Parameters.AddWithValue("@Status", "FREE");
                    //    cmdCrateNewDDId.ExecuteNonQuery();
                    //}

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static int DispatchOrder(DispatchOrder dispatchOrder, List<Tuple<string, Int16, string>> oldTimeStamps)
        {
            int result = 0;
            string newTimeStamp = string.Empty;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                List<Tuple<string, Int16, string>> newTimeStamps = GetDispatchOrderTimeStamp(dispatchOrder.SalesOrderNo);


                SqlCommand cmdUpdateDispatchOrders = new SqlCommand("UPDATE DispatchOrders SET delivery_docket_no=@DeliveryDocketNo,con_note_number=@ConNoteNumber,order_dispatched=@OrderDispatched,dispatched_date=@DispatchedDate,is_processing=@IsProcessing,completed_by=@CompletedBy,completed_date_time=@CompletedDateTime,order_status=@OrderStatus,is_active=@IsActive " +
                                                                    "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdUpdateStockReserved = new SqlCommand("DELETE ProductStockReserved " +
                                                                   "WHERE sales_no=@SalesNo AND product_id=@ProductID", conn);

                SqlCommand cmdUpdateSalesOrder = new SqlCommand("UPDATE SalesOrder SET order_status=@OrderStaus " +
                                                                "WHERE sales_no = @SalesNo", conn);

                SqlCommand cmdInsUpInvoice = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Invoice WHERE sales_order_no=@SalesOrderNo) " +
                                                            "INSERT INTO Invoice(sales_order_no,invoiced_date,exported_to_myob,completed_date,completed_by,is_completed,is_taken,is_active) VALUES(@SalesOrderNo,@InvoicedDate,@ExportToMyOb,@CompletedDate,@CompletedBy,@IsCompleted,@IsTaken,@IsActive) " +
                                                            "ELSE " +
                                                            "UPDATE Invoice SET invoiced_date = @InvoicedDate,exported_to_myob=@ExportToMyob,completed_date=@CompletedDate,completed_by=@CompletedBy,is_completed=@IsCompleted,is_active=@IsActive " +
                                                            "WHERE sales_order_no=@SalesOrderNo", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    //Check if timestamps are not changed
                    bool exec = false;
                    foreach (var items in oldTimeStamps)
                    {
                        exec = newTimeStamps.Any(z => z.Item1 == items.Item1 && z.Item2 == items.Item2 && z.Item3.Equals(items.Item3));
                        if (exec == false)
                        {
                            break;
                        }
                    }

                    if (exec)
                    {
                        cmdUpdateDispatchOrders.Transaction = trans;
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@DeliveryDocketNo", dispatchOrder.DeliveryDocketNo);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@ConNoteNumber", dispatchOrder.ConNoteNumber);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@SalesNo", dispatchOrder.SalesOrderNo);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@DispatchedDate", DateTime.Now);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderDispatched", true);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsProcessing", false);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedBy", UserData.FirstName + " "+ UserData.LastName);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@CompletedDateTime", DateTime.Now);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@OrderStatus", dispatchOrder.OrderStatus);
                        cmdUpdateDispatchOrders.Parameters.AddWithValue("@IsActive", dispatchOrder.IsActive);
                        int dis = cmdUpdateDispatchOrders.ExecuteNonQuery();

                        cmdUpdateSalesOrder.Transaction = trans;
                        cmdUpdateSalesOrder.Parameters.AddWithValue("@SalesNo", dispatchOrder.SalesOrderNo);
                        cmdUpdateSalesOrder.Parameters.AddWithValue("@OrderStaus", OrderStatus.PreparingInvoice.ToString());
                        int sa = cmdUpdateSalesOrder.ExecuteNonQuery();


                        cmdInsUpInvoice.Transaction = trans;
                        cmdInsUpInvoice.Parameters.AddWithValue("@SalesOrderNo", dispatchOrder.SalesOrderNo);
                        cmdInsUpInvoice.Parameters.AddWithValue("@InvoicedDate", dispatchOrder.DispatchedDate);
                        cmdInsUpInvoice.Parameters.AddWithValue("@ExportToMyob", false);
                        cmdInsUpInvoice.Parameters.AddWithValue("@CompletedDate", DBNull.Value);
                        cmdInsUpInvoice.Parameters.AddWithValue("@CompletedBy", string.Empty);
                        cmdInsUpInvoice.Parameters.AddWithValue("@IsCompleted", false);
                        cmdInsUpInvoice.Parameters.AddWithValue("@IsTaken", true);
                        cmdInsUpInvoice.Parameters.AddWithValue("@IsActive", true);
                        int inv = cmdInsUpInvoice.ExecuteNonQuery();

                        if (dis > 0 && sa > 0 && inv > 0)
                        {
                            result = 1;
                            trans.Commit();
                        }
                        else
                        {
                            result = -2;
                            trans.Rollback();
                        }
                    }
                    else
                    {
                        result = -1;
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<Category> GetCategories()
        {
            List<Category> categoryList = new List<Category>();


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("SELECT * FROM Category WHERE id <> 8 AND  id <> 9 " +
                                                    "ORDER BY category_name", conn);

                    conn.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string str = dr["discount_structure"].ToString();
                                List<string> lstr = str.Split(',').ToList();
                                Category c = new Category();
                                c.CategoryID = Convert.ToInt16(dr["id"]);
                                c.CategoryName = dr["category_name"].ToString();
                                c.CategoryDescription = dr["category_description"].ToString();
                                c.Discounts = new List<int>();
                                c.DocumentPath = dr["category_document_path"].ToString();

                                foreach (var item in lstr)
                                {
                                    if (!string.IsNullOrWhiteSpace(item))
                                    {
                                        c.Discounts.Add(Convert.ToInt16(item));
                                    }
                                }

                                categoryList.Add(c);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return categoryList;
        }

        public static List<ProductInstalled> GetProductsInstalled()
        {
            List<ProductInstalled> prodColl = new List<ProductInstalled>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT ProductInstalled.customer_id,ProductInstalled.product_type_id,ProductTypes.product_type,Customers.company_name " +
                                                                  "FROM ProductInstalled " +
                                                                  "INNER JOIN Customers ON ProductInstalled.customer_id = Customers.id " +
                                                                  "INNER JOIN ProductTypes ON ProductInstalled.product_type_id = ProductTypes.id " +
                                                                  "ORDER BY product_type", conn))
                    {
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ProductInstalled prodIns = new ProductInstalled();
                                    prodIns.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                    prodIns.ProductType = new ObservableCollection<ProductType>();
                                    prodIns.ProductType.Add(new ProductType() { ProductTypeID = Convert.ToInt16(dr["product_type_id"]), Type = dr["product_type"].ToString() });
                                    prodColl.Add(prodIns);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading production line: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return prodColl;
        }

        public static Tuple<int,string,string,Customer> UpdateCustomerDB(Customer customer, string userName, AdminNote adminNote)
        {
            Customer verifiedCustomer = new Customer();
            verifiedCustomer.DiscountStructure = new ObservableCollection<DiscountStructure>();
            verifiedCustomer.ProductsInstalled = new ObservableCollection<ProductType>();
            List<int> insPI = new List<int>();
            List<int> ud = new List<int>();
            string newTimeStamp = string.Empty;
            string lastUpdatedStr = string.Empty;
            int res = 0;
            int uc=0;
            int resAdminNote = 0;
            
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetCustomerTimeStamp = new SqlCommand("SELECT  time_stamp,last_updated_by,last_updated_datetime FROM Customers WHERE id =@CustomerID", conn);

                SqlCommand cmdGetDiscountTimeStamp = new SqlCommand("SELECT  * FROM Discount WHERE customer_id =@CustomerID AND category_id=@CategoryID", conn);

                SqlCommand cmdUpdateDiscount = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Discount " +
                                                              "WHERE customer_id = @CustomerID AND category_id=@CategoryID) " +
                                                              "INSERT INTO Discount(customer_id,category_id,discount,comment,updated_date,updated_by) VALUES(@CustomerID,@CategoryID,@Discount,@Comment,@UpdatedDate,@UpdatedBy) " +
                                                              "ELSE " +
                                                              "UPDATE Discount SET discount = @Discount,updated_date= @UpdatedDate,updated_by=@UpdatedBy " +
                                                              "WHERE customer_id = @CustomerID AND category_id=@CategoryID AND (discount <> @Discount)", conn);

                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET customer_type=@CustomerType,primary_business=@PrimaryBusiness,company_name= @CompanyName,company_address=@CompanyAddress,company_city=@CompanyCity,company_state=@CompanyState,company_postcode=@CompanyPostcode,company_country=@CompanyCountry,company_email = @CompanyEmail,company_telephone=@CompanyTelephone,company_fax=@CompanyFax,designation1=@Designation1,first_name1=@FirstName1,last_name1=@LastName1,telephone1=@Telephone1,mobile1=@Mobile1,fax1=@Fax1,email1=@Email1,designation2=@Designation2,first_name2=@FirstName2,last_name2=@LastName2,telephone2=@Telephone2,mobile2=@Mobile2,fax2=@Fax2,email2=@Email2,designation3=@Designation3,first_name3=@FirstName3,last_name3=@LastName3,telephone3=@Telephone3,mobile3=@Mobile3,fax3=@Fax3,email3=@Email3,ship_address=@ShipAddress,ship_city=@ShipCity,ship_state=@ShipState,ship_postcode=@ShipPostcode,ship_country=@ShipCountry,active=@Active,stop_credit=@StopCredit " +
                                                              "WHERE id=@CustomerID AND EXISTS " +
                                                              "( " +
                                                              "SELECT customer_type,primary_business,company_name,company_address,company_city,company_state,company_postcode,company_country,company_email,company_telephone,company_fax,designation1,first_name1,last_name1,telephone1,mobile1,fax1,email1,designation2,first_name2,last_name2,telephone2,mobile2,fax2,email2,designation3,first_name3,last_name3,telephone3,mobile3,fax3,email3,ship_address,ship_city,ship_state,ship_postcode,ship_country,active,stop_credit " +
                                                              "EXCEPT " +
                                                              "SELECT customer_type=@CustomerType,primary_business=@PrimaryBusiness,company_name= @CompanyName,company_address =@CompanyAddress,company_city=@CompanyCity,company_state=@CompanyState,company_postcode=@CompanyPostcode,company_country=@CompanyCountry,company_email = @CompanyEmail,company_telephone=@CompanyTelephone,company_fax=@CompanyFax,designation1=@Designation1,first_name1=@FirstName1,last_name1=@LastName1,telephone1=@Telephone1,mobile1=@Mobile1,fax1=@Fax1,email1=@Email1,designation2=@Designation2,first_name2=@FirstName2,last_name2=@LastName2,telephone2=@Telephone2,mobile2=@Mobile2,fax2=@Fax2,email2=@Email2,designation3=@Designation3,first_name3=@FirstName3,last_name3=@LastName3,telephone3=@Telephone3,mobile3=@Mobile3,fax3=@Fax3,email3=@Email3,ship_address=@ShipAddress,ship_city=@ShipCity,ship_state=@ShipState,ship_postcode=@ShipPostcode,ship_country=@ShipCountry,active=@Active,stop_credit=@StopCredit " +
                                                              ") ", conn);


                SqlCommand cmdUpdateCustomerDateTime = new SqlCommand("UPDATE Customers SET last_updated_by = @LastUpdatedBy,last_updated_datetime= @LastUpdatedDatetime " +
                                                                      "WHERE id = @CustomerID", conn);

                //SqlCommand cmdDeleteProdInstalled = new SqlCommand("DELETE FROM ProductInstalled WHERE customer_id = @CustomerID", conn);

                //SqlCommand cmdInsertProdInstalled = new SqlCommand("INSERT INTO ProductInstalled(customer_id,product_type_id) " +
                //                                                   "VALUES (@CustomerID,@ProductTypeID)", conn);

                SqlCommand cmdGetProductInstalled = new SqlCommand("SELECT * FROM ProductInstalled WHERE customer_id =@CustomerID", conn);

                SqlCommand cmdInsertProdInstalled = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM ProductInstalled " +
                                                                   "WHERE customer_id = @CustomerID AND product_type_id=@ProductTypeID) " +
                                                                   "INSERT INTO ProductInstalled(customer_id,product_type_id) VALUES(@CustomerID,@ProductTypeID) " +
                                                                   "ELSE " +
                                                                   "DELETE FROM ProductInstalled " +
                                                                   "WHERE (customer_id = @CustomerID AND product_type_id <> @ProductTypeID)", conn);

                SqlCommand cmdInsertAdminNote = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM AdminNotes " +
                                                               "WHERE customer_id = @CustomerID AND area=@Area) " +
                                                               "INSERT INTO AdminNotes(customer_id,area,note,created_by,datetime,active) VALUES(@CustomerID,@Area,@Note,@CreatedBy,@DateTime,@Active) " +
                                                               "ELSE " +
                                                               "UPDATE AdminNotes SET note = @Note,created_by= @CreatedBy,datetime=@DateTime " +
                                                               "WHERE (customer_id = @CustomerID AND area=@Area)", conn);

                //Get Updated Customer Details
                SqlCommand cmdGetCustomerDetails = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, " +
                                                                  "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax, " +
                                                                  "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1, " +
                                                                  "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2, " +
                                                                  "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3, " +
                                                                  "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit, " +
                                                                  "Customers.primary_business,(SELECT p.category_name FROM Category p WHERE p.id = Customers.primary_business) AS primary_business_Cat " +
                                                                  "FROM Customers " +
                                                                  "WHERE Customers.id=@CusID " +
                                                                  "ORDER BY Customers.company_name", conn);

                SqlCommand cmdGetDiscountDetails = new SqlCommand("SELECT Discount.id,Discount.customer_id,Discount.category_id,Discount.Discount,Discount.comment,Discount.updated_by,Discount.updated_date,Discount.time_stamp, " +
                                                         "Category.category_name,Category.category_document_path " +
                                                         "FROM Discount " +
                                                         "INNER JOIN Category ON Discount.category_id = Category.id " +
                                                         "WHERE customer_id =@CustomerID", conn);

                SqlCommand cmdGetProductTypes = new SqlCommand("SELECT ProductInstalled.customer_id,ProductInstalled.product_type_id,ProductTypes.product_type,Customers.company_name " +
                                                               "FROM ProductInstalled " + 																 
                                                               "INNER JOIN Customers ON ProductInstalled.customer_id = Customers.id " + 
                                                               "INNER JOIN ProductTypes ON ProductInstalled.product_type_id = ProductTypes.id " +
                                                               "WHERE ProductInstalled.customer_id = @CustomerID " +
                                                               "ORDER BY product_type", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdGetCustomerTimeStamp.Transaction = trans;
                    cmdGetCustomerTimeStamp.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                    using (SqlDataReader dr = cmdGetCustomerTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                newTimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                            }
                        }
                    }
                    cmdGetCustomerTimeStamp.Parameters.Clear();

                    List<Tuple<Int16, Int16, string>> disTimeStamp = new List<Tuple<Int16, Int16, string>>();

                    foreach (var item in customer.DiscountStructure)
                    {
                        cmdGetDiscountTimeStamp.Transaction = trans;
                        cmdGetDiscountTimeStamp.Parameters.AddWithValue("@CustomerID", item.CustomerID);
                        cmdGetDiscountTimeStamp.Parameters.AddWithValue("@CategoryID", item.Category.CategoryID);
                        using (SqlDataReader dr = cmdGetDiscountTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                if (dr.HasRows)
                                {
                                    while (dr.Read())
                                    {
                                        disTimeStamp.Add(Tuple.Create(Convert.ToInt16(dr["customer_id"]), Convert.ToInt16(dr["category_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                                    }
                                }
                                else
                                {
                                    string ts = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                                    item.TimeStamp = ts;
                                    disTimeStamp.Add(Tuple.Create(Convert.ToInt16(item.CustomerID), Convert.ToInt16(item.Category.CategoryID), ts));
                                }
                            }
                        }
                        cmdGetDiscountTimeStamp.Parameters.Clear();
                    }

                    disTimeStamp = disTimeStamp.OrderBy(x => x.Item2).ToList();
                    bool y = true;
                    foreach (var item in customer.DiscountStructure)
                    {
                        y = disTimeStamp.Any(x => x.Item1 == item.CustomerID && x.Item2 == item.Category.CategoryID && x.Item3 == item.TimeStamp);
                        if (y == false)
                        {
                            break;
                        }
                    }

                    if (y || disTimeStamp.Count == 0)
                    {                        
                        foreach (var item in customer.DiscountStructure)
                        {
                            cmdUpdateDiscount.Transaction = trans;
                            cmdUpdateDiscount.Parameters.AddWithValue("@CustomerID", item.CustomerID);
                            cmdUpdateDiscount.Parameters.AddWithValue("@CategoryID", item.Category.CategoryID);
                            cmdUpdateDiscount.Parameters.AddWithValue("@Discount", item.Discount);
                            cmdUpdateDiscount.Parameters.AddWithValue("@Comment", "");
                            cmdUpdateDiscount.Parameters.AddWithValue("@UpdatedDate", DateTime.Now);
                            cmdUpdateDiscount.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                            ud.Add(cmdUpdateDiscount.ExecuteNonQuery());
                            cmdUpdateDiscount.Parameters.Clear();
                        }
                    }
                    else
                    {
                        res = -1;//Data has been changed
                        goto end;
                    }

                    if (customer.TimeStamp == newTimeStamp)
                    { 
                        cmdUpdateCustomer.Transaction = trans;
                        cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CustomerType", customer.CustomerType);
                        cmdUpdateCustomer.Parameters.AddWithValue("@PrimaryBusiness", customer.PrimaryBusiness.CategoryID);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyName", customer.CompanyName);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyAddress", customer.CompanyAddress);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyCity", customer.CompanyCity);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyState", customer.CompanyState);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyPostcode", customer.CompanyPostCode);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyCountry", customer.CompanyCountry);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyEmail", customer.CompanyEmail);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyTelephone", customer.CompanyTelephone);
                        cmdUpdateCustomer.Parameters.AddWithValue("@CompanyFax", customer.CompanyFax);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Designation1", customer.Designation1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@FirstName1", customer.FirstName1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@LastName1", customer.LastName1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Telephone1", customer.Telephone1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Mobile1", customer.Mobile1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Fax1", customer.Fax1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Email1", customer.Email1);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Designation2", customer.Designation2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@FirstName2", customer.FirstName2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@LastName2", customer.LastName2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Telephone2", customer.Telephone2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Mobile2", customer.Mobile2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Fax2", customer.Fax2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Email2", customer.Email2);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Designation3", customer.Designation3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@FirstName3", customer.FirstName3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@LastName3", customer.LastName3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Telephone3", customer.Telephone3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Mobile3", customer.Mobile3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Fax3", customer.Fax3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Email3", customer.Email3);
                        cmdUpdateCustomer.Parameters.AddWithValue("@ShipAddress", customer.ShipAddress);
                        cmdUpdateCustomer.Parameters.AddWithValue("@ShipCity", customer.ShipCity);
                        cmdUpdateCustomer.Parameters.AddWithValue("@ShipState", customer.ShipState);
                        cmdUpdateCustomer.Parameters.AddWithValue("@ShipPostcode", customer.ShipPostCode);
                        cmdUpdateCustomer.Parameters.AddWithValue("@ShipCountry", customer.ShipCountry);
                        cmdUpdateCustomer.Parameters.AddWithValue("@Active", customer.Active);
                        cmdUpdateCustomer.Parameters.AddWithValue("@StopCredit", customer.StopCredit);
                        uc = cmdUpdateCustomer.ExecuteNonQuery();
                    }
                    else
                    {
                        res = -1;//Data has been changed
                        goto end;
                    }
                    //Get all the product type ids for customer for check
                    List<int> prodTypes = new List<int>();
                    
                        cmdGetProductInstalled.Transaction = trans;
                        cmdGetProductInstalled.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                        using (SqlDataReader dr = cmdGetProductInstalled.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    prodTypes.Add(Convert.ToInt16(dr["product_type_id"]));
                                }
                            }
                        }
                        
                    
                    List<int> prodTypesOrig = new List<int>();
                    foreach (var item in customer.ProductsInstalled)
                    {  
                        prodTypesOrig.Add(item.ProductTypeID);
                    }

                    List<int> objectList1 = prodTypesOrig.Where(o => !prodTypes.Contains(o)).ToList();
                    List<int> objectList2 = prodTypes.Where(o => !prodTypesOrig.Contains(o)).ToList();

                    if (objectList1.Count > 0 || objectList2.Count > 0)
                    {
                        foreach (var item in customer.ProductsInstalled)
                        {
                            cmdInsertProdInstalled.Transaction = trans;
                            cmdInsertProdInstalled.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                            cmdInsertProdInstalled.Parameters.AddWithValue("@ProductTypeID", item.ProductTypeID);
                            insPI.Add(cmdInsertProdInstalled.ExecuteNonQuery());
                            cmdInsertProdInstalled.Parameters.Clear();
                        }
                    }

                    if (adminNote != null && adminNote.Note != null)
                    {
                        cmdInsertAdminNote.Transaction = trans;
                        cmdInsertAdminNote.Parameters.AddWithValue("@CustomerID", adminNote.CustomerID);
                        cmdInsertAdminNote.Parameters.AddWithValue("@Area", adminNote.Area);
                        cmdInsertAdminNote.Parameters.AddWithValue("@Note", adminNote.Note);
                        cmdInsertAdminNote.Parameters.AddWithValue("@CreatedBy", adminNote.CreatedBy);
                        cmdInsertAdminNote.Parameters.AddWithValue("@DateTime", adminNote.CreatedDate);
                        cmdInsertAdminNote.Parameters.AddWithValue("@Active", adminNote.Active);
                        resAdminNote=cmdInsertAdminNote.ExecuteNonQuery();
                    }

                    bool a = ud.Any(x => x > 0);
                    bool b = insPI.Any(x => x > 0);

                    if (uc > 0 || a || b || resAdminNote > 0)
                    {
                        if(a)
                        {
                            //Discount has changed, send an alert
                            EmailManager.SendEmailAlertDiscountChange(customer.CustomerId, new List<DiscountStructure>(customer.DiscountStructure));
                        }

                        cmdUpdateCustomerDateTime.Transaction = trans;
                        cmdUpdateCustomerDateTime.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                        cmdUpdateCustomerDateTime.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdUpdateCustomerDateTime.Parameters.AddWithValue("@LastUpdatedDatetime", DateTime.Now);
                        cmdUpdateCustomerDateTime.ExecuteNonQuery();

                        //Get new timstamp
                        cmdGetCustomerTimeStamp.Transaction = trans;
                        cmdGetCustomerTimeStamp.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                        using (SqlDataReader dr = cmdGetCustomerTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    newTimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    lastUpdatedStr = String.IsNullOrWhiteSpace(dr["last_updated_by"].ToString()) ? "" : dr["last_updated_by"].ToString() + " at " + Convert.ToDateTime(dr["last_updated_datetime"]);

                                   //String.IsNullOrWhiteSpace(SelectedCustomer.LastUpdatedBy) ? "" : SelectedCustomer.LastUpdatedBy + " at " + SelectedCustomer.LastUpdatedDateTime;
                                }
                            }
                        }

                        res = 1;                            
                    }
                end:
                    /*****************Get Updated Customer Details*************************/
                    cmdGetCustomerDetails.Transaction = trans;
                    cmdGetCustomerDetails.Parameters.AddWithValue("@CusID", customer.CustomerId);
                    using (SqlDataReader dr = cmdGetCustomerDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                verifiedCustomer.CustomerId = Convert.ToInt16(dr["id"]);
                                verifiedCustomer.CustomerType = dr["customer_type"].ToString();
                                verifiedCustomer.CompanyName = dr["company_name"].ToString();
                                verifiedCustomer.CompanyAddress = dr["company_address"].ToString();
                                verifiedCustomer.CompanyCity = dr["company_city"].ToString();
                                verifiedCustomer.CompanyState = dr["company_state"].ToString();
                                verifiedCustomer.CompanyPostCode = dr["company_postcode"].ToString();
                                verifiedCustomer.CompanyCountry = dr["company_country"].ToString();
                                verifiedCustomer.CompanyEmail = dr["company_email"].ToString();
                                verifiedCustomer.CompanyTelephone = dr["company_telephone"].ToString();
                                verifiedCustomer.CompanyFax = dr["company_fax"].ToString();
                                verifiedCustomer.Designation1 = dr["designation1"].ToString();
                                verifiedCustomer.FirstName1 = dr["first_name1"].ToString();
                                verifiedCustomer.LastName1 = dr["last_name1"].ToString();
                                verifiedCustomer.Telephone1 = dr["telephone1"].ToString();
                                verifiedCustomer.Mobile1 = dr["mobile1"].ToString();
                                verifiedCustomer.Email1 = dr["email1"].ToString();
                                verifiedCustomer.Fax1 = dr["fax1"].ToString();
                                verifiedCustomer.Designation2 = dr["designation2"].ToString();
                                verifiedCustomer.FirstName2 = dr["first_name2"].ToString();
                                verifiedCustomer.LastName2 = dr["last_name2"].ToString();
                                verifiedCustomer.Telephone2 = dr["telephone2"].ToString();
                                verifiedCustomer.Mobile2 = dr["mobile2"].ToString();
                                verifiedCustomer.Email2 = dr["email2"].ToString();
                                verifiedCustomer.Fax2 = dr["fax2"].ToString();
                                verifiedCustomer.Designation3 = dr["designation3"].ToString();
                                verifiedCustomer.FirstName3 = dr["first_name3"].ToString();
                                verifiedCustomer.LastName3 = dr["last_name3"].ToString();
                                verifiedCustomer.Telephone3 = dr["telephone3"].ToString();
                                verifiedCustomer.Mobile3 = dr["mobile3"].ToString();
                                verifiedCustomer.Email3 = dr["email3"].ToString();
                                verifiedCustomer.Fax3 = dr["fax3"].ToString();
                                verifiedCustomer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                verifiedCustomer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                verifiedCustomer.Debt = CheckNull<decimal>(dr["debt"]);
                                verifiedCustomer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                verifiedCustomer.ShipAddress = dr["ship_address"].ToString();
                                verifiedCustomer.ShipCity = dr["ship_city"].ToString();
                                verifiedCustomer.ShipState = dr["ship_state"].ToString();
                                verifiedCustomer.ShipPostCode = dr["ship_postcode"].ToString();
                                verifiedCustomer.ShipCountry = dr["ship_country"].ToString();
                                verifiedCustomer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                verifiedCustomer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                verifiedCustomer.Active = Convert.ToBoolean(dr["active"]);
                                verifiedCustomer.StopCredit = dr["stop_credit"].ToString();
                                verifiedCustomer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                verifiedCustomer.PrimaryBusiness = new Category();
                                verifiedCustomer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                verifiedCustomer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();
                            }
                        }
                    }

                    cmdGetDiscountDetails.Transaction = trans;
                    cmdGetDiscountDetails.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                    using (SqlDataReader dr = cmdGetDiscountDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string vis = "Collapsed";
                                if (Convert.ToInt16(dr["category_id"]) != 0)
                                {
                                    if (Convert.ToInt16(dr["category_id"]) == 3)
                                    {
                                        if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                        {
                                            vis = "Visible";
                                        }
                                    }
                                }

                                DiscountStructure d = new DiscountStructure();
                                d.ID = Convert.ToInt32(dr["id"]);
                                d.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                d.Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]), CategoryName = dr["category_name"].ToString(), DocumentPath = dr["category_document_path"].ToString() };
                                d.Discount = Convert.ToInt16(dr["Discount"]);
                                d.UpdatedBy = dr["updated_by"].ToString();
                                d.UpdatedDate = Convert.ToDateTime(dr["updated_date"]);
                                d.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                d.DiscountLabelVisibility = vis;
                                verifiedCustomer.DiscountStructure.Add(d);
                            }
                        }
                    }
                    cmdGetDiscountDetails.Parameters.Clear();

                    cmdGetProductTypes.Transaction = trans;
                    cmdGetProductTypes.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                    using (SqlDataReader dr = cmdGetProductTypes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ProductType prodIns = new ProductType();
                                prodIns.ProductTypeID = Convert.ToInt16(dr["product_type_id"]);
                                prodIns.Type = dr["product_type"].ToString();
                                verifiedCustomer.ProductsInstalled.Add(prodIns);
                            }
                        }
                    }
                    
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
        
            return Tuple.Create(res, newTimeStamp, lastUpdatedStr, verifiedCustomer);
        }

        public static Tuple<decimal, string> GetCustomerOrderInfoByCustomerID(Int32 cusId)
        {
            decimal orderTotal = 0;
            string lastOrder = string.Empty;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdOrderTotal = new SqlCommand("SELECT ISNULL(SUM(total_amount),0) AS Total FROM SalesOrder " +
                                                              "WHERE customer_id = @CusNo AND order_status ='Dispatched'", conn);

                SqlCommand cmdLastOrder = new SqlCommand("SELECT TOP 1 order_date FROM SalesOrder " +
                                                         "WHERE customer_id=@CusNo AND order_status ='Dispatched'  " +
                                                         "ORDER BY order_date DESC", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    cmdOrderTotal.Transaction = trans;
                    cmdOrderTotal.Parameters.AddWithValue("@CusNo", cusId);
                    using (SqlDataReader dr = cmdOrderTotal.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            while (dr.Read())
                            {
                                orderTotal = CheckNull<Decimal>(dr["Total"]);
                            }
                        }
                    }

                    cmdLastOrder.Transaction = trans;
                    cmdLastOrder.Parameters.AddWithValue("@CusNo", cusId);
                    using (SqlDataReader dr = cmdLastOrder.ExecuteReader())
                    {
                        if (dr.HasRows)
                        {
                            while (dr.Read())
                            {
                                lastOrder = CheckNull<DateTime>(dr["order_date"]).ToString("dd/MM/yyyy");
                            }
                        }
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading Product Capacity: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return Tuple.Create(orderTotal, lastOrder);
        }

        public static int AddNewCustomer(Customer customer, string addToCustomerPending, string disString, string prodTypes, string customerNoteStr, Int32 customerPendingID, AdminNote adminNote)
        {
            int result = 0;
            List<int> resDiscount = new List<int>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //PENDING CUSTOMER
                SqlCommand cmdCheckPendingCustomer = new SqlCommand("SELECT * FROM CustomerPending WHERE company_name =@CompanyName", conn);

                SqlCommand cmdInsPendingCustomer = new SqlCommand("INSERT INTO CustomerPending(primary_business,company_name,company_address,company_city,company_state,company_postcode,company_country,company_email,company_telephone,company_fax,designation1,first_name1,last_name1,telephone1,mobile1,fax1,email1,designation2,first_name2,last_name2,telephone2,mobile2,fax2,email2,designation3,first_name3,last_name3,telephone3,mobile3,fax3,email3,ship_address,ship_city,ship_state,ship_postcode,ship_country,discount_str,product_type_str,customer_note_str,last_updated_by,last_updated_datetime,transfered) " +
                                                                  "VALUES(@PrimaryBusiness,@CompanyName,@CompanyAddress,@CompanyCity,@CompanyState,@CompanyPostcode,@CompanyCountry,@CompanyEmail,@CompanyTelephone,@CompanyFax,@Designation1,@FirstName1,@LastName1,@Telephone1,@Mobile1,@Fax1,@Email1,@Designation2,@FirstName2,@LastName2,@Telephone2,@Mobile2,@Fax2,@Email2,@Designation3,@FirstName3,@LastName3,@Telephone3,@Mobile3,@Fax3,@Email3,@ShipAddress,@ShipCity,@ShipState,@ShipPostcode,@ShipCountry,@DiscountStr,@ProductTypeStr,@CustomerNoteStr,@LastUpdatedBy,@LastUpdatedDatetime,@IsTransfered)", conn);
                
                SqlCommand cmdCheckCustomer = new SqlCommand("SELECT  * FROM Customers WHERE company_name =@CompanyName", conn);

                SqlCommand cmdInsNewCustomer = new SqlCommand("INSERT INTO Customers(customer_type,primary_business,company_name,company_address,company_city,company_state,company_postcode,company_country,company_email,company_telephone,company_fax,designation1,first_name1,last_name1,telephone1,mobile1,fax1,email1,designation2,first_name2,last_name2,telephone2,mobile2,fax2,email2,designation3,first_name3,last_name3,telephone3,mobile3,fax3,email3,ship_address,ship_city,ship_state,ship_postcode,ship_country,credit_limit,credit_remaining,debt,last_updated_by,last_updated_datetime,stop_credit,active) " +
                                                              "VALUES(@CustomerType,@PrimaryBusiness,@CompanyName,@CompanyAddress,@CompanyCity,@CompanyState,@CompanyPostcode,@CompanyCountry,@CompanyEmail,@CompanyTelephone,@CompanyFax,@Designation1,@FirstName1,@LastName1,@Telephone1,@Mobile1,@Fax1,@Email1,@Designation2,@FirstName2,@LastName2,@Telephone2,@Mobile2,@Fax2,@Email2,@Designation3,@FirstName3,@LastName3,@Telephone3,@Mobile3,@Fax3,@Email3,@ShipAddress,@ShipCity,@ShipState,@ShipPostcode,@ShipCountry,@CreditLimit,@CreditRemaining,@Debt,@LastUpdatedBy,@LastUpdatedDatetime,@StopCredit,@Active)", conn);

                SqlCommand cmdInsertUpdateDiscount = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Discount " +
                                                                           "WHERE customer_id=@CustomerID AND category_id = @CategoryID) " +
                                                                           "INSERT INTO Discount(customer_id,category_id,discount,comment,updated_date,updated_by) VALUES(@CustomerID,@CategoryID,@Discount,@Comment,@UpdatedDate,@UpdatedBy) " +
                                                                           "ELSE " +
                                                                           "UPDATE Discount SET discount=@Discount,updated_date=@UpdatedDate,updated_by=@UpdatedBy " +
                                                                           "WHERE customer_id=@CustomerID AND category_id = @CategoryID AND discount <> @Discount", conn);

                SqlCommand cmdInsNewCustomerComment = new SqlCommand("INSERT INTO CustomerNotes(customer_id,comment,created_by,date_time) " +
                                                                     "VALUES(@CustomerID,@Comment,@CreatedBy,@DateTime)", conn);

                SqlCommand cmdInsProductInstalled = new SqlCommand("INSERT INTO ProductInstalled(customer_id,product_type_id) " +
                                                                   "VALUES(@CustomerID,@ProductTypeId)", conn);

                SqlCommand cmdGetCustomerID = new SqlCommand("SELECT MAX(id) FROM Customers", conn);

                SqlCommand cmdUpdateCustomerPending = new SqlCommand("UPDATE CustomerPending SET transfered='True',transfered_by = @TransferedBy,transfered_date_time= @TransferedDatetime " +
                                                                     "WHERE id = @CustomerID AND transfered='False'", conn);

                //Update Customer Credit
                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET credit_remaining= @CreditRemaining,credit_owed=@CreditOwed,debt=@Debt,credit_limit=@CreditLimit,last_updated_by=@LastUpdatedBy,last_updated_datetime=@LastUpdatedDatetime " +
                                                              "WHERE id = @CustomerID", conn);

                SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
                                                                      "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);

                SqlCommand cmdInsAdminNote = new SqlCommand("INSERT INTO AdminNotes(customer_id,area,note,created_by,datetime,active) " +
                                                            "VALUES(@CustomerID,@Area,@Note,@CreatedBy,@Datetime,@Active)", conn);

                SqlCommand cmdInsertContactPerson = new SqlCommand("INSERT INTO ContactPerson(customer_id,contact_person_name,contact_phone_number1,contact_phone_number2,contact_email,updated_by,updated_datetime,active) " +
                                                                   "VALUES (@CustomerID,@ContactPersonName,@ContactPersonNumber1,@ContactPersonNumber2,@ContactEmail,@UpdatedBy,@UpdatedDatetime,@Active)", conn);
                

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {

                    if(addToCustomerPending=="True")
                    {

                        int id = 0;
                        //Check pending customer database
                        cmdCheckPendingCustomer.Transaction = trans;
                        cmdCheckPendingCustomer.Parameters.AddWithValue("@CompanyName", customer.CompanyName);
                        using (SqlDataReader dr = cmdCheckPendingCustomer.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    id = Convert.ToInt16(dr["id"]);
                                }
                            }
                        }
                        if (id == 0)
                        {
                            //Check customer database                        
                            cmdCheckCustomer.Transaction = trans;
                            cmdCheckCustomer.Parameters.AddWithValue("@CompanyName", customer.CompanyName);
                            using (SqlDataReader dr = cmdCheckCustomer.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        id = Convert.ToInt16(dr["id"]);
                                    }
                                }
                            }
                        }

                        if (id == 0)
                        {
                            cmdInsPendingCustomer.Transaction = trans;
                            cmdInsPendingCustomer.Parameters.AddWithValue("@PrimaryBusiness", customer.PrimaryBusiness.CategoryID);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyName", customer.CompanyName);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyAddress", customer.CompanyAddress);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyCity", customer.CompanyCity);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyState", customer.CompanyState);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyPostcode", customer.CompanyPostCode);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyCountry", customer.CompanyCountry);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyEmail", customer.CompanyEmail);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyTelephone", customer.CompanyTelephone);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CompanyFax", customer.CompanyFax);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Designation1", customer.Designation1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@FirstName1", customer.FirstName1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@LastName1", customer.LastName1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Telephone1", customer.Telephone1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Mobile1", customer.Mobile1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Fax1", customer.Fax1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Email1", customer.Email1);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Designation2", customer.Designation2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@FirstName2", customer.FirstName2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@LastName2", customer.LastName2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Telephone2", customer.Telephone2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Mobile2", customer.Mobile2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Fax2", customer.Fax2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Email2", customer.Email2);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Designation3", customer.Designation3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@FirstName3", customer.FirstName3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@LastName3", customer.LastName3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Telephone3", customer.Telephone3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Mobile3", customer.Mobile3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Fax3", customer.Fax3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@Email3", customer.Email3);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@ShipAddress", customer.ShipAddress);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@ShipCity", customer.ShipCity);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@ShipState", customer.ShipState);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@ShipPostcode", customer.ShipPostCode);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@ShipCountry", customer.ShipCountry);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@DiscountStr", disString);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@ProductTypeStr", prodTypes);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@CustomerNoteStr", customerNoteStr);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@LastUpdatedBy", customer.LastUpdatedBy);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@LastUpdatedDatetime", customer.LastUpdatedDateTime);
                            cmdInsPendingCustomer.Parameters.AddWithValue("@IsTransfered", false);
                            result = cmdInsPendingCustomer.ExecuteNonQuery();
                        }
                        else
                        {
                            result = -2;
                        }
                    }
                    else
                    {                    
                        int id = 0;
                        cmdCheckCustomer.Transaction = trans;
                        cmdCheckCustomer.Parameters.AddWithValue("@CompanyName", customer.CompanyName);
                        using (SqlDataReader dr = cmdCheckCustomer.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    id = Convert.ToInt16(dr["id"]);
                                }
                            }
                        }

                        if (id == 0)
                        {
                            cmdInsNewCustomer.Transaction = trans;
                            cmdInsNewCustomer.Parameters.AddWithValue("@CustomerType", customer.CustomerType);
                            cmdInsNewCustomer.Parameters.AddWithValue("@PrimaryBusiness", customer.PrimaryBusiness.CategoryID);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyName", customer.CompanyName);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyAddress", customer.CompanyAddress);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyCity", customer.CompanyCity);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyState", customer.CompanyState);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyPostcode", customer.CompanyPostCode);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyCountry", customer.CompanyCountry);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyEmail", customer.CompanyEmail);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyTelephone", customer.CompanyTelephone);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CompanyFax", customer.CompanyFax);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Designation1", customer.Designation1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@FirstName1", customer.FirstName1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@LastName1", customer.LastName1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Telephone1", customer.Telephone1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Mobile1", customer.Mobile1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Fax1", customer.Fax1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Email1", customer.Email1);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Designation2", customer.Designation2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@FirstName2", customer.FirstName2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@LastName2", customer.LastName2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Telephone2", customer.Telephone2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Mobile2", customer.Mobile2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Fax2", customer.Fax2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Email2", customer.Email2);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Designation3", customer.Designation3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@FirstName3", customer.FirstName3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@LastName3", customer.LastName3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Telephone3", customer.Telephone3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Mobile3", customer.Mobile3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Fax3", customer.Fax3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Email3", customer.Email3);
                            cmdInsNewCustomer.Parameters.AddWithValue("@ShipAddress", string.IsNullOrWhiteSpace(customer.ShipAddress) ? string.Empty : customer.ShipAddress);
                            cmdInsNewCustomer.Parameters.AddWithValue("@ShipCity", string.IsNullOrWhiteSpace(customer.ShipCity) ? string.Empty : customer.ShipCity);
                            cmdInsNewCustomer.Parameters.AddWithValue("@ShipState", string.IsNullOrWhiteSpace(customer.ShipState) ? string.Empty : customer.ShipState);
                            cmdInsNewCustomer.Parameters.AddWithValue("@ShipPostcode", string.IsNullOrWhiteSpace(customer.ShipPostCode) ? string.Empty : customer.ShipPostCode);
                            cmdInsNewCustomer.Parameters.AddWithValue("@ShipCountry", string.IsNullOrWhiteSpace(customer.ShipCountry) ? string.Empty : customer.ShipCountry);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CreditLimit", customer.CreditLimit);
                            cmdInsNewCustomer.Parameters.AddWithValue("@CreditRemaining", customer.CreditRemaining);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Debt", customer.Debt);
                            cmdInsNewCustomer.Parameters.AddWithValue("@LastUpdatedBy", customer.LastUpdatedBy);
                            cmdInsNewCustomer.Parameters.AddWithValue("@LastUpdatedDatetime", customer.LastUpdatedDateTime);
                            cmdInsNewCustomer.Parameters.AddWithValue("@StopCredit", customer.StopCredit);
                            cmdInsNewCustomer.Parameters.AddWithValue("@Active", customer.Active);
                            result = cmdInsNewCustomer.ExecuteNonQuery();

                            if(result > 0)
                            {
                                cmdGetCustomerID.Transaction = trans;
                                int cusID = 0;
                                cusID = Convert.ToInt32(cmdGetCustomerID.ExecuteScalar());

                                if (cusID > 0)
                                {
                                    
                                    List<int> resCusNotes = new List<int>();
                                    List<int> resProdInstalled = new List<int>();
                                    foreach (var item in customer.DiscountStructure)
                                    {
                                        cmdInsertUpdateDiscount.Transaction = trans;
                                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@CustomerID", cusID);
                                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@CategoryID", item.Category.CategoryID);
                                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@Discount", item.Discount);
                                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@Comment", "");
                                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedDate", DateTime.Now);
                                        cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedBy", customer.LastUpdatedBy);
                                        resDiscount.Add(cmdInsertUpdateDiscount.ExecuteNonQuery());                                    
                                        cmdInsertUpdateDiscount.Parameters.Clear();
                                    }

                                    foreach (var item in customer.CustomerNotes)
                                    {
                                        if (!string.IsNullOrWhiteSpace(item.Comment))
                                        {
                                            cmdInsNewCustomerComment.Transaction = trans;
                                            cmdInsNewCustomerComment.Parameters.AddWithValue("@CustomerID", cusID);
                                            cmdInsNewCustomerComment.Parameters.AddWithValue("@Comment", item.Comment);
                                            cmdInsNewCustomerComment.Parameters.AddWithValue("@CreatedBy", item.CreatedBy);
                                            cmdInsNewCustomerComment.Parameters.AddWithValue("@DateTime", item.DateTime);
                                            resCusNotes.Add(cmdInsNewCustomerComment.ExecuteNonQuery());
                                            cmdInsNewCustomerComment.Parameters.Clear();
                                        }
                                    }

                                    foreach (var item in customer.ProductsInstalled)
                                    {
                                        cmdInsProductInstalled.Transaction = trans;
                                        cmdInsProductInstalled.Parameters.AddWithValue("@CustomerID", cusID);
                                        cmdInsProductInstalled.Parameters.AddWithValue("@ProductTypeId", item.ProductTypeID);
                                        resProdInstalled.Add(cmdInsProductInstalled.ExecuteNonQuery());
                                        cmdInsProductInstalled.Parameters.Clear();
                                    }

                                    //If it is a customer pending
                                    if (customerPendingID > 0)
                                    {
                                        cmdUpdateCustomerPending.Transaction = trans;
                                        cmdUpdateCustomerPending.Parameters.AddWithValue("@CustomerID", customerPendingID);
                                        cmdUpdateCustomerPending.Parameters.AddWithValue("@TransferedBy", customer.LastUpdatedBy);
                                        cmdUpdateCustomerPending.Parameters.AddWithValue("@TransferedDatetime", customer.LastUpdatedDateTime);
                                        int r = cmdUpdateCustomerPending.ExecuteNonQuery();
                                        if (r > 0)
                                        {
                                            //Customer credit
                                            cmdUpdateCustomer.Transaction = trans;
                                            cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", cusID);
                                            cmdUpdateCustomer.Parameters.AddWithValue("@CreditLimit", customer.CreditLimit);
                                            cmdUpdateCustomer.Parameters.AddWithValue("@CreditRemaining", customer.CreditRemaining);
                                            cmdUpdateCustomer.Parameters.AddWithValue("@CreditOwed", customer.CreditOwed);
                                            cmdUpdateCustomer.Parameters.AddWithValue("@Debt", customer.Debt);
                                            cmdUpdateCustomer.Parameters.AddWithValue("@LastUpdatedBy", customer.LastUpdatedBy);
                                            cmdUpdateCustomer.Parameters.AddWithValue("@LastUpdatedDatetime", customer.LastUpdatedDateTime);
                                            int c= cmdUpdateCustomer.ExecuteNonQuery();

                                            if (c > 0)
                                            {
                                                List<CustomerCreditActivity> ccaList = new List<CustomerCreditActivity>();
                                                ccaList.Add(new CustomerCreditActivity() { Customer = new Customer() { CustomerId = cusID }, SalesOrderNo = 0, Amount = Global.credit, Type = "Credit Added", Activity = "$" + Global.credit.ToString("G29") + " of credit added ", UpdatedDate = DateTime.Now, UpdatedBy = UserData.FirstName + " " + UserData.LastName });
                                                ccaList.Add(new CustomerCreditActivity() { Customer = new Customer() { CustomerId = cusID }, SalesOrderNo = 0, Amount = Global.credit, Type = "Credit Limit Increased", Activity = "Credit limit increased by $" + Global.credit.ToString("G29"), UpdatedDate = DateTime.Now, UpdatedBy = UserData.FirstName + " " + UserData.LastName });

                                                foreach (var item in ccaList)
                                                {
                                                    cmdCustomerCreditActivity.Transaction = trans;
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", item.Customer.CustomerId);
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", 0);
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", Global.credit);
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", item.Type);
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", item.Activity);
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", item.UpdatedDate);
                                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                                                    cmdCustomerCreditActivity.ExecuteNonQuery();
                                                    cmdCustomerCreditActivity.Parameters.Clear();
                                                }
                                            
                                            }
                                        }
                                    }
                                    //Contact person details
                                    if (customer.ContactPerson != null && customer.ContactPerson.Count > 0)
                                    {
                                        foreach (var item in customer.ContactPerson)
                                        {
                                            cmdInsertContactPerson.Transaction = trans;
                                            cmdInsertContactPerson.Parameters.AddWithValue("@CustomerID", cusID);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonName", item.ContactPersonName);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonNumber1", item.PhoneNumber1);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonNumber2", item.PhoneNumber2);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@ContactEmail", item.Email);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedDatetime", DateTime.Now);
                                            cmdInsertContactPerson.Parameters.AddWithValue("@Active", true);
                                            int a = cmdInsertContactPerson.ExecuteNonQuery();
                                            cmdInsertContactPerson.Parameters.Clear();
                                        }                                    
                                    }

                                    result = cusID;

                                    
                                }
                                else
                                {
                                    result = -3;
                                }
                            }
                            else
                            {
                                result = 0;
                            }
                        }
                        else
                        {
                            result = -2;
                        }
                    }

                    if (adminNote != null && adminNote.Note != null)
                    {
                        cmdGetCustomerID.Transaction = trans;
                        int cusID = 0;
                        cusID = Convert.ToInt32(cmdGetCustomerID.ExecuteScalar());

                        cmdInsAdminNote.Transaction = trans;
                        cmdInsAdminNote.Parameters.AddWithValue("@CustomerID", cusID);
                        cmdInsAdminNote.Parameters.AddWithValue("@Area", adminNote.Area);
                        cmdInsAdminNote.Parameters.AddWithValue("@Note", adminNote.Note);
                        cmdInsAdminNote.Parameters.AddWithValue("@CreatedBy", adminNote.CreatedBy);
                        cmdInsAdminNote.Parameters.AddWithValue("@Datetime", adminNote.CreatedDate);
                        cmdInsAdminNote.Parameters.AddWithValue("@Active", adminNote.Active);
                        cmdInsAdminNote.ExecuteNonQuery();
                    }
                    trans.Commit();

                    if (result > 0)
                    {
                        if (resDiscount.Any(x => x > 0))
                        {
                            EmailManager.SendEmailAlertDiscountChange(result, new List<DiscountStructure>(customer.DiscountStructure));
                        }
                    }

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static ObservableCollection<SalesOrderLines> GetOpenSalesOrdersByCustomerID(Int32 cusID)
        {
            ObservableCollection<SalesOrderLines> salesOrderLine = new ObservableCollection<SalesOrderLines>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_status,Customers.company_name,SalesOrder.sales_made_by,SalesOrder.customer_order_no,SalesOrder.order_date,SalesOrder.dispatch_date,SalesOrder.freight_total,  " +
                                                                  "ISNULL((SELECT SUM((SalesOrderDetails.qty * Products.unit_price)-((SalesOrderDetails.qty * Products.unit_price) *SalesOrderDetails.discount)/100 )  " +
                                                                  "FROM SalesOrderDetails " +
                                                                  "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id  " +
                                                                  "WHERE SalesOrderDetails.sales_no = SalesOrder.sales_no ),0) AS order_Amount  " +
                                                                  "FROM SalesOrder  " +
                                                                  "INNER JOIN Customers ON SalesOrder.customer_id = Customers.id  " +
                                                                  "WHERE SalesOrder.customer_id = @CustomerID", conn))

                    //SELECT SalesOrder.sales_no,SalesOrder.order_status,Customers.company_name,SalesOrder.sales_made_by,SalesOrder.customer_order_no,SalesOrder.order_date,SalesOrder.dispatch_date,SalesOrder.freight_total, " +
                    //                                              "ISNULL((SELECT SUM((SalesOrderDetails.qty * Products.unit_price)-((SalesOrderDetails.qty * Products.unit_price) *SalesOrderDetails.discount)/100 ) " +
                    //                                              "FROM SalesOrderDetails " +
                    //                                              "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id " +
                    //                                              "WHERE SalesOrderDetails.sales_no = SalesOrder.sales_no ),0) AS order_Amount,   " +
                    //                                              "ISNULL((SELECT SUM((DispatchOrderItem.packed_qty * Products.unit_price)-((DispatchOrderItem.packed_qty * Products.unit_price)*SalesOrderDetails.discount)/100) " +
                    //                                              "FROM DispatchOrderItem " +
                    //                                              "INNER JOIN Products ON DispatchOrderItem.product_id = Products.id " +
                    //                                              "INNER JOIN SalesOrderDetails ON DispatchOrderItem.sales_no = SalesOrderDetails.sales_no AND DispatchOrderItem.product_id = SalesOrderDetails.product_id " +
                    //                                              "WHERE DispatchOrderItem.sales_no = SalesOrder.sales_no ),0) AS packed_Amount, " +
                    //                                              "ISNULL((SELECT SUM(DispatchOrderItem.packed_qty * Products.unit_price)  " +
                    //                                              "FROM DispatchOrderItem  " +
                    //                                              "INNER JOIN Products ON DispatchOrderItem.product_id = Products.id  " +
                    //                                              "WHERE DispatchOrderItem.sales_no = SalesOrder.sales_no ),0) AS packed_Amount,  " +
                    //                                              "ISNULL((SELECT SUM((DispatchOrderItem.dispatched_qty * Products.unit_price)-((DispatchOrderItem.dispatched_qty * Products.unit_price)*SalesOrderDetails.discount)/100) " +
                    //                                              "FROM DispatchOrderItem " +
                    //                                              "INNER JOIN Products ON DispatchOrderItem.product_id = Products.id " +
                    //                                              "INNER JOIN SalesOrderDetails ON DispatchOrderItem.sales_no = SalesOrderDetails.sales_no AND DispatchOrderItem.product_id = SalesOrderDetails.product_id " +
                    //                                              "WHERE DispatchOrderItem.sales_no = SalesOrder.sales_no ),0) AS shipped_Amount " +
                    //                                              "FROM SalesOrder  " +
                    //                                              "INNER JOIN Customers ON SalesOrder.customer_id = Customers.id  " +
                    //                                              "WHERE SalesOrder.customer_id = @CustomerID


                    {
                        cmdGetData.Parameters.AddWithValue("@CustomerID", cusID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    SalesOrderLines sol = new SalesOrderLines();
                                    sol.SalesOrder = new SalesOrder()
                                    {
                                        SalesOrderNo = Convert.ToInt32(dr["sales_no"]),
                                        OrderStatus = dr["order_status"].ToString(),
                                        OrderDate = Convert.ToDateTime(dr["order_date"]),
                                        DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]),
                                        SalesMadeBy = dr["sales_made_by"].ToString(),
                                        CustomerOrderNo = dr["customer_order_no"].ToString(),
                                        Customer = new Customer() { CompanyName = dr["company_name"].ToString(), },
                                        SalesOrderDetails = new ObservableCollection<SalesOrderDetails>() 
                                        { 
                                            new SalesOrderDetails() 
                                            { 
                                                Product = new Product() 
                                                { }, 
                                                Quantity = (Convert.ToDecimal(dr["order_Amount"]) + Convert.ToDecimal(dr["freight_total"])) + ((Convert.ToDecimal(dr["order_Amount"]) + Convert.ToDecimal(dr["freight_total"])) * 10 /100)
                                            } 
                                        },
                                    };
                                    //sol.DispatchOrderItem = new DispatchOrderItem() 
                                    //{
                                        //PackedQty = Convert.ToDecimal(dr["packed_Amount"])==0?0:(Convert.ToDecimal(dr["packed_Amount"]) + Convert.ToDecimal(dr["freight_total"])) + ((Convert.ToDecimal(dr["packed_Amount"]) + Convert.ToDecimal(dr["freight_total"])) * 10 / 100),
                                        //DispatchQty = Convert.ToDecimal(dr["shipped_Amount"])==0?0:(Convert.ToDecimal(dr["shipped_Amount"]) + Convert.ToDecimal(dr["freight_total"])) + ((Convert.ToDecimal(dr["shipped_Amount"]) + Convert.ToDecimal(dr["freight_total"])) * 10 / 100)
                                    //};
                                    salesOrderLine.Add(sol);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return salesOrderLine;
        }

        public static int AddNewCustomerNote(CustomerNote customerNote)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsNewCustomerComment = new SqlCommand("INSERT INTO CustomerNotes(customer_id,comment,created_by,date_time) " +
                                                                     "VALUES(@CustomerID,@Comment,@CreatedBy,@DateTime)", conn);

                conn.Open();

                try
                {
                    cmdInsNewCustomerComment.Parameters.AddWithValue("@CustomerID", customerNote.CustomerID);
                    cmdInsNewCustomerComment.Parameters.AddWithValue("@Comment", customerNote.Comment);
                    cmdInsNewCustomerComment.Parameters.AddWithValue("@CreatedBy", customerNote.CreatedBy);
                    cmdInsNewCustomerComment.Parameters.AddWithValue("@DateTime", customerNote.DateTime);
                    result = cmdInsNewCustomerComment.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static ObservableCollection<CustomerNote> GetCustomerNotes(Int32 cusID)
        {
            ObservableCollection<CustomerNote> CustomerNotes = new ObservableCollection<CustomerNote>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM CustomerNotes WHERE customer_id =@CustomerID ORDER BY date_time DESC", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@CustomerID", cusID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    CustomerNote cn = new CustomerNote();
                                    cn.ID = Convert.ToInt32(dr["id"]);
                                    cn.CustomerID = Convert.ToInt32(dr["customer_id"]);
                                    cn.Comment = dr["comment"].ToString();
                                    cn.CreatedBy = dr["created_by"].ToString();
                                    cn.DateTime = Convert.ToDateTime(dr["date_time"]);
                                    cn.DisplayString = "------------------------------------------------------------------------------------" + System.Environment.NewLine + cn.CreatedBy + " at " + cn.DateTime + System.Environment.NewLine + System.Environment.NewLine + cn.Comment;
                                    CustomerNotes.Add(cn);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return CustomerNotes;
        }

        public static ObservableCollection<CustomerCreditActivity> GetCustomerCreditHistory(int cusId)
        {
            ObservableCollection<CustomerCreditActivity> cchList = new ObservableCollection<CustomerCreditActivity>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT CustomerCreditActivity.customer_id,Customers.company_name,CustomerCreditActivity.sales_order_no,CustomerCreditActivity.amount,CustomerCreditActivity.type,CustomerCreditActivity.activity,CustomerCreditActivity.updated_date,CustomerCreditActivity.updated_by " +
                                                                "FROM CustomerCreditActivity " +
                                                                "INNER JOIN Customers ON CustomerCreditActivity.customer_id = Customers.id " +
                                                                "WHERE customer_id =@CustomerID ORDER BY updated_date DESC", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@CustomerID", cusId);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    CustomerCreditActivity cca = new CustomerCreditActivity();
                                    cca.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]), CompanyName = dr["company_name"].ToString() };
                                    cca.SalesOrderNo = Convert.ToInt32(dr["sales_order_no"]);
                                    cca.Amount = Convert.ToDecimal(dr["amount"]);
                                    cca.Type = dr["type"].ToString();
                                    cca.Activity = dr["activity"].ToString();
                                    cca.UpdatedDate = Convert.ToDateTime(dr["updated_date"]);
                                    cca.UpdatedBy = dr["updated_by"].ToString();
                                    cchList.Add(cca);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return cchList;
        }

        public static ObservableCollection<Customer> SearchCustomerDB(string cateName, string compName, string compCity, string compState, string cusName)
        {
            ObservableCollection<Customer> list = new ObservableCollection<Customer>();

            string whereClause = "Category.category_name LIKE '%" + cateName + "%' AND Customers.company_city LIKE '%" + compCity + "%' AND " +
                                                                 "Customers.company_state LIKE '%" + compState + "%' AND Customers.company_name LIKE '%" + compName + "%' AND " +
                                                                 "ContactPerson.contact_person_name LIKE '%" + cusName + "%' ";

            if (string.IsNullOrWhiteSpace(cusName))
            {
                whereClause = "Category.category_name LIKE '%" + cateName + "%' AND Customers.company_city LIKE '%" + compCity + "%' AND " +
                                                                 "Customers.company_state LIKE '%" + compState + "%' AND Customers.company_name LIKE '%" + compName + "%' ";
            }     

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {                 

                    conn.Open();
                    SqlCommand cmdGetId = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, ISNULL(Discount.category_id,0) AS category_id,ISNULL(Category.category_name,'') AS category_name,Category.category_document_path,ISNULL(Discount.discount,0) As Discount,Discount.time_stamp AS DisTimeStamp, " +
                                                             "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax, " +
                                                             "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1, " +
                                                             "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2, " +
                                                             "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3, " +
                                                             "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit, " +
                                                             "Customers.primary_business,(SELECT p.category_name FROM Category p WHERE p.id = Customers.primary_business) AS primary_business_Cat, " +
                                                             "ContactPerson.id AS ContactPersonID,ContactPerson.customer_id,ContactPerson.contact_person_name, ContactPerson.contact_phone_number1,ContactPerson.contact_phone_number2, ContactPerson.contact_email,ContactPerson.active AS ContactPersonActive,ContactPerson.time_stamp AS ContactPersonTimeStamp " +
                                                             "FROM Customers " +
                                                             "LEFT JOIN Discount ON Customers.id=Discount.customer_id " +
                                                             "INNER JOIN Category ON Customers.primary_business = Category.id " +
                                                             "LEFT JOIN ContactPerson ON Customers.id = ContactPerson.customer_id " +
                                                             "WHERE " + whereClause +
                                                             "ORDER BY Customers.company_name", conn);


                    using (SqlDataReader dr = cmdGetId.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if (list.Count == 0)
                                {
                                    Customer customer = new Customer();
                                    customer.CustomerId = Convert.ToInt16(dr["id"]);
                                    customer.CustomerType = dr["customer_type"].ToString();
                                    customer.CompanyName = dr["company_name"].ToString();
                                    customer.CompanyAddress = dr["company_address"].ToString();
                                    customer.CompanyCity = dr["company_city"].ToString();
                                    customer.CompanyState = dr["company_state"].ToString();
                                    customer.CompanyPostCode = dr["company_postcode"].ToString();
                                    customer.CompanyCountry = dr["company_country"].ToString();
                                    customer.CompanyEmail = dr["company_email"].ToString();
                                    customer.CompanyTelephone = dr["company_telephone"].ToString();
                                    customer.CompanyFax = dr["company_fax"].ToString();
                                    customer.Designation1 = dr["designation1"].ToString();
                                    customer.FirstName1 = dr["first_name1"].ToString();
                                    customer.LastName1 = dr["last_name1"].ToString();
                                    customer.Telephone1 = dr["telephone1"].ToString();
                                    customer.Mobile1 = dr["mobile1"].ToString();
                                    customer.Email1 = dr["email1"].ToString();
                                    customer.Fax1 = dr["fax1"].ToString();
                                    customer.Designation2 = dr["designation2"].ToString();
                                    customer.FirstName2 = dr["first_name2"].ToString();
                                    customer.LastName2 = dr["last_name2"].ToString();
                                    customer.Telephone2 = dr["telephone2"].ToString();
                                    customer.Mobile2 = dr["mobile2"].ToString();
                                    customer.Email2 = dr["email2"].ToString();
                                    customer.Fax2 = dr["fax2"].ToString();
                                    customer.Designation3 = dr["designation3"].ToString();
                                    customer.FirstName3 = dr["first_name3"].ToString();
                                    customer.LastName3 = dr["last_name3"].ToString();
                                    customer.Telephone3 = dr["telephone3"].ToString();
                                    customer.Mobile3 = dr["mobile3"].ToString();
                                    customer.Email3 = dr["email3"].ToString();
                                    customer.Fax3 = dr["fax3"].ToString();
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    customer.ShipAddress = dr["ship_address"].ToString();
                                    customer.ShipCity = dr["ship_city"].ToString();
                                    customer.ShipState = dr["ship_state"].ToString();
                                    customer.ShipPostCode = dr["ship_postcode"].ToString();
                                    customer.ShipCountry = dr["ship_country"].ToString();
                                    customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    customer.Active = Convert.ToBoolean(dr["active"]);
                                    customer.StopCredit = dr["stop_credit"].ToString();
                                    customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    customer.DiscountStructure = new ObservableCollection<DiscountStructure>() { };
                                    customer.PrimaryBusiness = new Category();
                                    customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                    customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();
                                    customer.ContactPerson = new List<ContactPerson>();

                                    ContactPerson cp = new ContactPerson();
                                    cp.ContactPersonID = CheckNull<int>(dr["ContactPersonID"]);
                                    cp.CustomerID = CheckNull<int>(dr["customer_id"]);
                                    cp.ContactPersonName = CheckNull<string>(dr["contact_person_name"]);
                                    cp.PhoneNumber1 = CheckNull<string>(dr["contact_phone_number1"]);
                                    cp.PhoneNumber2 = CheckNull<string>(dr["contact_phone_number2"]);
                                    cp.Email = CheckNull<string>(dr["contact_email"]);
                                    cp.Active = CheckNull<bool>(dr["ContactPersonActive"]);
                                    cp.TimeStamp = Convert.ToBase64String(dr["ContactPersonTimeStamp"] as byte[]);
                                    customer.ContactPerson.Add(cp);

                                    if (Convert.ToInt16(dr["category_id"]) != 0)
                                    {
                                        string vis = "Collapsed";
                                        if (Convert.ToInt16(dr["category_id"]) == 3)
                                        {
                                            if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                            {
                                                vis = "Visible";
                                            }
                                        }
                                        customer.DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                    }
                                    list.Add(customer);
                                }
                                else
                                {
                                    bool f = list.Any(x => x.CustomerId == Convert.ToInt16(dr["id"]));
                                    if (f)
                                    {
                                        for (int i = 0; i < list.Count; i++)
                                        {
                                            if (list[i].CustomerId == Convert.ToInt16(dr["id"]))
                                            {
                                                string vis = "Collapsed";
                                                if (Convert.ToInt16(dr["category_id"]) == 3)
                                                {
                                                    if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                                    {
                                                        vis = "Visible";
                                                    }
                                                }
                                                list[i].DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                            }

                                            var data = list[i].ContactPerson.SingleOrDefault(x => x.CustomerID == Convert.ToInt16(dr["id"]) && x.ContactPersonID != Convert.ToInt16(dr["ContactPersonID"]));
                                            if (data != null)
                                            {
                                                data.ContactPersonID = Convert.ToInt16(dr["ContactPersonID"]);
                                                data.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                                data.ContactPersonName = dr["contact_person_name"].ToString();
                                                data.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                                data.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                                data.Email = dr["contact_email"].ToString();
                                                data.Active = Convert.ToBoolean(dr["ContactPersonActive"]);
                                                data.TimeStamp = Convert.ToBase64String(dr["ContactPersonTimeStamp"] as byte[]);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Customer customer = new Customer();
                                        customer.CustomerId = Convert.ToInt16(dr["id"]);
                                        customer.CustomerType = dr["customer_type"].ToString();
                                        customer.CompanyName = dr["company_name"].ToString();
                                        customer.CompanyAddress = dr["company_address"].ToString();
                                        customer.CompanyCity = dr["company_city"].ToString();
                                        customer.CompanyState = dr["company_state"].ToString();
                                        customer.CompanyPostCode = dr["company_postcode"].ToString();
                                        customer.CompanyCountry = dr["company_country"].ToString();
                                        customer.CompanyEmail = dr["company_email"].ToString();
                                        customer.CompanyTelephone = dr["company_telephone"].ToString();
                                        customer.CompanyFax = dr["company_fax"].ToString();
                                        customer.Designation1 = dr["designation1"].ToString();
                                        customer.FirstName1 = dr["first_name1"].ToString();
                                        customer.LastName1 = dr["last_name1"].ToString();
                                        customer.Telephone1 = dr["telephone1"].ToString();
                                        customer.Mobile1 = dr["mobile1"].ToString();
                                        customer.Email1 = dr["email1"].ToString();
                                        customer.Fax1 = dr["fax1"].ToString();
                                        customer.Designation2 = dr["designation2"].ToString();
                                        customer.FirstName2 = dr["first_name2"].ToString();
                                        customer.LastName2 = dr["last_name2"].ToString();
                                        customer.Telephone2 = dr["telephone2"].ToString();
                                        customer.Mobile2 = dr["mobile2"].ToString();
                                        customer.Email2 = dr["email2"].ToString();
                                        customer.Fax2 = dr["fax2"].ToString();
                                        customer.Designation3 = dr["designation3"].ToString();
                                        customer.FirstName3 = dr["first_name3"].ToString();
                                        customer.LastName3 = dr["last_name3"].ToString();
                                        customer.Telephone3 = dr["telephone3"].ToString();
                                        customer.Mobile3 = dr["mobile3"].ToString();
                                        customer.Email3 = dr["email3"].ToString();
                                        customer.Fax3 = dr["fax3"].ToString();
                                        customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                        customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                        customer.Debt = CheckNull<decimal>(dr["debt"]);
                                        customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                        customer.ShipAddress = dr["ship_address"].ToString();
                                        customer.ShipCity = dr["ship_city"].ToString();
                                        customer.ShipState = dr["ship_state"].ToString();
                                        customer.ShipPostCode = dr["ship_postcode"].ToString();
                                        customer.ShipCountry = dr["ship_country"].ToString();
                                        customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                        customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                        customer.Active = Convert.ToBoolean(dr["active"]);
                                        customer.StopCredit = dr["stop_credit"].ToString();
                                        customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                        customer.DiscountStructure = new ObservableCollection<DiscountStructure>() { };
                                        customer.PrimaryBusiness = new Category();
                                        customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                        customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();
                                        customer.ContactPerson = new List<ContactPerson>();

                                        ContactPerson cp = new ContactPerson();
                                        cp.ContactPersonID = CheckNull<int>(dr["ContactPersonID"]);
                                        cp.CustomerID = CheckNull<int>(dr["customer_id"]);
                                        cp.ContactPersonName = CheckNull<string>(dr["contact_person_name"]);
                                        cp.PhoneNumber1 = CheckNull<string>(dr["contact_phone_number1"]);
                                        cp.PhoneNumber2 = CheckNull<string>(dr["contact_phone_number2"]);
                                        cp.Email = CheckNull<string>(dr["contact_email"]);
                                        cp.Active = CheckNull<bool>(dr["ContactPersonActive"]);
                                        cp.TimeStamp = Convert.ToBase64String(dr["ContactPersonTimeStamp"] as byte[]);
                                        customer.ContactPerson.Add(cp);

                                        if (Convert.ToInt16(dr["category_id"]) != 0)
                                        {
                                            string vis = "Collapsed";
                                            if (Convert.ToInt16(dr["category_id"]) == 3)
                                            {
                                                if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                                {
                                                    vis = "Visible";
                                                }
                                            }
                                            customer.DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                        }
                                        list.Add(customer);
                                    }
                                }
                            }
                        }
                    }


                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading sales order lines: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return list;
        }

        public static Customer UpdateCustomerCredit(Customer customer, decimal credit, List<CustomerCreditActivity> ccaList)
        {
            Customer custCred = new Customer();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET credit_remaining= @CreditRemaining,credit_owed=@CreditOwed,debt=@Debt,credit_limit=@CreditLimit,last_updated_by=@LastUpdatedBy,last_updated_datetime=@LastUpdatedDatetime " +
                                                              "WHERE id = @CustomerID AND (credit_remaining <> @CreditRemaining OR credit_limit <> @CreditLimit OR credit_owed <> @CreditOwed OR debt <> @Debt)", conn);

                //SqlCommand cmdInsertCusCredChanges = new SqlCommand("INSERT INTO CustomerCreditSalesOrder(customer_id,sales_order_no,credit_limit,credit_deducted,credit_remaining,debt,credit_added,updated_date,updated_by,active) " +
                //                                                    "VALUES(@CustomerID,@SalesOrderNo,@CreditLimit,@CreditDeducted,@CreditRemaining,@Debt,@CreditAdded,@UpdatedDate,@UpdatedBy,@Active)", conn);

                //Add to Customer credit activity
                SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
                                                                      "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);

                SqlCommand cmdGetCreditDetails = new SqlCommand("SELECT credit_limit,credit_remaining,debt,credit_owed " +
                                                                "FROM Customers " +
                                                                "WHERE id=@CustomerID", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {                    

                    cmdUpdateCustomer.Transaction = trans;
                    cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                    cmdUpdateCustomer.Parameters.AddWithValue("@CreditLimit", customer.CreditLimit);
                    cmdUpdateCustomer.Parameters.AddWithValue("@CreditRemaining", customer.CreditRemaining);
                    cmdUpdateCustomer.Parameters.AddWithValue("@CreditOwed", customer.CreditOwed);
                    cmdUpdateCustomer.Parameters.AddWithValue("@Debt", customer.Debt);
                    cmdUpdateCustomer.Parameters.AddWithValue("@LastUpdatedBy", customer.LastUpdatedBy);
                    cmdUpdateCustomer.Parameters.AddWithValue("@LastUpdatedDatetime", customer.LastUpdatedDateTime);
                    int r = cmdUpdateCustomer.ExecuteNonQuery();

                    //Add to customer credit activity    
                    foreach (var item in ccaList)
                    {
                        cmdCustomerCreditActivity.Transaction = trans;
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", item.Customer.CustomerId);
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", item.Amount);
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", item.Type);
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", item.Activity);
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", item.UpdatedDate);
                        cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                        cmdCustomerCreditActivity.ExecuteNonQuery();
                        cmdCustomerCreditActivity.Parameters.Clear();
                    }

                    cmdGetCreditDetails.Transaction = trans;
                    cmdGetCreditDetails.Parameters.AddWithValue("@CustomerID", customer.CustomerId);
                    using (SqlDataReader dr = cmdGetCreditDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                custCred.CreditLimit = Convert.ToDecimal(dr["credit_limit"]);
                                custCred.CreditRemaining = Convert.ToDecimal(dr["credit_remaining"]);
                                custCred.CreditOwed = Convert.ToDecimal(dr["credit_owed"]);
                                custCred.Debt = Convert.ToDecimal(dr["debt"]);
                            }
                        }
                    }


                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return custCred;
        }

        public static bool CheckConnection()
        {
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                if (SqlExtensions.IsAvailable(conn))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        public static List<MetaData> GetMetaData()
        {
            List<MetaData> metaData = new List<MetaData>();

            if (CheckConnection())
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {

                    conn.Open();

                    try
                    {
                        SqlCommand cmdGetData = new SqlCommand("SELECT * FROM MetaData", conn);

                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    MetaData md = new MetaData();
                                    md.ID = Convert.ToInt16(dr["id"]);
                                    md.KeyName = dr["key_name"].ToString();
                                    md.Description = dr["description"].ToString();
                                    metaData.Add(md);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {

                        Debug.WriteLine("Error reading System Parameter: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }

                }
            }
            else
            {
                metaData = null;
            }
            return metaData;
        }

        public static ObservableCollection<Invoice> GetReadyToInvoiceOrders(bool isCompleted, bool isActive)
        {
            ObservableCollection<Invoice> invoicingList = new ObservableCollection<Invoice>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetInvoicingOrders = new SqlCommand("SELECT Invoice.id,Invoice.sales_order_no,DispatchOrders.id AS delivery_docket_no,Invoice.invoiced_date,ISNULL(Customers.id,0) AS CustomerID,Customers.company_name,Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Invoice.exported_to_myob,Invoice.completed_date,Invoice.completed_by,Invoice.is_completed,Invoice.is_active,DispatchOrders.dispatched_date,SalesOrder.dispatch_date,SalesOrder.total_amount,SalesOrder.order_status,SalesOrder.payment_recieved,SalesOrder.customer_order_no,SalesOrder.order_date,SalesOrder.terms_id, " +
                                                                  "Freight.FreightName,  " +
                                                                  "PrePaidCustomers.prepaid_customer_name, " +
                                                                  "ISNULL((SELECT 1 FROM InvoiceToMyOb WHERE InvoiceToMyOb.sales_order_no=Invoice.sales_order_no),0) AS ExportToMyOb  " +
                                                                  "FROM Invoice  " +
                                                                  "INNER JOIN DispatchOrders ON Invoice.sales_order_no = DispatchOrders.sales_no  " +
                                                                  "INNER JOIN SalesOrder ON DispatchOrders.sales_no = SalesOrder.sales_no  " +
                                                                  "LEFT JOIN Customers ON SalesOrder.customer_id = Customers.id  " +
                                                                  "LEFT JOIN dbo.PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                                  "INNER JOIN Freight ON SalesOrder.freight_id=Freight.id " +
                                                                  "WHERE Invoice.is_completed =@IsComleted AND Invoice.is_active =@IsActive " +
                                                                  "ORDER BY DispatchOrders.dispatched_date desc", conn);

                //SqlTransaction trans = null;
                conn.Open();
                //trans = conn.BeginTransaction();
                try
                {
                    //cmdGetDispOrderItems.Transaction = trans;
                    cmdGetInvoicingOrders.Parameters.AddWithValue("@IsComleted", isCompleted);
                    cmdGetInvoicingOrders.Parameters.AddWithValue("@IsActive", isActive);
                    using (SqlDataReader dr = cmdGetInvoicingOrders.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Invoice invoice = new Invoice();
                                invoice.InvoiceNo = Convert.ToInt16(dr["id"]);
                                invoice.SalesOrderNo = Convert.ToInt16(dr["sales_order_no"]);
                                invoice.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                invoice.CustomerOrderNo = dr["customer_order_no"].ToString();
                                invoice.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                invoice.TermsID = dr["terms_id"].ToString();
                                invoice.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                invoice.FreightCarrier = new FreightCarrier() { FreightName = dr["FreightName"].ToString() };
                                invoice.DispatchOrder = new DispatchOrder() { DeliveryDocketNo = Convert.ToInt16(dr["delivery_docket_no"]), DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]) };
                                //invoice.Customer = new Customer() { CompanyName = dr["company_name"].ToString(), ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipState = dr["ship_state"].ToString() };

                                if (Convert.ToInt16(dr["CustomerID"]) > 0)
                                {
                                    invoice.Customer = new Customer() { CompanyName = dr["company_name"].ToString(), ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipState = dr["ship_state"].ToString() };
                                }
                                else
                                {
                                    invoice.Customer = new Customer() { CompanyName = dr["prepaid_customer_name"].ToString() };
                                }

                                invoice.InvoicedDate = Convert.ToDateTime(dr["invoiced_date"]);
                                invoice.ExportToMyOb = Convert.ToInt16(dr["ExportToMyOb"]) == 1 ? true : false;
                                invoice.ExportedToMyOb = Convert.ToBoolean(dr["exported_to_myob"]);
                                invoice.ExportedToMyObStr = invoice.ExportedToMyOb == true ? "Yes" : "No";
                                invoice.CompletedDate = CheckNull<DateTime>(dr["completed_date"]);
                                invoice.CompletedBy = dr["completed_by"].ToString();
                                invoice.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                invoice.IsActive = Convert.ToBoolean(dr["is_active"]);
                                invoice.SendToMyObEnabled = (Convert.ToBoolean(dr["exported_to_myob"]) == true || dr["order_status"].ToString() == OrderStatus.Return.ToString()) ? false : true;
                                invoice.OrderStatus = dr["order_status"].ToString() == "Return" ? "Returned" : dr["order_status"].ToString();
                                invoice.StatusBackgroundCol = dr["order_status"].ToString() == OrderStatus.Dispatched.ToString() ? "#084FAA" : "#cc0000";
                                invoice.StatusForeGroundCol = "White";
                                invoice.PrintInvoiceActive = dr["order_status"].ToString() == OrderStatus.Return.ToString() ? false : true;
                                invoice.PrintInvoiceBackGroundColour = dr["order_status"].ToString() == OrderStatus.Return.ToString() ? "#a6a6a6" : "#666666";
                                invoice.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                invoice.PaymentFinalisedBackGround = invoice.PaymentRecieved == true ? "#084FAA" : "#E12222";
                                invoice.PaymentFinalisedForeGround = invoice.PaymentRecieved == true ? "White" : "White";
                                invoicingList.Add(invoice);

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    //trans.Rollback();
                    Debug.WriteLine("ERROR DISPATCH DETAILS: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return invoicingList;
        }

        public static Invoice GetInvoiceBySalesNo(int salesId)
        {
            Invoice invoice = new Invoice();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdGetInvoicingOrders = new SqlCommand("SELECT Invoice.id,Invoice.sales_order_no,DispatchOrders.delivery_docket_no,Invoice.invoiced_date,ISNULL(Customers.id,0) AS CustomerID,Customers.company_name,Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Invoice.exported_to_myob,Invoice.completed_date,Invoice.completed_by,Invoice.is_completed,Invoice.is_active,DispatchOrders.dispatched_date,SalesOrder.dispatch_date,SalesOrder.total_amount,SalesOrder.order_status,SalesOrder.payment_recieved,SalesOrder.customer_order_no,SalesOrder.order_date,SalesOrder.terms_id, " +
                                                                  "Freight.FreightName,  " +
                                                                  "PrePaidCustomers.prepaid_customer_name, " +
                                                                  "ISNULL((SELECT 1 FROM InvoiceToMyOb WHERE InvoiceToMyOb.sales_order_no=Invoice.sales_order_no),0) AS ExportToMyOb  " +
                                                                  "FROM Invoice  " +
                                                                  "INNER JOIN DispatchOrders ON Invoice.sales_order_no = DispatchOrders.sales_no  " +
                                                                  "INNER JOIN SalesOrder ON DispatchOrders.sales_no = SalesOrder.sales_no  " +
                                                                  "LEFT JOIN Customers ON SalesOrder.customer_id = Customers.id  " +
                                                                  "LEFT JOIN dbo.PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                                  "INNER JOIN Freight ON SalesOrder.freight_id=Freight.id " +
                                                                  "WHERE Invoice.sales_order_no =@SalesId", conn);

                //SqlTransaction trans = null;
                conn.Open();
                //trans = conn.BeginTransaction();
                try
                {
                    //cmdGetDispOrderItems.Transaction = trans;
                    //cmdGetInvoicingOrders.Parameters.AddWithValue("@IsComleted", isCompleted);
                    //cmdGetInvoicingOrders.Parameters.AddWithValue("@IsActive", isActive);
                    cmdGetInvoicingOrders.Parameters.AddWithValue("@SalesId", salesId);
                    using (SqlDataReader dr = cmdGetInvoicingOrders.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                invoice.InvoiceNo = Convert.ToInt16(dr["id"]);
                                invoice.SalesOrderNo = Convert.ToInt16(dr["sales_order_no"]);
                                invoice.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                invoice.CustomerOrderNo = dr["customer_order_no"].ToString();
                                invoice.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                invoice.TermsID = dr["terms_id"].ToString();
                                invoice.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                invoice.FreightCarrier = new FreightCarrier() { FreightName = dr["FreightName"].ToString() };
                                invoice.DispatchOrder = new DispatchOrder() { DeliveryDocketNo = Convert.ToInt16(dr["delivery_docket_no"]), DispatchedDate = Convert.ToDateTime(dr["dispatched_date"]) };
                                //invoice.Customer = new Customer() { CompanyName = dr["company_name"].ToString(), ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipState = dr["ship_state"].ToString() };

                                if (Convert.ToInt16(dr["CustomerID"]) > 0)
                                {
                                    invoice.Customer = new Customer() { CompanyName = dr["company_name"].ToString(), ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipState = dr["ship_state"].ToString() };
                                }
                                else
                                {
                                    invoice.Customer = new Customer() { CompanyName = dr["prepaid_customer_name"].ToString() };
                                }

                                invoice.InvoicedDate = Convert.ToDateTime(dr["invoiced_date"]);
                                invoice.ExportToMyOb = Convert.ToInt16(dr["ExportToMyOb"]) == 1 ? true : false;
                                invoice.ExportedToMyOb = Convert.ToBoolean(dr["exported_to_myob"]);
                                invoice.ExportedToMyObStr = invoice.ExportedToMyOb == true ? "Yes" : "No";
                                invoice.CompletedDate = CheckNull<DateTime>(dr["completed_date"]);
                                invoice.CompletedBy = dr["completed_by"].ToString();
                                invoice.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                invoice.IsActive = Convert.ToBoolean(dr["is_active"]);
                                invoice.SendToMyObEnabled = (Convert.ToBoolean(dr["exported_to_myob"]) == true || dr["order_status"].ToString() == OrderStatus.Return.ToString()) ? false : true;
                                invoice.OrderStatus = dr["order_status"].ToString() == "Return" ? "Returned" : dr["order_status"].ToString();
                                invoice.StatusBackgroundCol = dr["order_status"].ToString() == OrderStatus.Dispatched.ToString() ? "#084FAA" : "#cc0000";
                                invoice.StatusForeGroundCol = "White";
                                invoice.PrintInvoiceActive = dr["order_status"].ToString() == OrderStatus.Return.ToString() ? false : true;
                                invoice.PrintInvoiceBackGroundColour = dr["order_status"].ToString() == OrderStatus.Return.ToString() ? "#a6a6a6" : "#666666";
                                invoice.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                invoice.PaymentFinalisedBackGround = invoice.PaymentRecieved == true ? "#084FAA" : "#E12222";
                                invoice.PaymentFinalisedForeGround = invoice.PaymentRecieved == true ? "White" : "White";

                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    //trans.Rollback();
                    Debug.WriteLine("ERROR FETCHING INVOICE: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return invoice;
        }

        public static SalesOrder SalesOrderInfoBySalesNo(SalesOrder salesOrder)
        {            
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {


                   
                    SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT FreightDetails.id,FreightDetails.order_no,FreightDetails.freight_code_id,FreightDetails.description,FreightDetails.pallets,FreightDetails.price,FreightDetails.discount,FreightDetails.total, " +
                                                                     "FreightCodes.code,FreightCodes.description,FreightCodes.unit " +
                                                                     "FROM FreightDetails " +
                                                                     "INNER JOIN FreightCodes ON FreightDetails.freight_code_id = FreightCodes.id " +
                                                                     "WHERE FreightDetails.order_no = @SalesNo", conn);
                    //Get Comments
                    SqlCommand cmdGetComments = new SqlCommand("SELECT * FROM Comments WHERE no=@SalesNo AND (location_id=7 OR location_id=8)", conn);

                    SqlTransaction trans = null;
                    conn.Open();
                    trans = conn.BeginTransaction();
                    try
                    {
                        salesOrder.FreightDetails = new BindingList<FreightDetails>();

                        cmdGetFreightDetails.Transaction = trans;
                        cmdGetFreightDetails.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    FreightDetails fd = new FreightDetails();
                                    fd.SalesNo = Convert.ToInt16(dr["order_no"]);
                                    fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                    fd.FreightCodeDetails = new FreightCode() { ID = Convert.ToInt32(dr["id"]), FreightCodeID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["unit"].ToString(), Price = Convert.ToDecimal(dr["price"]), FreightTotal = Convert.ToDecimal(dr["total"]) };
                                    fd.Discount = Convert.ToInt16(dr["discount"]);
                                    fd.Total = Convert.ToDecimal(dr["total"]);
                                    salesOrder.FreightDetails.Add(fd);
                                }
                            }
                        }


                        //Comments
                        salesOrder.Comments = new List<Comment>();

                        cmdGetComments.Transaction = trans;
                        cmdGetComments.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetComments.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    salesOrder.Comments.Add(new Comment() { LocationID = Convert.ToInt16(dr["location_id"]), Note = dr["comment"].ToString() });
                                }
                            }
                        }

                        trans.Commit();
                    }
                    catch (Exception e)
                    {
                        trans.Rollback();
                        Debug.WriteLine("ERROR DISPATCH DETAILS: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

                return salesOrder;
        }


        public static Invoice GetInvoice(Invoice inv)
        {
            Invoice invoice = new Invoice();
            invoice.SalesOrderDetails = new ObservableCollection<SalesOrderDetails>();
            invoice.SalesOrderDetails = GetSalesOrderDetailsBySalesNo(inv);
            invoice.FreightDetails = new BindingList<FreightDetails>();

            if (invoice.SalesOrderDetails.Count > 0 || invoice.SalesOrderDetails != null)
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
                {
                    SqlCommand cmdGetInvoicingOrders = new SqlCommand("SELECT Invoice.id,SalesOrder.sales_no,SalesOrder.terms_id,SalesOrder.list_price_total,SalesOrder.gst,SalesOrder.freight_total,SalesOrder.total_amount,ISNULL(Customers.id,0) AS CustomerID,Customers.customer_type,Customers.company_name,Customers.credit_limit,Customers.credit_remaining,Customers.credit_owed,Customers.debt,Freight.FreightName,DispatchOrders.dispatched_date,DispatchOrders.id AS delivery_docket_no,DispatchOrders.con_note_number,SalesOrder.customer_order_no,SalesOrder.order_status,SalesOrder.bill_to,SalesOrder.ship_to,SalesOrder.last_modified_by,SalesOrder.payment_due_date,SalesOrder.order_date,Invoice.invoiced_date,Invoice.exported_to_myob,Invoice.is_completed,Invoice.is_taken,Invoice.is_active,Invoice.completed_by,SalesOrder.gst_enabled, PrePaidCustomers.prepaid_customer_name, " +
                                                                      "ISNULL((SELECT 1 FROM InvoiceToMyOb WHERE InvoiceToMyOb.sales_order_no=Invoice.sales_order_no),0) AS ExportToMyOb " +
                                                                      "FROM Invoice " +
                                                                      "INNER JOIN SalesOrder ON Invoice.sales_order_no = SalesOrder.sales_no " +
                                                                      "LEFT JOIN Customers ON SalesOrder.customer_id = Customers.id  " +
                                                                      "LEFT JOIN dbo.PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                                      "INNER JOIN DispatchOrders ON SalesOrder.sales_no = DispatchOrders.sales_no " +
                                                                      "INNER JOIN Freight ON SalesOrder.freight_id = Freight.ID " +
                                                                      "WHERE SalesOrder.sales_no=@SalesNo", conn);

                    SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT FreightDetails.id,FreightDetails.order_no,FreightDetails.freight_code_id,FreightDetails.description,FreightDetails.pallets,FreightDetails.price,FreightDetails.discount,FreightDetails.total, " +
                                                                     "FreightCodes.code,FreightCodes.description,FreightCodes.unit " +
                                                                     "FROM FreightDetails " +
                                                                     "INNER JOIN FreightCodes ON FreightDetails.freight_code_id = FreightCodes.id " +
                                                                     "WHERE FreightDetails.order_no = @SalesNo", conn);

                    conn.Open();
                    try
                    {
                        cmdGetInvoicingOrders.Parameters.AddWithValue("@SalesNo", inv.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetInvoicingOrders.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    invoice.InvoiceNo = Convert.ToInt16(dr["id"]);
                                    invoice.SalesOrderNo = Convert.ToInt16(dr["sales_no"]);
                                    invoice.CustomerOrderNo = dr["customer_order_no"].ToString();
                                    invoice.OrderStatus = dr["order_status"].ToString();
                                    invoice.BillTo = dr["bill_to"].ToString();
                                    invoice.ShipTo = dr["ship_to"].ToString();
                                    invoice.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                    invoice.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    invoice.TermsID = dr["terms_id"].ToString();
                                    invoice.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                    invoice.GST = Convert.ToDecimal(dr["gst"]);
                                    invoice.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                    invoice.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                    invoice.DispatchOrder = new DispatchOrder()
                                    {
                                        DeliveryDocketNo = Convert.ToInt16(dr["delivery_docket_no"]),
                                        DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]),
                                        ConNoteNumber = CheckNull<string>(dr["con_note_number"])
                                    };
                                    //invoice.Customer = new Customer() { CompanyName = dr["company_name"].ToString() };

                                    if (Convert.ToInt16(dr["CustomerID"]) > 0)
                                    {
                                        invoice.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["CustomerID"]), CompanyName = dr["company_name"].ToString(), CustomerType = dr["customer_type"].ToString(), CreditLimit = CheckNull<decimal>(dr["credit_limit"]), CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]), CreditOwed = CheckNull<decimal>(dr["credit_owed"]), Debt = CheckNull<decimal>(dr["debt"]) };
                                    }
                                    else
                                    {
                                        invoice.Customer = new Customer() { CustomerId=0,CompanyName = dr["prepaid_customer_name"].ToString(), CustomerType = "Prepaid" };
                                    }

                                    invoice.FreightCarrier = new FreightCarrier() { FreightName = dr["FreightName"].ToString() };
                                    invoice.InvoicedDate = Convert.ToDateTime(dr["invoiced_date"]);
                                    invoice.ExportToMyOb = Convert.ToBoolean(dr["ExportToMyOb"]);
                                    invoice.ExportedToMyOb = Convert.ToBoolean(dr["exported_to_myob"]);
                                    invoice.IsCompleted = Convert.ToBoolean(dr["is_completed"]);
                                    invoice.IsTaken = Convert.ToBoolean(dr["is_taken"]);
                                    invoice.IsActive = Convert.ToBoolean(dr["is_active"]);
                                    invoice.GSTEnabled = Convert.ToBoolean(dr["gst_enabled"]);
                                    invoice.CompletedBy = dr["completed_by"].ToString();
                                }
                            }
                        }

                        cmdGetFreightDetails.Parameters.AddWithValue("@SalesNo", inv.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    FreightDetails fd = new FreightDetails();
                                    fd.SalesNo = Convert.ToInt16(dr["order_no"]);
                                    fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                    fd.FreightCodeDetails = new FreightCode() { ID = Convert.ToInt32(dr["id"]), FreightCodeID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["unit"].ToString(), Price = Convert.ToDecimal(dr["price"]), FreightTotal = Convert.ToDecimal(dr["total"]) };
                                    fd.Discount = Convert.ToInt16(dr["discount"]);
                                    fd.Total = Convert.ToDecimal(dr["total"]);
                                    invoice.FreightDetails.Add(fd);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("ERROR DISPATCH DETAILS: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            else
            {
                invoice = null;
            }
            invoice = invoice.SalesOrderNo == 0 ? null : invoice;
            return invoice;
        }

       

        public static List<Tuple<string, Int16, string>> GetInvoiceTimeStamp(ObservableCollection<Invoice> invList, bool ignoreExportToMyOB)
        {
            List<Tuple<string, Int16, string>> timeStamps = new List<Tuple<string, Int16, string>>();
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetInvoiceTimeStamp = new SqlCommand("SELECT time_stamp FROM Invoice " +
                                                                      "WHERE sales_order_no=@SalesNo", conn);

                SqlCommand cmdGetSalesOrderTimeStamp = new SqlCommand("SELECT time_stamp FROM SalesOrder " +
                                                                      "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetDispatchOrderItemTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM DispatchOrderItem " +
                                                                             "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetProductStockReservedTimeStamp = new SqlCommand("SELECT product_id,time_stamp FROM ProductStockReserved " +
                                                                                "WHERE sales_no=@SalesNo", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    foreach (var item in invList)
                    {
                        if (item.ExportToMyOb || ignoreExportToMyOB)
                        {

                            cmdGetInvoiceTimeStamp.Transaction = trans;
                            cmdGetInvoiceTimeStamp.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                            using (SqlDataReader dr = cmdGetInvoiceTimeStamp.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        timeStamps.Add(Tuple.Create("INV", Convert.ToInt16(0), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                                    }
                                }
                            }
                            cmdGetInvoiceTimeStamp.Parameters.Clear();

                            cmdGetSalesOrderTimeStamp.Transaction = trans;
                            cmdGetSalesOrderTimeStamp.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                            using (SqlDataReader dr = cmdGetSalesOrderTimeStamp.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        timeStamps.Add(Tuple.Create("SO", Convert.ToInt16(0), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                                    }
                                }
                            }
                            cmdGetSalesOrderTimeStamp.Parameters.Clear();

                            cmdGetDispatchOrderItemTimeStamp.Transaction = trans;
                            cmdGetDispatchOrderItemTimeStamp.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                            using (SqlDataReader dr = cmdGetDispatchOrderItemTimeStamp.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        timeStamps.Add(Tuple.Create("DOI", Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                                    }
                                }
                            }
                            cmdGetDispatchOrderItemTimeStamp.Parameters.Clear();

                            cmdGetProductStockReservedTimeStamp.Transaction = trans;
                            cmdGetProductStockReservedTimeStamp.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                            using (SqlDataReader dr = cmdGetProductStockReservedTimeStamp.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        timeStamps.Add(Tuple.Create("PSR", Convert.ToInt16(dr["product_id"]), Convert.ToBase64String(dr["time_stamp"] as byte[])));
                                    }
                                }
                            }
                            cmdGetProductStockReservedTimeStamp.Parameters.Clear();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return timeStamps;
        }

        public static int UpdateExportToMyOB(ObservableCollection<Invoice> invoiceList, List<Tuple<string, Int16, string>> oldTimeStamp)
        {
            int result = 0;
            List<int> upInv = new List<int>();
            List<Int16> ListToSend = new List<Int16>();
            List<Tuple<string, Int16, string>> newTimeStamp = new List<Tuple<string, short, string>>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                newTimeStamp = DBAccess.GetInvoiceTimeStamp(invoiceList, false);

                SqlCommand cmdGetInvoiceToMyOB = new SqlCommand("SELECT * FROM InvoiceToMyOb", conn);

                SqlCommand cmdDeleteMyOb = new SqlCommand("DELETE FROM InvoiceToMyOb " +
                                                          "WHERE sales_order_no=@SalesOrderNo", conn);

                SqlCommand cmdUpdateMyOb = new SqlCommand("UPDATE Invoice SET exported_to_myob = @ExportedToMyOB " +
                                                          "WHERE sales_order_no=@SalesOrderNo", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    //Check if timestamps are not changed
                    bool exec = false;
                    foreach (var items in oldTimeStamp)
                    {
                        exec = newTimeStamp.Any(z => z.Item1 == items.Item1 && z.Item2 == items.Item2 && z.Item3.Equals(items.Item3));
                        if (exec == false)
                        {
                            break;
                        }
                    }
                    if (exec)
                    {
                        cmdGetInvoiceToMyOB.Transaction = trans;
                        using (SqlDataReader dr = cmdGetInvoiceToMyOB.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ListToSend.Add(Convert.ToInt16(dr["sales_order_no"]));
                                }
                            }
                        }

                        foreach (var item in invoiceList)
                        {
                            if (item.ExportToMyOb && item.ExportedToMyOb == false)
                            {
                                bool containsItem = ListToSend.Any(x => x == (Int16)item.SalesOrderNo);
                                if (containsItem == false)
                                {
                                    ListToSend.Add((Int16)item.SalesOrderNo);
                                }
                            }
                        }
                        if (ListToSend.Count > 0)
                        {
                            //Delete items in InvoiceToMyOB Table
                            foreach (var item in ListToSend)
                            {
                                //Update Invoice table
                                bool containsItem = invoiceList.Any(x => x.SalesOrderNo == item);
                                if (containsItem == true)
                                {
                                    cmdUpdateMyOb.Transaction = trans;
                                    cmdUpdateMyOb.Parameters.AddWithValue("@SalesOrderNo", item);
                                    cmdUpdateMyOb.Parameters.AddWithValue("@ExportedToMyOB", true);
                                    upInv.Add(cmdUpdateMyOb.ExecuteNonQuery());
                                    cmdUpdateMyOb.Parameters.Clear();
                                }

                                cmdDeleteMyOb.Transaction = trans;
                                cmdDeleteMyOb.Parameters.AddWithValue("@SalesOrderNo", item);
                                cmdDeleteMyOb.ExecuteNonQuery();
                                cmdDeleteMyOb.Parameters.Clear();
                            }
                        }

                        bool a = upInv.Any(x => x > 0);

                        if (a)
                        {
                            result = 1;
                            trans.Commit();
                        }
                        else
                        {
                            trans.Rollback();
                            result = -2;
                        }
                    }
                    else
                    {
                        result = -1;
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    result = -1;
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<Invoice> GetSalesOrderDetailsForInvoices(ObservableCollection<Invoice> invoices)
        {
            List<Invoice> newInvoiceList = new List<Invoice>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT SalesOrderDetails.sales_no,SalesOrderDetails.order_line,SalesOrderDetails.qty,SalesOrderDetails.discount,SalesOrderDetails.total, " +
                                                                  "Products.id,Products.product_code,Products.product_description,Products.unit,Products.unit_price FROM SalesOrderDetails " +
                                                                  "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id " +
                                                                  "WHERE sales_no=@SalesNo", conn))
                    {
                        foreach (var item in invoices)
                        {
                            if (item.ExportToMyOb)
                            {
                                item.SalesOrderDetails = new ObservableCollection<SalesOrderDetails>();

                                cmdGetData.Parameters.AddWithValue("@SalesNo", item.SalesOrderNo);
                                using (SqlDataReader dr = cmdGetData.ExecuteReader())
                                {
                                    if (dr != null)
                                    {
                                        while (dr.Read())
                                        {

                                            SalesOrderDetails sod = new SalesOrderDetails();
                                            sod.OrderLine = Convert.ToInt16(dr["order_line"]);
                                            sod.Product = new Product() { ProductID = Convert.ToInt32(dr["id"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString(), ProductUnit = dr["unit"].ToString(), UnitPrice = Convert.ToDecimal(dr["unit_price"]) };
                                            sod.Quantity = Convert.ToDecimal(dr["qty"]);
                                            sod.Discount = Convert.ToInt16(dr["discount"]);
                                            sod.Total = Convert.ToDecimal(dr["total"]); ;
                                            item.SalesOrderDetails.Add(sod);
                                        }
                                    }
                                }
                                newInvoiceList.Add(item);
                                cmdGetData.Parameters.Clear();
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading ProductStock: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return newInvoiceList;
        }

        public static int UpdateInvoiceToMyObFileLocation(string path)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdMD = new SqlCommand("UPDATE MetaData " +
                                                             "SET description = @Description " +
                                                             "WHERE key_name = @KeyName", conn);

                conn.Open();
                try
                {

                    cmdMD.Parameters.AddWithValue("@KeyName", "invoice_to_myob_path");
                    cmdMD.Parameters.AddWithValue("@Description", path);
                    result = cmdMD.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: Updating SalesOrder Required Date" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int InsertInToSendToMyOB(Invoice inv)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsToMyOb = new SqlCommand("MERGE INTO InvoiceToMyOb i " +
                                                         "USING (select @SalesOrderNo as sales_order_no) d " +
                                                         "ON d.sales_order_no=i.sales_order_no WHEN NOT MATCHED THEN " +
                                                         "INSERT (sales_order_no) VALUES (d.sales_order_no);", conn);

                SqlCommand cmdDeleteMyOb = new SqlCommand("DELETE FROM InvoiceToMyOb " +
                                                          "WHERE sales_order_no=@SalesOrderNo", conn);

                conn.Open();

                try
                {
                    if (inv.ExportToMyOb)
                    {
                        cmdInsToMyOb.Parameters.AddWithValue("@SalesOrderNo", inv.SalesOrderNo);
                        result = cmdInsToMyOb.ExecuteNonQuery();
                    }
                    else
                    {
                        cmdDeleteMyOb.Parameters.AddWithValue("@SalesOrderNo", inv.SalesOrderNo);
                        cmdDeleteMyOb.ExecuteNonQuery();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int FinalizeOrderDB(Invoice invoice, string un, ObservableCollection<SalesOrderDetails> sod, bool exportedToMyOb, List<Tuple<string, Int16, string>> oldTimeStamp,CustomerCreditHistory cch,CustomerCreditActivity cca)
        {
            int result = 0;
            List<int> sodR = new List<int>();
            List<Tuple<string, Int16, string>> newStamp = new List<Tuple<string, short, string>>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                ObservableCollection<Invoice> tempInvoice = new ObservableCollection<Invoice>();
                tempInvoice.Add(new Invoice() { SalesOrderNo = invoice.SalesOrderNo });
                newStamp = GetInvoiceTimeStamp(tempInvoice, true);

                //Update SalesOrderDetails
                SqlCommand cmdUpdateSalesOrderDetails = new SqlCommand("UPDATE SalesOrderDetails SET discount=@Discount,total=@Total " +
                                                                       "WHERE sales_no=@SalesNo AND order_line=@OrderLine AND product_id=@ProductID AND (discount<>@Discount OR total <> @Total)", conn);

                SqlCommand cmdUpdateSalesOrder = new SqlCommand("UPDATE SalesOrder SET order_status=@OrderStatus,last_modified_date=@LastModifiedDate,last_modified_by=@ModifiedBy " +
                                                                "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdUpdateSalesOrder2 = new SqlCommand("UPDATE SalesOrder SET list_price_total=@ListPriceTotal,freight_total=@FreightTotal,total_amount=@TotalAmount,gst=@Gst " +
                                                                "WHERE sales_no=@SalesNo AND (list_price_total<>@ListPriceTotal OR freight_total<>@FreightTotal OR total_amount<>@TotalAmount OR gst<>@Gst)", conn);

                SqlCommand cmdUpdateFreightCodes = new SqlCommand("UPDATE FreightDetails SET freight_code_id=@FreightCodeID,description=@Description,price=@Price,total=@Total " +
                                                                  "WHERE order_no=@SalesNo AND freight_code_id=@FreightCodeID AND (freight_code_id <> @FreightCodeID OR description<> @Description OR total <> @Total OR price <> @Price)", conn);

                SqlCommand cmdUpdateFreightCodes2 = new SqlCommand("UPDATE FreightDetails SET last_updated_date=@LastUpdatedDate,last_updated_by=@LastUpdatedBy " +
                                                                   "WHERE order_no=@SalesNo AND freight_code_id=@FreightCodeID", conn);


                SqlCommand cmdUpdateInvoice = new SqlCommand("UPDATE Invoice SET completed_date=@CompletedDate,completed_by=@CompletedBy,is_completed=@IsCompleted,is_active=@IsActive " +
                                                             "WHERE sales_order_no=@SalesNo", conn);

                SqlCommand cmdUpdateDispatchOrderItem = new SqlCommand("UPDATE DispatchOrderItem SET dispatched_qty=@DispatchedQty " +
                                                                       "WHERE id=@ID", conn);

                SqlCommand cmdUpdateProductStockReserved = new SqlCommand("UPDATE ProductStockReserved SET activity_date=@ActivityDate,status=@Status " +
                                                                          "WHERE prod_stock_reserved_id=@ID", conn);
                //Send to MyOb
                SqlCommand cmdInsUpInvoiceToMyOb = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM InvoiceToMyOb WHERE sales_order_no=@SalesOrderNo) " +
                                                                  "INSERT INTO InvoiceToMyOb(sales_order_no) VALUES(@SalesOrderNo)" , conn);

                //Customer credit
                SqlCommand cmdUpdateCustomerCredit = new SqlCommand("UPDATE Customers SET credit_remaining=@CreditRemaining,credit_owed=@CreditOwed,debt=@Debt,last_updated_by=@LastUpdatedBy, " + 
                                                                                         "last_updated_datetime=@LastUpdatedDatetime " +
                                                                    "WHERE id=@CustomerId AND (credit_remaining<>@CreditRemaining OR credit_owed<>@CreditOwed OR debt<>@Debt)", conn);

                //Add to Customer credit activity
                SqlCommand cmdCustomerCreditActivity = new SqlCommand("INSERT INTO CustomerCreditActivity(customer_id,sales_order_no,amount,type,activity,updated_date,updated_by) " +
                                                                      "VALUES (@CustomerID,@SalesNo,@Amount,@Type,@Activity,@UpdatedDate,@UpdatedBy)", conn);

                //Add to Customer credit sales order
                SqlCommand cmdUpdateCustomerCreditSO = new SqlCommand("UPDATE CustomerCreditSalesOrder SET credit_deducted=@CreditDeducted,credit_remaining=@CreditRemaining,debt=@Debt,updated_date=@UpdatedDate,updated_by=@UpdatedBy,active=@Active " +
                                                                      "WHERE customer_id=@CustomerId AND sales_order_no=@SalesNo AND (credit_deducted<>@CreditDeducted OR credit_remaining<>@CreditRemaining OR debt<>@Debt)", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    //Check if timestamps are not changed
                    bool exec = false;
                    foreach (var items in oldTimeStamp)
                    {
                        exec = newStamp.Any(z => z.Item1 == items.Item1 && z.Item2 == items.Item2 && z.Item3.Equals(items.Item3));
                        if (exec == false)
                        {
                            break;
                        }
                    }

                    if (exec)
                    {
                        cmdUpdateSalesOrder2.Transaction = trans;
                        cmdUpdateSalesOrder2.Parameters.AddWithValue("@SalesNo", invoice.SalesOrderNo);
                        cmdUpdateSalesOrder2.Parameters.AddWithValue("@ListPriceTotal", invoice.ListPriceTotal);
                        cmdUpdateSalesOrder2.Parameters.AddWithValue("@FreightTotal", invoice.FreightTotal);
                        cmdUpdateSalesOrder2.Parameters.AddWithValue("@TotalAmount", invoice.TotalAmount);
                        cmdUpdateSalesOrder2.Parameters.AddWithValue("@Gst", invoice.GST);
                        int so2 = cmdUpdateSalesOrder2.ExecuteNonQuery();

                        if (so2 > 0)
                        {
                            //Update sales order totals
                            foreach (var item in invoice.SalesOrderDetails)
                            {
                                cmdUpdateSalesOrderDetails.Transaction = trans;
                                cmdUpdateSalesOrderDetails.Parameters.AddWithValue("@SalesNo", invoice.SalesOrderNo);
                                cmdUpdateSalesOrderDetails.Parameters.AddWithValue("@OrderLine", item.OrderLine);
                                cmdUpdateSalesOrderDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdUpdateSalesOrderDetails.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdUpdateSalesOrderDetails.Parameters.AddWithValue("@Total", item.Total);
                                cmdUpdateSalesOrderDetails.ExecuteNonQuery();
                                cmdUpdateSalesOrderDetails.Parameters.Clear();
                            }

                            //Update freight details                           
                            List<int> fdR = new List<int>();

                            foreach (var item in invoice.FreightDetails)
                            {
                                cmdUpdateFreightCodes.Transaction = trans;
                                cmdUpdateFreightCodes.Parameters.AddWithValue("@SalesNo", invoice.SalesOrderNo);
                                cmdUpdateFreightCodes.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
                                cmdUpdateFreightCodes.Parameters.AddWithValue("@Description", item.FreightCodeDetails.Description);
                                cmdUpdateFreightCodes.Parameters.AddWithValue("@Price", item.FreightCodeDetails.Price);
                                cmdUpdateFreightCodes.Parameters.AddWithValue("@Total", item.Total);
                                fdR.Add(cmdUpdateFreightCodes.ExecuteNonQuery());
                                //cmdUpdateFreightCodes.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                //cmdUpdateFreightCodes.Parameters.AddWithValue("@LastUpdateBy", salesOrder.LastModifiedBy);
                                cmdUpdateFreightCodes.Parameters.Clear();
                            }

                            bool isFreDetUpdated = fdR.Any(x => x > 0);
                            if (isFreDetUpdated)
                            {
                                foreach (var item in invoice.FreightDetails)
                                {
                                    cmdUpdateFreightCodes2.Transaction = trans;
                                    cmdUpdateFreightCodes2.Parameters.AddWithValue("@SalesNo", invoice.SalesOrderNo);
                                    cmdUpdateFreightCodes2.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.ID);
                                    cmdUpdateFreightCodes2.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                    cmdUpdateFreightCodes2.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                    cmdUpdateFreightCodes2.ExecuteNonQuery();
                                    cmdUpdateFreightCodes2.Parameters.Clear();
                                }
                            }                            

                            if (invoice.Customer.CustomerType == "Account")
                            {
                                if (cch != null && cch.SalesOrderNo >0)
                                {
                                    //Customer credit
                                    cmdUpdateCustomerCredit.Transaction = trans;
                                    cmdUpdateCustomerCredit.Parameters.AddWithValue("@CustomerId", cch.Customer.CustomerId);
                                    cmdUpdateCustomerCredit.Parameters.AddWithValue("@CreditRemaining", cch.TotalCreditRemaining);
                                    cmdUpdateCustomerCredit.Parameters.AddWithValue("@CreditOwed", cch.TotalCreditOwed);
                                    cmdUpdateCustomerCredit.Parameters.AddWithValue("@Debt", cch.TotalDebt);
                                    cmdUpdateCustomerCredit.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                    cmdUpdateCustomerCredit.Parameters.AddWithValue("@LastUpdatedDatetime", DateTime.Now);
                                    int cr = cmdUpdateCustomerCredit.ExecuteNonQuery();
                                }

                                if(cca != null && cca.SalesOrderNo > 0)
                                {
                                    //Add to customer credit activity                            
                                    cmdCustomerCreditActivity.Transaction = trans;
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@CustomerID", cca.Customer.CustomerId);
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@SalesNo", cca.SalesOrderNo);
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@Amount", cca.Amount);
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@Type", cca.Type);
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@Activity", cca.Activity);
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedDate", cca.UpdatedDate);
                                    cmdCustomerCreditActivity.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                    int ccar=cmdCustomerCreditActivity.ExecuteNonQuery();
                                }

                                if (cch != null && cca != null && cch.SalesOrderNo > 0 && cca.SalesOrderNo > 0)
                                {
                                    //Add to customer credit salesorder                            
                                    cmdUpdateCustomerCreditSO.Transaction = trans;
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@CustomerID", cca.Customer.CustomerId);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@SalesNo", cca.SalesOrderNo);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@CreditDeducted", cch.CreditDeducted);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@CreditRemaining", cch.TotalCreditRemaining);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@Debt", cch.TotalDebt);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@CreditAdded", 0);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@UpdatedDate", cca.UpdatedDate);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                    cmdUpdateCustomerCreditSO.Parameters.AddWithValue("@Active", false);
                                    int csor = cmdUpdateCustomerCreditSO.ExecuteNonQuery();
                                }
                            }
                        }

                        cmdUpdateSalesOrder.Transaction = trans;
                        cmdUpdateSalesOrder.Parameters.AddWithValue("@SalesNo", invoice.SalesOrderNo);
                        cmdUpdateSalesOrder.Parameters.AddWithValue("@OrderStatus", OrderStatus.Dispatched.ToString());
                        cmdUpdateSalesOrder.Parameters.AddWithValue("@LastModifiedDate", DateTime.Now);
                        cmdUpdateSalesOrder.Parameters.AddWithValue("@ModifiedBy", UserData.FirstName + " " + UserData.LastName);
                        int resSales=cmdUpdateSalesOrder.ExecuteNonQuery();

                        cmdUpdateInvoice.Transaction = trans;
                        cmdUpdateInvoice.Parameters.AddWithValue("@SalesNo", invoice.SalesOrderNo);
                        cmdUpdateInvoice.Parameters.AddWithValue("@CompletedDate", DateTime.Now);
                        cmdUpdateInvoice.Parameters.AddWithValue("@CompletedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdUpdateInvoice.Parameters.AddWithValue("@IsCompleted", true);
                        cmdUpdateInvoice.Parameters.AddWithValue("@IsActive", false);
                        int resUpInvoice = cmdUpdateInvoice.ExecuteNonQuery();

                        if (exportedToMyOb)
                        {
                            cmdInsUpInvoiceToMyOb.Transaction = trans;
                            cmdInsUpInvoiceToMyOb.Parameters.AddWithValue("@SalesOrderNo", invoice.SalesOrderNo);
                            //cmdInsUpInvoiceToMyOb.Parameters.AddWithValue("@Exported", false);
                            cmdInsUpInvoiceToMyOb.ExecuteNonQuery();
                        }

                        List<int> disList = new List<int>();
                        List<int> prodStoList = new List<int>();
                        foreach (var item in sod)
                        {
                            cmdUpdateDispatchOrderItem.Transaction = trans;
                            cmdUpdateDispatchOrderItem.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                            cmdUpdateDispatchOrderItem.Parameters.AddWithValue("@DispatchedQty", item.Quantity);
                            disList.Add(cmdUpdateDispatchOrderItem.ExecuteNonQuery());
                            cmdUpdateDispatchOrderItem.Parameters.Clear();

                            cmdUpdateProductStockReserved.Transaction = trans;
                            cmdUpdateProductStockReserved.Parameters.AddWithValue("@ID", item.SalesOrderDetailsID);
                            cmdUpdateProductStockReserved.Parameters.AddWithValue("@ActivityDate", DateTime.Now);
                            cmdUpdateProductStockReserved.Parameters.AddWithValue("@Status", OrderStatus.Dispatched.ToString());
                            prodStoList.Add(cmdUpdateProductStockReserved.ExecuteNonQuery());
                            cmdUpdateProductStockReserved.Parameters.Clear();
                        }

                        bool isDisOUp = disList.Any(x => x > 0);
                        bool isProdStUp = prodStoList.Any(x => x > 0);

                        if (resSales > 0 && resUpInvoice > 0 && isDisOUp && isProdStUp)
                        {
                            result = 1;
                            trans.Commit();
                        }
                        else
                        {
                            trans.Rollback();
                        }

                    }
                    else
                    {
                        result = -1;
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static int UpdateSendToMyOB(Int32 salesOrderNo, bool exportedToMyOb)
        {
            int result = 0;
            //int resUpMyOb = 0;
            int resInsMyOb = 0;
            int resDelMyOb = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdInsToMyOb = new SqlCommand("MERGE INTO InvoiceToMyOb i " +
                                                                  "USING (select @SalesOrderNo as sales_order_no) d " +
                                                                  "ON d.sales_order_no=i.sales_order_no WHEN NOT MATCHED THEN " +
                                                                  "INSERT (sales_order_no) VALUES (d.sales_order_no);", conn);

                SqlCommand cmdDeleteMyOb = new SqlCommand("DELETE FROM InvoiceToMyOb " +
                                                          "WHERE sales_order_no=@SalesOrderNo", conn);

                //SqlCommand cmdUpdateMyOb = new SqlCommand("UPDATE Invoice SET export_to_myob = @ExportToMyOB " +
                //                                          "WHERE sales_order_no=@SalesOrderNo AND (export_to_myob <> @ExportToMyOB)", conn);
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    //cmdUpdateMyOb.Transaction = trans;
                    //cmdUpdateMyOb.Parameters.AddWithValue("@SalesOrderNo", salesOrderNo);
                    //cmdUpdateMyOb.Parameters.AddWithValue("@ExportToMyOB", exportedToMyOb);
                    //resUpMyOb = cmdUpdateMyOb.ExecuteNonQuery();

                    if (exportedToMyOb)
                    {
                        cmdInsToMyOb.Transaction = trans;
                        cmdInsToMyOb.Parameters.AddWithValue("@SalesOrderNo", salesOrderNo);
                        resInsMyOb = cmdInsToMyOb.ExecuteNonQuery();
                    }
                    else if (exportedToMyOb == false)
                    {
                        cmdDeleteMyOb.Transaction = trans;
                        cmdDeleteMyOb.Parameters.AddWithValue("@SalesOrderNo", salesOrderNo);
                        resDelMyOb = cmdDeleteMyOb.ExecuteNonQuery();
                    }

                    if (resInsMyOb > 0 || resDelMyOb > 0)
                    {
                        trans.Commit();
                        result = 1;
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }


        public static Customer GetCustomerCreditDetails(Int32 customerID)
        {
            Customer customer = new Customer();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Customers " +
                                                                "WHERE id =@CustomerID", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@CustomerID", customerID);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    customer.CustomerId = Convert.ToInt32(dr["id"]);
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return customer;
        }

        public static Tuple<Customer, List<ProductStock>> GetMultipleData(int customerID, ObservableCollection<SalesOrderDetails> sod, int stockLocationID)
        {
            Customer customer = new Customer();
            List<ProductStock> productStock = new List<ProductStock>(); 

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Customers " +
                                                                "WHERE id =@CustomerID", conn))
                    {
                        cmdGetId.Parameters.AddWithValue("@CustomerID", customerID);
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                }
                            }
                        }
                    }

                    foreach (var item in sod)
                    {
                        using (SqlCommand cmdGetId = new SqlCommand("SELECT ProductStock.product_id,Products.unit_price,ProductStock.qty_available " +
                                                                    "FROM ProductStock " +
                                                                    "INNER JOIN Products ON ProductStock.product_id = Products.id " +
                                                                    "WHERE product_id =@ProductID AND stock_location_id=@StockLocationID", conn))
                        {
                            cmdGetId.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdGetId.Parameters.AddWithValue("@StockLocationID", stockLocationID);
                            using (SqlDataReader dr = cmdGetId.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                    
                                            ProductStock ps = new ProductStock();
                                            ps.Product = new Product();
                                            ps.Product.ProductID = item.Product.ProductID;
                                            ps.Product.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                            ps.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                            productStock.Add(ps);
                                                                       
                                    }
                                }
                            }
                            cmdGetId.Parameters.Clear();
                        }                        
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(customer, productStock);
        }

        public static User Login(string userName)
        {
            User user = new User();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdLogin = new SqlCommand("SELECT * FROM Users WHERE Username='" + userName + "'", conn))
                    {

                        using (SqlDataReader dr = cmdLogin.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    user.ID = Convert.ToInt16(dr["ID"]);
                                    user.Username = Convert.ToString(dr["Username"]);
                                    user.Password = (byte[])dr["Password"];
                                    user.FirstName = Convert.ToString(dr["FirstName"]);
                                    user.LastName = Convert.ToString(dr["LastName"]);
                                    user.State = Convert.ToString(dr["State"]);

                                    break;
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return user;
        }

        public static List<UserPrivilages> GetUserPrivilages(int UserID)
        {
            List<UserPrivilages> uPrivList = new List<UserPrivilages>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetData = new SqlCommand("SELECT * FROM UserPrivilagesTest WHERE user_id=@UserID", conn))
                    {
                        cmdGetData.Parameters.AddWithValue("@UserID", UserID);
                        using (SqlDataReader dr = cmdGetData.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    UserPrivilages uPri = new UserPrivilages();

                                    uPri.ID = Convert.ToInt16(dr["id"]);
                                    uPri.UserID = Convert.ToInt16(dr["user_id"]);
                                    uPri.Area = dr["area"].ToString();
                                    uPri.Visibility = dr["visibility"].ToString();

                                    //uPri.ID = Convert.ToInt16(dr["ID"]);
                                    //uPri.UserID = Convert.ToInt16(dr["UserID"]);
                                    //uPri.Quoting = Convert.ToString(dr["Quoting"]);
                                    //uPri.AddQuote = Convert.ToString(dr["AddQuote"]);
                                    //uPri.UpdateQuote = Convert.ToString(dr["UpdateQuote"]);
                                    //uPri.Maintenance = Convert.ToString(dr["Maintenance"]);
                                    //uPri.Production = Convert.ToString(dr["Production"]);
                                    //uPri.Customers = Convert.ToString(dr["Customers"]);
                                    //uPri.AddCustomer = Convert.ToString(dr["AddCustomer"]);
                                    //uPri.UpdateCustomer = Convert.ToString(dr["UpdateCustomer"]);
                                    //uPri.Products = Convert.ToString(dr["Products"]);
                                    //uPri.Freight = Convert.ToString(dr["Freight"]);
                                    //uPri.Users = Convert.ToString(dr["Users"]);
                                    //uPri.Forklifts = Convert.ToString(dr["Forklifts"]);
                                    //uPri.Vehicles = Convert.ToString(dr["Vehicles"]);
                                    //uPri.ForkLiftWorkOrder = Convert.ToString(dr["ForkLiftWorkOrder"]);
                                    //uPri.AddForkLift = Convert.ToString(dr["AddForkLift"]);
                                    //uPri.UpdateForkLift = Convert.ToString(dr["UpdateForkLift"]);
                                    //uPri.AddVehicle = Convert.ToString(dr["AddVehicle"]);
                                    //uPri.VehicleWorkOrder = Convert.ToString(dr["VehicleWorkOrder"]);
                                    //uPri.AddDailyProduction = Convert.ToString(dr["AddDailyProduction"]);
                                    //uPri.ViewProduction = Convert.ToString(dr["ViewProduction"]);
                                    //uPri.AddProduct = Convert.ToString(dr["AddProduct"]);
                                    //uPri.UpdateProduct = Convert.ToString(dr["UpdateProduct"]);
                                    //uPri.Orders = Convert.ToString(dr["Orders"]);
                                    //uPri.MenuProduction = Convert.ToBoolean(dr["MenuProduction"]);
                                    //uPri.MenuGrading = Convert.ToBoolean(dr["MenuGrading"]);
                                    //uPri.MenuMixing = Convert.ToBoolean(dr["MenuMixing"]);
                                    //uPri.MenuSlitting = Convert.ToBoolean(dr["MenuSlitting"]);
                                    //uPri.MenuPeeling = Convert.ToBoolean(dr["MenuPeeling"]);

                                    uPrivList.Add(uPri);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return uPrivList;
        }





        public static Tuple<int, int, string> InsertQuote(Quote quote, string OtherContactName, string OtherContactNamePhone1, string OtherContactNamePhone2, bool addShippingAddress,
           string shippingAddress, string shippingCity, string shippingState, string shippingPostCode, string shippingCountry, string prepaidCustomerName, string contactEmail, string customerType,
           Category SelectedCategory, bool addCustomerToDatabase, ObservableCollection<DiscountStructure> discountStructureList, Quote prevQuote)
        {
            int result = 0;
            int quoteId = 0;
            int prePaidCusRes = 0;
            int contactPersonCount = 0;
            Int32 contactPersonID = 0;
            int customerID = 0;
            List<int> qdRList = new List<int>();
            List<int> qFDList = new List<int>();
            List<int> disList = new List<int>();
            string fileName = string.Empty;
            Regex rgx = new Regex("[^a-zA-Z0-9 _]");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //Insert InTo Quotes
                SqlCommand cmdInsertQuote = new SqlCommand("INSERT INTO Quotes(customer_id,contact_person_id,project_name,quote_date,ship_address,ship_city,ship_state,ship_postcode,ship_country,list_price_total,discounted_total,freight_total,gst,gst_enabled,total_amount,rep_id,instructions,internal_comments,last_updated_id,last_updated_date,sent_to_pending_sale,pending_sale_to_sale,courier_name) " +
                                                           "OUTPUT INSERTED.ID VALUES (@CustomerID,@ContactPersonID,@ProjectName,@QuoteDate,@ShipAddress,@ShipCity,@ShipState,@ShipPostCode,@ShipCountry,@ListPriceTotal,@DiscountedTotal,@FreightTotal,@Gst,@GstEnabled,@TotalAmount,@RepID,@Instructions,@InternalComments,@LastUpdatedBy,@LastUpdatedDate,@SentToPendingSale,@PendingSaleToSale,@CourierName)", conn);

                //Insert InTo QuoteDetails
                SqlCommand cmdInsertQuoteDetails = new SqlCommand("INSERT INTO QuoteDetails(quote_no,qty,product_id,description,list_price,discount,total,stocked) " +
                                                                  "VALUES (@QuoteNo,@Qty,@ProductID,@Descriptions,@ListPrice,@Discount,@Total,@Stocked)", conn);

                //Insert InTo FreightDetails
                SqlCommand cmdInsertQuoteFreightDetails = new SqlCommand("INSERT INTO QuoteFreightDetails(quote_no,pallets,freight_code_id,description,price,discount,total,last_updated_by,last_updated_date) " +
                                                                         "VALUES (@QuoteNo,@Pallets,@FreightCodeID,@Description,@Price,@Discount,@Total,@LastUpdatedBy,@LastUpdatedDate)", conn);

                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET ship_address= @ShipAddress,ship_city=@ShipCity,ship_state=@ShipState,ship_postcode=@ShipPostcode,ship_country=@ShipCountry " +
                                                              "WHERE id = @CustomerID", conn);

                SqlCommand cmdCheckContactPerson = new SqlCommand("SELECT COUNT(*) FROM ContactPerson WHERE customer_id=@CustomerID AND LOWER(contact_person_name) LIKE @ContactPersonName", conn);

                SqlCommand cmdInsertContactPerson = new SqlCommand("INSERT INTO ContactPerson(customer_id,contact_person_name,contact_phone_number1,contact_phone_number2,contact_email,updated_by,updated_datetime,active) " +
                                                                   "OUTPUT INSERTED.ID VALUES (@CustomerID,@ContactPersonName,@ContactPersonNumber1,@ContactPersonNumber2,@ContactEmail,@UpdatedBy,@UpdatedDatetime,@Active)", conn);

                SqlCommand cmdUpdateContactPerson = new SqlCommand("UPDATE ContactPerson SET contact_person_name = @ContactPersonName, contact_phone_number1=@ContactPhoneNumber1, contact_phone_number2=@ContactPhoneNumber2, contact_email=@ContactEmail, updated_by=@UpdatedBy, updated_datetime=@UpdatedDateTime " +
                                                                   "WHERE id = @ID AND customer_id=@CustomerID AND (contact_person_name <> @ContactPersonName OR contact_phone_number1 <> @ContactPhoneNumber1 OR contact_phone_number2 <> @ContactPhoneNumber2 OR contact_email <> @ContactEmail)", conn);

                SqlCommand cmdUpdateFileName = new SqlCommand("UPDATE Quotes SET file_name= @FileName WHERE id = @QuoteNo", conn);

                //Prepaid Customers
                SqlCommand cmdInsertPrePaidCustomer = new SqlCommand("INSERT INTO PrePaidCustomers(quote_no,new_order_pdf_no,sales_no,prepaid_customer_name) " +
                                                                     "VALUES (@QuoteNo,@NewOrderPdfNo,@SalesNo,@PrePaidCustomerName)", conn);

                SqlCommand cmdInsertContactPersonNewOrderPDF = new SqlCommand("INSERT INTO PrepaidCustomerContactPersonDetails(quote_no,order_no,contact_person_name,contact_phone_number1,contact_phone_number2,contact_email,updated_by,updated_datetime,active) " +
                                                                              "OUTPUT INSERTED.ID VALUES (@QuoteNo,@OrderNo,@ContactPersonName,@ContactPersonNumber1,@ContactPersonNumber2,@ContactEmail,@UpdatedBy,@UpdatedDatetime,@Active)", conn);

                SqlCommand cmdUpdatePreCusConPersonDetails = new SqlCommand("UPDATE PrepaidCustomerContactPersonDetails SET quote_no = @QuoteNo WHERE id = @ID", conn);

                //Discount
                SqlCommand cmdGetCategories = new SqlCommand("SELECT * FROM Category " +
                                                             "WHERE id <> 8 AND id <>9 ORDER BY category_name", conn);

                SqlCommand cmdInsertUpdateDiscount = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Discount " +
                                                                          "WHERE customer_id=@CustomerID AND category_id = @CategoryID) " +
                                                                          "INSERT INTO Discount(customer_id,category_id,discount,comment,updated_date,updated_by) VALUES(@CustomerID,@CategoryID,@Discount,@Comment,@UpdatedDate,@UpdatedBy) " +
                                                                          "ELSE " +
                                                                          "UPDATE Discount SET discount=@Discount,updated_date=@UpdatedDate,updated_by=@UpdatedBy " +
                                                                          "WHERE customer_id=@CustomerID AND category_id = @CategoryID AND discount <> @Discount", conn);

                //Get contactpersonId
                SqlCommand cmdGetContactPersonID = new SqlCommand("SELECT id FROM ContactPerson " +
                                                                  "WHERE customer_id = @CustomerID AND contact_person_name = @ContactPersonName", conn);

                SqlCommand cmdQuoteCustomerContact = new SqlCommand("UPDATE Quotes SET customer_id = @CustomerID, contact_person_id = @ContactPersonID WHERE id = @QuoteNo", conn);


                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    //Fix discount. Makesure to have all the categries
                    //Get the categories
                    List<Category> catList = new List<Category>();
                    cmdGetCategories.Transaction = trans;
                    using (SqlDataReader dr = cmdGetCategories.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Category c = new Category();

                                c.CategoryID = Convert.ToInt16(dr["id"]);
                                c.CategoryName = dr["category_name"].ToString();
                                c.CategoryDescription = dr["category_description"].ToString();
                                catList.Add(c);
                            }
                        }
                    }

                    List<DiscountStructure> disStrList = discountStructureList != null ? new List<DiscountStructure>(discountStructureList) : null;
                    foreach (var item in catList)
                    {
                        var data = disStrList == null ? null : disStrList.SingleOrDefault(x => x.Category.CategoryID == item.CategoryID);
                        if (data == null)
                        {
                            if (disStrList == null)
                            {
                                disStrList = new List<DiscountStructure>();
                            }
                            disStrList.Add(new DiscountStructure() { Category = item, Discount = 0, UpdatedBy = UserData.FirstName + " " + UserData.LastName, UpdatedDate = DateTime.Now });
                        }
                    }

                    //Add new customer to database
                    if (addCustomerToDatabase)
                    {
                        string contactPersonName = string.Empty;

                        Customer newCustomer = new Customer();
                        newCustomer.CompanyName = prepaidCustomerName;
                        newCustomer.CustomerType = customerType;
                        newCustomer.CompanyAddress = string.Empty;
                        newCustomer.CompanyCity = string.Empty;
                        newCustomer.CompanyState = string.Empty;
                        newCustomer.CompanyCountry = string.Empty;
                        newCustomer.CompanyPostCode = string.Empty;
                        newCustomer.CompanyEmail = string.Empty;
                        newCustomer.CompanyTelephone = string.Empty;
                        newCustomer.CompanyFax = string.Empty;
                        newCustomer.Designation1 = string.Empty;
                        newCustomer.FirstName1 = string.Empty;
                        newCustomer.LastName1 = string.Empty;
                        newCustomer.Telephone1 = string.Empty;
                        newCustomer.Mobile1 = string.Empty;
                        newCustomer.Fax1 = string.Empty;
                        newCustomer.Email1 = string.Empty;
                        newCustomer.Designation2 = string.Empty;
                        newCustomer.FirstName2 = string.Empty;
                        newCustomer.LastName2 = string.Empty;
                        newCustomer.Telephone2 = string.Empty;
                        newCustomer.Mobile2 = string.Empty;
                        newCustomer.Fax2 = string.Empty;
                        newCustomer.Email2 = string.Empty;
                        newCustomer.Designation3 = string.Empty;
                        newCustomer.FirstName3 = string.Empty;
                        newCustomer.LastName3 = string.Empty;
                        newCustomer.Telephone3 = string.Empty;
                        newCustomer.Mobile3 = string.Empty;
                        newCustomer.Fax3 = string.Empty;
                        newCustomer.Email3 = string.Empty;
                        newCustomer.ShipAddress = CheckNull<string>(shippingAddress);
                        newCustomer.ShipCity = CheckNull<string>(shippingCity);
                        newCustomer.ShipState = CheckNull<string>(shippingState);
                        newCustomer.ShipPostCode = CheckNull<string>(shippingPostCode);
                        newCustomer.ShipCountry = CheckNull<string>(shippingCountry);
                        newCustomer.ContactPerson = new List<ContactPerson>();
                        if (quote.ContactPerson.ContactPersonName == "Other")
                        {
                            newCustomer.ContactPerson.Add(new ContactPerson() { ContactPersonName = OtherContactName, Email = contactEmail, Active = true, PhoneNumber1 = OtherContactNamePhone1, PhoneNumber2 = OtherContactNamePhone2 });
                            contactPersonName = OtherContactName;
                        }
                        else
                        {
                            newCustomer.ContactPerson.Add(quote.ContactPerson);
                            contactPersonName = quote.ContactPerson.ContactPersonName;
                        }
                        if (addShippingAddress)
                        {
                            newCustomer.ShipAddress = CheckNull<string>(shippingAddress);
                            newCustomer.ShipCity = CheckNull<string>(shippingCity);
                            newCustomer.ShipState = CheckNull<string>(shippingState);
                            newCustomer.ShipPostCode = CheckNull<string>(shippingPostCode);
                            newCustomer.ShipCountry = CheckNull<string>(shippingCountry);
                        }

                        newCustomer.CreditLimit = 0;
                        newCustomer.CreditRemaining = 0;
                        newCustomer.Debt = 0;
                        newCustomer.Active = true;
                        newCustomer.LastUpdatedBy = UserData.FirstName + " " + UserData.LastName;
                        newCustomer.LastUpdatedDateTime = DateTime.Now;
                        newCustomer.DiscountStructure = new ObservableCollection<DiscountStructure>(disStrList);
                        newCustomer.StopCredit = "false";
                        newCustomer.PrimaryBusiness = SelectedCategory;
                        newCustomer.CustomerNotes = new ObservableCollection<CustomerNote>();
                        newCustomer.ProductsInstalled = new ObservableCollection<ProductType>();

                        AdminNote adminNote = new AdminNote();
                        adminNote = null;

                        customerID = DBAccess.AddNewCustomer(newCustomer, "False", string.Empty, string.Empty, string.Empty, 0, adminNote);
                        if (customerID > 0)
                        {
                            quote.Customer.CustomerId = customerID;
                            quote.Customer.CompanyName = prepaidCustomerName;

                            //Get the contactperson id
                            cmdGetContactPersonID.Transaction = trans;
                            cmdGetContactPersonID.Parameters.AddWithValue("@CustomerID", customerID);
                            cmdGetContactPersonID.Parameters.AddWithValue("@ContactPersonName", contactPersonName);
                            using (SqlDataReader dr = cmdGetContactPersonID.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        contactPersonID = Convert.ToInt16(dr["id"]);
                                    }
                                }
                            }

                            if (prevQuote != null && prevQuote.QuoteNo > 0)
                            {
                                //Update Quote new customer id and contactperson id
                                cmdQuoteCustomerContact.Transaction = trans;
                                cmdQuoteCustomerContact.Parameters.AddWithValue("@QuoteNo", prevQuote.QuoteNo);
                                cmdQuoteCustomerContact.Parameters.AddWithValue("@CustomerID", customerID);
                                cmdQuoteCustomerContact.Parameters.AddWithValue("@ContactPersonID", contactPersonID);
                                int res = cmdQuoteCustomerContact.ExecuteNonQuery();
                            }
                        }
                        else if (customerID == -2)
                        {
                            result = -4;
                        }
                    }
                    else
                    {
                        //Prepaid customer not in database
                        if (quote.Customer.CustomerId == 0)
                        {
                            cmdInsertContactPersonNewOrderPDF.Transaction = trans;
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@QuoteNo", 0);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@OrderNo", 0);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactPersonName", string.IsNullOrWhiteSpace(OtherContactName) ? quote.ContactPerson.ContactPersonName : OtherContactName);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactPersonNumber1", string.IsNullOrWhiteSpace(OtherContactName) ? quote.ContactPerson.PhoneNumber1 : OtherContactNamePhone1);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactPersonNumber2", string.IsNullOrWhiteSpace(OtherContactName) ? quote.ContactPerson.PhoneNumber2 : OtherContactNamePhone2);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactEmail", string.IsNullOrWhiteSpace(OtherContactName) ? quote.ContactPerson.Email : contactEmail);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@UpdatedDatetime", DateTime.Now);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@Active", true);
                            contactPersonID = (Int32)cmdInsertContactPersonNewOrderPDF.ExecuteScalar();
                        }
                        else
                        {
                            //Add/update discounts
                            foreach (var item in disStrList)
                            {
                                cmdInsertUpdateDiscount.Transaction = trans;
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@CustomerID", quote.Customer.CustomerId);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@CategoryID", item.Category.CategoryID);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@Comment", "");
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedDate", item.UpdatedDate);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                                disList.Add(cmdInsertUpdateDiscount.ExecuteNonQuery());
                                cmdInsertUpdateDiscount.Parameters.Clear();
                            }

                            if (quote.ContactPerson != null)
                            {
                                if (quote.ContactPerson.ContactPersonID == -1)
                                {
                                    //First check if the contact person exist in the database
                                    cmdCheckContactPerson.Transaction = trans;
                                    cmdCheckContactPerson.Parameters.AddWithValue("@CustomerID", quote.Customer.CustomerId);
                                    cmdCheckContactPerson.Parameters.AddWithValue("@ContactPersonName", OtherContactName);
                                    contactPersonCount = (int)cmdCheckContactPerson.ExecuteScalar();

                                    if (contactPersonCount == 0)
                                    {
                                        cmdInsertContactPerson.Transaction = trans;
                                        cmdInsertContactPerson.Parameters.AddWithValue("@CustomerID", quote.Customer.CustomerId);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonName", OtherContactName);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonNumber1", OtherContactNamePhone1);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonNumber2", OtherContactNamePhone2);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactEmail", contactEmail);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedDatetime", DateTime.Now);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@Active", true);
                                        contactPersonID = (Int32)cmdInsertContactPerson.ExecuteScalar();
                                    }
                                }
                                else
                                {
                                    if (quote.ContactPerson.ContactPersonID > 0 && quote.ContactPerson.CustomerID > 0)
                                    {
                                        //Update Contact person details
                                        cmdUpdateContactPerson.Transaction = trans;
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@ID", quote.ContactPerson.ContactPersonID);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@CustomerID", quote.ContactPerson.CustomerID);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPersonName", quote.ContactPerson.ContactPersonName);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPhoneNumber1", quote.ContactPerson.PhoneNumber1);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPhoneNumber2", quote.ContactPerson.PhoneNumber2);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@ContactEmail", quote.ContactPerson.Email);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@Active", true);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                        cmdUpdateContactPerson.Parameters.AddWithValue("@UpdatedDateTime", DateTime.Now);
                                        int res = cmdUpdateContactPerson.ExecuteNonQuery();

                                        contactPersonID = quote.ContactPerson.ContactPersonID;
                                        contactPersonID = quote.ContactPerson.ContactPersonID == -2 ? 0 : quote.ContactPerson.ContactPersonID;
                                    }
                                }
                            }
                        }
                    }

                    if ((contactPersonCount == 0 && addCustomerToDatabase == false) || (contactPersonCount == 0 && addCustomerToDatabase == true && customerID > 0))
                    {
                        cmdInsertQuote.Transaction = trans;
                        cmdInsertQuote.Parameters.AddWithValue("@CustomerID", quote.Customer == null ? 0 : quote.Customer.CustomerId);
                        cmdInsertQuote.Parameters.AddWithValue("@ContactPersonID", quote.Customer.CustomerId == 0 ? 0 : contactPersonID);
                        cmdInsertQuote.Parameters.AddWithValue("@ProjectName", quote.ProjectName);
                        cmdInsertQuote.Parameters.AddWithValue("@QuoteDate", quote.QuoteDate);
                        cmdInsertQuote.Parameters.AddWithValue("@ShipAddress", shippingAddress == null ? "" : shippingAddress);
                        cmdInsertQuote.Parameters.AddWithValue("@ShipCity", shippingCity == null ? "" : shippingCity);
                        cmdInsertQuote.Parameters.AddWithValue("@ShipState", shippingState == null ? "" : shippingState);
                        cmdInsertQuote.Parameters.AddWithValue("@ShipPostCode", shippingPostCode == null ? "" : shippingPostCode);
                        cmdInsertQuote.Parameters.AddWithValue("@ShipCountry", shippingCountry == null ? "" : shippingCountry);
                        cmdInsertQuote.Parameters.AddWithValue("@ListPriceTotal", quote.ListPriceTotal);
                        cmdInsertQuote.Parameters.AddWithValue("@DiscountedTotal", quote.DiscountedTotal);
                        cmdInsertQuote.Parameters.AddWithValue("@FreightTotal", quote.FreightTotal);
                        cmdInsertQuote.Parameters.AddWithValue("@Gst", quote.Gst);
                        cmdInsertQuote.Parameters.AddWithValue("@GstEnabled", quote.GSTActive);
                        cmdInsertQuote.Parameters.AddWithValue("@TotalAmount", quote.TotalAmount);
                        cmdInsertQuote.Parameters.AddWithValue("@RepID", quote.User.ID);
                        cmdInsertQuote.Parameters.AddWithValue("@Instructions", quote.Instructions == null ? "" : quote.Instructions);
                        cmdInsertQuote.Parameters.AddWithValue("@InternalComments", quote.InternalComments == null ? "" : quote.InternalComments);
                        cmdInsertQuote.Parameters.AddWithValue("@LastUpdatedBy", quote.LastUpdatedBy.ID);
                        cmdInsertQuote.Parameters.AddWithValue("@LastUpdatedDate", quote.LastUpdatedDate);
                        cmdInsertQuote.Parameters.AddWithValue("@SentToPendingSale", false);
                        cmdInsertQuote.Parameters.AddWithValue("@PendingSaleToSale", false);
                        cmdInsertQuote.Parameters.AddWithValue("@CourierName", quote.QuoteCourierName == null ? "" : quote.QuoteCourierName);
                        quoteId = (int)cmdInsertQuote.ExecuteScalar();

                        if (quoteId > 0)
                        {
                            if (quote.Customer.CustomerId == 0)
                            {
                                //Update the order no in PrepaidCustomerContactDetails
                                cmdUpdatePreCusConPersonDetails.Transaction = trans;
                                cmdUpdatePreCusConPersonDetails.Parameters.AddWithValue("@ID", contactPersonID);
                                cmdUpdatePreCusConPersonDetails.Parameters.AddWithValue("@QuoteNo", quoteId);
                                int a = cmdUpdatePreCusConPersonDetails.ExecuteNonQuery();
                            }

                            foreach (var item in quote.QuoteDetails)
                            {
                                cmdInsertQuoteDetails.Transaction = trans;
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@QuoteNo", quoteId);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@Qty", item.Quantity);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@Descriptions", item.QuoteProductDescription);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@ListPrice", item.QuoteUnitPrice);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@Total", item.Total);
                                cmdInsertQuoteDetails.Parameters.AddWithValue("@Stocked", item.Product.LocationType);
                                qdRList.Add(cmdInsertQuoteDetails.ExecuteNonQuery());
                                cmdInsertQuoteDetails.Parameters.Clear();
                            }

                            foreach (var item in quote.FreightDetails)
                            {
                                cmdInsertQuoteFreightDetails.Transaction = trans;
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@QuoteNo", quoteId);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@Pallets", item.Pallets);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.ID);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@Description", item.FreightCodeDetails.Description);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@Price", item.FreightCodeDetails.Price);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@Total", item.Total);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@LastUpdatedBy", quote.LastUpdatedBy.ID);
                                cmdInsertQuoteFreightDetails.Parameters.AddWithValue("@LastUpdatedDate", quote.LastUpdatedDate);
                                qFDList.Add(cmdInsertQuoteFreightDetails.ExecuteNonQuery());
                                cmdInsertQuoteFreightDetails.Parameters.Clear();
                            }


                            if (addShippingAddress)
                            {
                                cmdUpdateCustomer.Transaction = trans;
                                cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", quote.Customer.CustomerId);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipAddress", string.IsNullOrWhiteSpace(shippingAddress) ? string.Empty : shippingAddress);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipCity", string.IsNullOrWhiteSpace(shippingCity) ? string.Empty : shippingCity);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipState", string.IsNullOrWhiteSpace(shippingState) ? string.Empty : shippingState);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipPostcode", string.IsNullOrWhiteSpace(shippingPostCode) ? string.Empty : shippingPostCode);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipCountry", string.IsNullOrWhiteSpace(shippingCountry) ? string.Empty : shippingCountry);
                                cmdUpdateCustomer.ExecuteNonQuery();
                            }


                            if (quote.Customer == null || quote.Customer.CustomerId == 0)
                            {
                                //Prepaid customers
                                cmdInsertPrePaidCustomer.Transaction = trans;
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@QuoteNo", quoteId);
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@NewOrderPdfNo", 0);
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@SalesNo", 0);
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@PrePaidCustomerName", prepaidCustomerName);
                                prePaidCusRes = cmdInsertPrePaidCustomer.ExecuteNonQuery();
                            }

                            //Update file name 
                            string prePaidCusName = prepaidCustomerName.Replace("/", "").Replace(@"\", "");
                            string dbCusName = (quote.Customer != null && quote.Customer.CompanyName != null) ? quote.Customer.CompanyName.Replace("/", "").Replace(@"\", "") : prePaidCusName;

                            string cusName = quote.Customer == null || quote.Customer.CustomerId == 0 ? prePaidCusName.Replace(" ", "") : dbCusName.Replace(" ", "");
                            fileName = rgx.Replace(cusName + "_" + quote.ProjectName.Replace("/", "_").Replace(@"\", "_") + "_" + quoteId, "");
                            fileName = fileName + ".pdf";
                            cmdUpdateFileName.Transaction = trans;
                            cmdUpdateFileName.Parameters.AddWithValue("@QuoteNo", quoteId);
                            cmdUpdateFileName.Parameters.AddWithValue("@FileName", fileName);
                            cmdUpdateFileName.ExecuteNonQuery();
                        }



                        bool qdR = qdRList.Any(x => x > 0);

                        if (quoteId > 0 && qdR)
                        {
                            result = 1;
                        }
                    }
                    else if (contactPersonCount == 0 && addCustomerToDatabase == true && customerID == 0)
                    {
                        result = -3;
                    }
                    else
                    {
                        result = -2;
                        trans.Rollback();
                    }

                    if (result == 1)
                    {
                        trans.Commit();

                        if (disList.Any(x => x > 0))
                        {
                            EmailManager.SendEmailAlertDiscountChange(quote.Customer.CustomerId, disStrList);
                        }
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return Tuple.Create(quoteId, result, fileName);
        }


        public static Tuple<int, int, string> InsertNewOrderPDF(NewOrderPDFM newOrderPDFM, string OtherContactName, string OtherContactNamePhone1, string OtherContactNamePhone2, bool addShippingAddress,
                                                                string shippingAddress, string shippingCity, string shippingState, string shippingPostCode, string shippingCountry, string prepaidCustomerName,
                                                                string contactEmail, string customerType, Category SelectedCategory, bool addCustomerToDatabase,
                                                                ObservableCollection<DiscountStructure> discountStructureList, Quote prevQuote)
        {
            int customerID = 0;
            int result = 0;
            int quoteId = 0;
            int prePaidCusRes = 0;
            int contactPersonCount = 0;
            Int32 contactPersonID = 0;
            List<int> qdRList = new List<int>();
            List<int> qFDList = new List<int>();
            List<int> disUpList = new List<int>();
            string fileName = string.Empty;
            Regex rgx = new Regex("[^a-zA-Z0-9 _]");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmdInsertNewOrderPDF = new SqlCommand("INSERT INTO NewOrderPDF(quote_no,customer_id,contact_person_id,project_name,new_order_date,ship_address,ship_city,ship_state,ship_postcode,ship_country,list_price_total,discounted_total,freight_total,gst,gst_enabled,total_amount,site_contact_name,site_contact_phone,date_required_type,date_required,courier_name,unload_type,freight_type,order_truck,customer_charged_freight,rep_id,instructions,internal_comments,last_updated_id,last_updated_date,sent_to_pending_sale,pending_sale_to_sale) " +
                                                                 "OUTPUT INSERTED.ID VALUES (@QuoteNo,@CustomerID,@ContactPersonID,@ProjectName,@NewOrderDate,@ShipAddress,@ShipCity,@ShipState,@ShipPostCode,@ShipCountry,@ListPriceTotal,@DiscountedTotal,@FreightTotal,@Gst,@GstEnabled,@TotalAmount,@SiteContactName,@SiteContactPhone,@DateReqType,@DateRequired,@CourierName,@UnloadType,@FreightType,@OrderTruck,@CustomerChargedFreight,@RepID,@Instructions,@InternalComments,@LastUpdatedBy,@LastUpdatedDate,@SentToPendingSale,@PendingSaleToSale)", conn);

                SqlCommand cmdInsertNewOrderPDFDetails = new SqlCommand("INSERT INTO NewOrderPDFDetails(new_orderPDF_no,qty,product_id,description,list_price,discount,total,stocked) " +
                                                                        "VALUES (@NewOrderPDFNo,@Qty,@ProductID,@Descriptions,@ListPrice,@Discount,@Total,@Stocked)", conn);

                SqlCommand cmdInsertNewOrderPDFFreightDetails = new SqlCommand("INSERT INTO NewOrderPDFFreightDetails(new_orderPDF_no,pallets,freight_code_id,description,price,discount,total,last_updated_by,last_updated_date) " +
                                                                               "VALUES (@NewOrderPDFNo,@Pallets,@FreightCodeID,@Description,@Price,@Discount,@Total,@LastUpdatedBy,@LastUpdatedDate)", conn);

                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET ship_address= @ShipAddress,ship_city=@ShipCity,ship_state=@ShipState,ship_postcode=@ShipPostcode,ship_country=@ShipCountry " +
                                                              "WHERE id = @CustomerID", conn);

                SqlCommand cmdInsertContactPersonNewOrderPDF = new SqlCommand("INSERT INTO PrepaidCustomerContactPersonDetails(quote_no,order_no,contact_person_name,contact_phone_number1,contact_phone_number2,contact_email,updated_by,updated_datetime,active) " +
                                                                              "OUTPUT INSERTED.ID VALUES (@QuoteNo,@OrderNo,@ContactPersonName,@ContactPersonNumber1,@ContactPersonNumber2,@ContactEmail,@UpdatedBy,@UpdatedDatetime,@Active)", conn);
                
                SqlCommand cmdUpdateFileName = new SqlCommand("UPDATE NewOrderPDF SET file_name= @FileName WHERE id = @QuoteNo", conn);

                SqlCommand cmdInsertPrePaidCustomer = new SqlCommand("INSERT INTO PrePaidCustomers(quote_no,new_order_pdf_no,sales_no,prepaid_customer_name) " +
                                                                     "VALUES (@QuoteNo,@NewOrderPdfNo,@SalesNo,@PrePaidCustomerName)", conn);

                
                SqlCommand cmdCheckContactPerson = new SqlCommand("SELECT COUNT(*) FROM ContactPerson WHERE customer_id=@CustomerID AND LOWER(contact_person_name) LIKE @ContactPersonName", conn);

                SqlCommand cmdInsertContactPerson = new SqlCommand("INSERT INTO ContactPerson(customer_id,contact_person_name,contact_phone_number1,contact_phone_number2,contact_email,updated_by,updated_datetime,active) " +
                                                                   "OUTPUT INSERTED.ID VALUES (@CustomerID,@ContactPersonName,@ContactPersonNumber1,@ContactPersonNumber2,@ContactEmail,@UpdatedBy,@UpdatedDatetime,@Active)", conn);

                SqlCommand cmdUpdateContactPerson = new SqlCommand("UPDATE ContactPerson SET contact_person_name = @ContactPersonName, contact_phone_number1=@ContactPhoneNumber1, contact_phone_number2=@ContactPhoneNumber2, contact_email=@ContactEmail, updated_by=@UpdatedBy, updated_datetime=@UpdatedDateTime " +
                                                                   "WHERE id = @ID AND customer_id=@CustomerID AND (contact_person_name <> @ContactPersonName OR contact_phone_number1 <> @ContactPhoneNumber1 OR contact_phone_number2 <> @ContactPhoneNumber2 OR contact_email <> @ContactEmail)", conn);

                SqlCommand cmdUpdateQuotes = new SqlCommand("UPDATE Quotes SET sent_to_pending_sale = 'True',last_updated_id=@LastUpdatedID,last_updated_date=@LastUpdatedDate,sent_to_pending_sale_by=@SentToPendingSaleBy,sent_to_pending_sale_date=@SentToPendingSaleDate " +
                                                            "WHERE id = @ID", conn);

                SqlCommand cmdUpdatePreCusConPersonDetails = new SqlCommand("UPDATE PrepaidCustomerContactPersonDetails SET order_no = @OrderNo WHERE id = @ID", conn);

                SqlCommand cmdGetCategories = new SqlCommand("SELECT * FROM Category WHERE id <> 8 AND id <>9 ORDER BY category_name", conn);

                SqlCommand cmdInsertUpdateDiscount = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM Discount " +
                                                                          "WHERE customer_id=@CustomerID AND category_id = @CategoryID) " +
                                                                          "INSERT INTO Discount(customer_id,category_id,discount,comment,updated_date,updated_by) VALUES(@CustomerID,@CategoryID,@Discount,@Comment,@UpdatedDate,@UpdatedBy) " +
                                                                          "ELSE " +
                                                                          "UPDATE Discount SET discount=@Discount,updated_date=@UpdatedDate,updated_by=@UpdatedBy " +
                                                                          "WHERE customer_id=@CustomerID AND category_id = @CategoryID AND discount <> @Discount", conn);

                //Get contactpersonId
                SqlCommand cmdGetContactPersonID = new SqlCommand("SELECT id FROM ContactPerson WHERE customer_id = @CustomerID AND contact_person_name = @ContactPersonName", conn);

                SqlCommand cmdQuoteCustomerContact = new SqlCommand("UPDATE Quotes SET customer_id = @CustomerID, contact_person_id = @ContactPersonID WHERE id = @QuoteNo", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {

                    //Fix discount. Makesure to have all the categries
                    //Get the categories
                    List<Category> catList = new List<Category>();
                    cmdGetCategories.Transaction = trans;
                    using (SqlDataReader dr = cmdGetCategories.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Category c = new Category();

                                c.CategoryID = Convert.ToInt16(dr["id"]);
                                c.CategoryName = dr["category_name"].ToString();
                                c.CategoryDescription = dr["category_description"].ToString();
                                catList.Add(c);
                            }
                        }
                    }

                    List<DiscountStructure> disStrList = discountStructureList != null ? new List<DiscountStructure>(discountStructureList) : null;
                    foreach (var item in catList)
                    {
                        var data = disStrList == null ? null : disStrList.SingleOrDefault(x => x.Category.CategoryID == item.CategoryID);
                        if (data == null)
                        {
                            if (disStrList == null)
                            {
                                disStrList = new List<DiscountStructure>();
                            }
                            disStrList.Add(new DiscountStructure() { Category = item, Discount = 0, UpdatedBy = UserData.FirstName + " " + UserData.LastName, UpdatedDate = DateTime.Now });
                        }
                    }

                    ////Prepaid customer not in database
                    //if (newOrderPDFM.Customer.CustomerId == 0)
                    //Add new customer to database
                    if (addCustomerToDatabase)
                    {
                        string contactPersonName = string.Empty;

                        Customer newCustomer = new Customer();
                        newCustomer.CompanyName = prepaidCustomerName;
                        newCustomer.CustomerType = customerType;
                        newCustomer.CompanyAddress = string.Empty;
                        newCustomer.CompanyCity = string.Empty;
                        newCustomer.CompanyState = string.Empty;
                        newCustomer.CompanyCountry = string.Empty;
                        newCustomer.CompanyPostCode = string.Empty;
                        newCustomer.CompanyEmail = string.Empty;
                        newCustomer.CompanyTelephone = string.Empty;
                        newCustomer.CompanyFax = string.Empty;
                        newCustomer.Designation1 = string.Empty;
                        newCustomer.FirstName1 = string.Empty;
                        newCustomer.LastName1 = string.Empty;
                        newCustomer.Telephone1 = string.Empty;
                        newCustomer.Mobile1 = string.Empty;
                        newCustomer.Fax1 = string.Empty;
                        newCustomer.Email1 = string.Empty;
                        newCustomer.Designation2 = string.Empty;
                        newCustomer.FirstName2 = string.Empty;
                        newCustomer.LastName2 = string.Empty;
                        newCustomer.Telephone2 = string.Empty;
                        newCustomer.Mobile2 = string.Empty;
                        newCustomer.Fax2 = string.Empty;
                        newCustomer.Email2 = string.Empty;
                        newCustomer.Designation3 = string.Empty;
                        newCustomer.FirstName3 = string.Empty;
                        newCustomer.LastName3 = string.Empty;
                        newCustomer.Telephone3 = string.Empty;
                        newCustomer.Mobile3 = string.Empty;
                        newCustomer.Fax3 = string.Empty;
                        newCustomer.Email3 = string.Empty;
                        newCustomer.ShipAddress = CheckNull<string>(shippingAddress);
                        newCustomer.ShipCity = CheckNull<string>(shippingCity);
                        newCustomer.ShipState = CheckNull<string>(shippingState);
                        newCustomer.ShipPostCode = CheckNull<string>(shippingPostCode);
                        newCustomer.ShipCountry = CheckNull<string>(shippingCountry);
                        newCustomer.ContactPerson = new List<ContactPerson>();
                        if (newOrderPDFM.ContactPerson.ContactPersonName == "Other")
                        {
                            newCustomer.ContactPerson.Add(new ContactPerson() { ContactPersonName = OtherContactName, Email = contactEmail, Active = true, PhoneNumber1 = OtherContactNamePhone1, PhoneNumber2 = OtherContactNamePhone2 });
                            contactPersonName = OtherContactName;
                        }
                        else
                        {
                            newCustomer.ContactPerson.Add(newOrderPDFM.ContactPerson);
                            contactPersonName = newOrderPDFM.ContactPerson.ContactPersonName;
                        }
                        newCustomer.CreditLimit = 0;
                        newCustomer.CreditRemaining = 0;
                        newCustomer.Debt = 0;
                        newCustomer.Active = true;
                        newCustomer.LastUpdatedBy = UserData.FirstName + " " + UserData.LastName;
                        newCustomer.LastUpdatedDateTime = DateTime.Now;
                        newCustomer.DiscountStructure = new ObservableCollection<DiscountStructure>(disStrList);
                        newCustomer.StopCredit = "false";
                        newCustomer.PrimaryBusiness = SelectedCategory;
                        newCustomer.CustomerNotes = new ObservableCollection<CustomerNote>();
                        newCustomer.ProductsInstalled = new ObservableCollection<ProductType>();

                        AdminNote adminNote = new AdminNote();
                        adminNote = null;

                        customerID = DBAccess.AddNewCustomer(newCustomer, "False", string.Empty, string.Empty, string.Empty, 0, adminNote);
                        if (customerID > 0)
                        {
                            newOrderPDFM.Customer.CustomerId = customerID;
                            newOrderPDFM.Customer.CompanyName = prepaidCustomerName;

                            //Get the contactperson id
                            cmdGetContactPersonID.Transaction = trans;
                            cmdGetContactPersonID.Parameters.AddWithValue("@CustomerID", customerID);
                            cmdGetContactPersonID.Parameters.AddWithValue("@ContactPersonName", contactPersonName);
                            using (SqlDataReader dr = cmdGetContactPersonID.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        contactPersonID = Convert.ToInt16(dr["id"]);
                                    }
                                }
                            }

                            if (prevQuote != null && prevQuote.QuoteNo > 0)
                            {
                                //Update Quote new customer id and contactperson id
                                cmdQuoteCustomerContact.Transaction = trans;
                                cmdQuoteCustomerContact.Parameters.AddWithValue("@QuoteNo", prevQuote.QuoteNo);
                                cmdQuoteCustomerContact.Parameters.AddWithValue("@CustomerID", customerID);
                                cmdQuoteCustomerContact.Parameters.AddWithValue("@ContactPersonID", contactPersonID);
                                int res = cmdQuoteCustomerContact.ExecuteNonQuery();
                            }
                        }
                        else if (customerID == -2)
                        {
                            result = -4;
                        }                      
                    }
                    else
                    {
                        //Prepaid customer not in database
                        if (newOrderPDFM.Customer.CustomerId == 0)
                        {
                            cmdInsertContactPersonNewOrderPDF.Transaction = trans;
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@QuoteNo", 0);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@OrderNo", 0);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactPersonName", string.IsNullOrWhiteSpace(OtherContactName) ? newOrderPDFM.ContactPerson.ContactPersonName : OtherContactName);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactPersonNumber1", string.IsNullOrWhiteSpace(OtherContactName) ? newOrderPDFM.ContactPerson.PhoneNumber1 : OtherContactNamePhone1);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactPersonNumber2", string.IsNullOrWhiteSpace(OtherContactName) ? newOrderPDFM.ContactPerson.PhoneNumber2 : OtherContactNamePhone2);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@ContactEmail", string.IsNullOrWhiteSpace(OtherContactName) ? newOrderPDFM.ContactPerson.Email : contactEmail);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@UpdatedDatetime", DateTime.Now);
                            cmdInsertContactPersonNewOrderPDF.Parameters.AddWithValue("@Active", true);
                            contactPersonID = (Int32)cmdInsertContactPersonNewOrderPDF.ExecuteScalar();
                        }
                        else
                        {
                            //Add/update discounts
                            foreach (var item in disStrList)
                            {                                
                                cmdInsertUpdateDiscount.Transaction = trans;
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@CustomerID", newOrderPDFM.Customer.CustomerId);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@CategoryID", item.Category.CategoryID);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@Comment", "");
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedDate", item.UpdatedDate);
                                cmdInsertUpdateDiscount.Parameters.AddWithValue("@UpdatedBy", item.UpdatedBy);
                                disUpList.Add(cmdInsertUpdateDiscount.ExecuteNonQuery());
                                cmdInsertUpdateDiscount.Parameters.Clear();
                            }

                            if (newOrderPDFM.ContactPerson != null)
                            {
                                //Customer in the database
                                if (newOrderPDFM.ContactPerson.ContactPersonID == -1)
                                {
                                    //First check if the contact person exist in the database
                                    cmdCheckContactPerson.Transaction = trans;
                                    cmdCheckContactPerson.Parameters.AddWithValue("@CustomerID", newOrderPDFM.Customer.CustomerId);
                                    cmdCheckContactPerson.Parameters.AddWithValue("@ContactPersonName", OtherContactName);
                                    contactPersonCount = (int)cmdCheckContactPerson.ExecuteScalar();

                                    if (contactPersonCount == 0)
                                    {
                                        cmdInsertContactPerson.Transaction = trans;
                                        cmdInsertContactPerson.Parameters.AddWithValue("@CustomerID", newOrderPDFM.Customer.CustomerId);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonName", OtherContactName);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonNumber1", OtherContactNamePhone1);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonNumber2", OtherContactNamePhone2);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactEmail", contactEmail);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedDatetime", DateTime.Now);
                                        cmdInsertContactPerson.Parameters.AddWithValue("@Active", true);
                                        contactPersonID = (Int32)cmdInsertContactPerson.ExecuteScalar();
                                    }
                                }
                                else
                                {
                                    //Update Contact person details
                                    cmdUpdateContactPerson.Transaction = trans;
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@ID", newOrderPDFM.ContactPerson.ContactPersonID);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@CustomerID", newOrderPDFM.ContactPerson.CustomerID);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPersonName", newOrderPDFM.ContactPerson.ContactPersonName);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPhoneNumber1", newOrderPDFM.ContactPerson.PhoneNumber1);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPhoneNumber2", newOrderPDFM.ContactPerson.PhoneNumber2);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactEmail", newOrderPDFM.ContactPerson.Email);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@Active", true);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                                    cmdUpdateContactPerson.Parameters.AddWithValue("@UpdatedDateTime", DateTime.Now);
                                    int res = cmdUpdateContactPerson.ExecuteNonQuery();

                                    contactPersonID = newOrderPDFM.ContactPerson.ContactPersonID;
                                    contactPersonID = newOrderPDFM.ContactPerson.ContactPersonID == -2 ? 0 : newOrderPDFM.ContactPerson.ContactPersonID;
                                } 
                            }
                        }                                              
                    }                                       

                    if ((contactPersonCount == 0 && addCustomerToDatabase == false) || (contactPersonCount == 0 && addCustomerToDatabase == true && customerID > 0))
                    {
                        string cusChargeFreight = string.Empty;

                        if (newOrderPDFM.CustomerToChargedFreight == "True")
                        {
                            cusChargeFreight = "True";
                        }
                        else if (newOrderPDFM.CustomerToChargedFreight == "False")
                        {
                            cusChargeFreight = "False";
                        }

                        cmdInsertNewOrderPDF.Transaction = trans;
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@QuoteNo", newOrderPDFM.QuoteNo);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@CustomerID", newOrderPDFM.Customer == null ? 0 : newOrderPDFM.Customer.CustomerId);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ContactPersonID", contactPersonID);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ProjectName", newOrderPDFM.ProjectName);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@NewOrderDate", newOrderPDFM.QuoteDate);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ShipAddress", shippingAddress == null ? "" : shippingAddress);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ShipCity", shippingCity == null ? "" : shippingCity);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ShipState", shippingState == null ? "" : shippingState);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ShipPostCode", shippingPostCode == null ? "" : shippingPostCode);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ShipCountry", shippingCountry == null ? "" : shippingCountry);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@ListPriceTotal", newOrderPDFM.ListPriceTotal);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@DiscountedTotal", newOrderPDFM.DiscountedTotal);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@FreightTotal", newOrderPDFM.FreightTotal);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@Gst", newOrderPDFM.Gst);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@GstEnabled", newOrderPDFM.GSTActive);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@TotalAmount", newOrderPDFM.TotalAmount);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@SiteContactName", newOrderPDFM.SiteContactName == null ? "" : newOrderPDFM.SiteContactName);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@SiteContactPhone", newOrderPDFM.SiteContactPhone == null ? "" : newOrderPDFM.SiteContactPhone);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@DateReqType", newOrderPDFM.DateTypeRequired);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@DateRequired", newOrderPDFM.RequiredDate);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@CourierName", newOrderPDFM.CourierName == null ? "" : newOrderPDFM.CourierName);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@UnloadType", newOrderPDFM.UnloadType == null ? "" : newOrderPDFM.UnloadType);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@FreightType", newOrderPDFM.FreightType == null ? "" : newOrderPDFM.FreightType);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@OrderTruck", newOrderPDFM.OrderTruck == null ? "" : newOrderPDFM.OrderTruck);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@CustomerChargedFreight", cusChargeFreight);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@RepID", newOrderPDFM.User.ID);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@Instructions", newOrderPDFM.Instructions == null ? "" : newOrderPDFM.Instructions);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@InternalComments", newOrderPDFM.InternalComments == null ? "" : newOrderPDFM.InternalComments);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@LastUpdatedBy", newOrderPDFM.LastUpdatedBy.ID);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@LastUpdatedDate", newOrderPDFM.LastUpdatedDate);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@SentToPendingSale", false);
                        cmdInsertNewOrderPDF.Parameters.AddWithValue("@PendingSaleToSale", false);
                        quoteId = (int)cmdInsertNewOrderPDF.ExecuteScalar();

                        if (quoteId > 0)
                        {

                            //Update the order no in PrepaidCustomerContactDetails
                            cmdUpdatePreCusConPersonDetails.Transaction = trans;
                            cmdUpdatePreCusConPersonDetails.Parameters.AddWithValue("@ID", contactPersonID);
                            cmdUpdatePreCusConPersonDetails.Parameters.AddWithValue("@OrderNo", quoteId);
                            int a = cmdUpdatePreCusConPersonDetails.ExecuteNonQuery();

                            foreach (var item in newOrderPDFM.QuoteDetails)
                            {
                                cmdInsertNewOrderPDFDetails.Transaction = trans;
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@NewOrderPDFNo", quoteId);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@Qty", item.Quantity);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@Descriptions", item.QuoteProductDescription);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@ListPrice", item.QuoteUnitPrice);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@Total", item.Total);
                                cmdInsertNewOrderPDFDetails.Parameters.AddWithValue("@Stocked", item.Product.LocationType);
                                qdRList.Add(cmdInsertNewOrderPDFDetails.ExecuteNonQuery());
                                cmdInsertNewOrderPDFDetails.Parameters.Clear();
                            }

                            foreach (var item in newOrderPDFM.FreightDetails)
                            {
                                cmdInsertNewOrderPDFFreightDetails.Transaction = trans;
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@NewOrderPDFNo", quoteId);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@Pallets", item.Pallets);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.ID);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@Description", item.FreightCodeDetails.Description);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@Price", item.FreightCodeDetails.Price);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@Discount", item.Discount);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@Total", item.Total);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@LastUpdatedBy", newOrderPDFM.LastUpdatedBy.ID);
                                cmdInsertNewOrderPDFFreightDetails.Parameters.AddWithValue("@LastUpdatedDate", newOrderPDFM.LastUpdatedDate);
                                qFDList.Add(cmdInsertNewOrderPDFFreightDetails.ExecuteNonQuery());
                                cmdInsertNewOrderPDFFreightDetails.Parameters.Clear();
                            }
                    
                            if (addShippingAddress)
                            {
                                cmdUpdateCustomer.Transaction = trans;
                                cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", newOrderPDFM.Customer.CustomerId);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipAddress", string.IsNullOrWhiteSpace(shippingAddress) ? string.Empty : shippingAddress);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipCity", string.IsNullOrWhiteSpace(shippingCity) ? string.Empty : shippingCity);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipState", string.IsNullOrWhiteSpace(shippingState)  ? string.Empty : shippingState);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipPostcode", string.IsNullOrWhiteSpace(shippingPostCode)  ? string.Empty : shippingPostCode);
                                cmdUpdateCustomer.Parameters.AddWithValue("@ShipCountry", string.IsNullOrWhiteSpace(shippingCountry) ? string.Empty : shippingCountry);
                                cmdUpdateCustomer.ExecuteNonQuery();
                            }                                              


                            if (newOrderPDFM.Customer == null || newOrderPDFM.Customer.CustomerId == 0)
                            {
                                //Prepaid customers
                                cmdInsertPrePaidCustomer.Transaction = trans;
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@QuoteNo", 0);
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@NewOrderPdfNo", quoteId);
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@SalesNo", 0);
                                cmdInsertPrePaidCustomer.Parameters.AddWithValue("@PrePaidCustomerName", prepaidCustomerName);
                                prePaidCusRes = cmdInsertPrePaidCustomer.ExecuteNonQuery();
                            }

                            //Update the quotes table if it is a converted quote
                            if(newOrderPDFM.QuoteNo > 0)
                            {
                                cmdUpdateQuotes.Transaction = trans;
                                cmdUpdateQuotes.Parameters.AddWithValue("@ID", newOrderPDFM.QuoteNo);
                                cmdUpdateQuotes.Parameters.AddWithValue("@LastUpdatedID", UserData.UserID);
                                cmdUpdateQuotes.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                                cmdUpdateQuotes.Parameters.AddWithValue("@SentToPendingSaleBy", UserData.FirstName + " " + UserData.LastName);
                                cmdUpdateQuotes.Parameters.AddWithValue("@SentToPendingSaleDate", DateTime.Now);
                                int res = cmdUpdateQuotes.ExecuteNonQuery();
                            }

                            //Update file name 
                            string prePaidCusName = prepaidCustomerName.Replace("/", "").Replace(@"\", ""); ;
                            string dbCusName = newOrderPDFM.Customer.CompanyName != null ? newOrderPDFM.Customer.CompanyName.Replace("/", "").Replace(@"\", "") : prePaidCusName;

                            string cusName = newOrderPDFM.Customer == null || newOrderPDFM.Customer.CustomerId == 0 ? prePaidCusName.Replace(" ", "") : dbCusName.Replace(" ", "");
                            fileName = rgx.Replace(cusName + "_" + newOrderPDFM.ProjectName.Replace("/", "_").Replace(@"\", "_") + "_" + quoteId,"");
                            fileName = fileName + ".pdf";
                            cmdUpdateFileName.Transaction = trans;
                            cmdUpdateFileName.Parameters.AddWithValue("@QuoteNo", quoteId);
                            cmdUpdateFileName.Parameters.AddWithValue("@FileName", fileName);
                            cmdUpdateFileName.ExecuteNonQuery();
                        }

                        bool qdR = qdRList.Any(x => x > 0);

                        if (quoteId > 0 && qdR)
                        {
                            result = 1;
                        }
                    }
                    else
                    {
                        result = -2;
                        trans.Rollback();
                    }

                    if (result == 1)
                    {
                        trans.Commit();

                        if(disUpList.Any(x=>x > 0))
                        {
                            EmailManager.SendEmailAlertDiscountChange(newOrderPDFM.Customer.CustomerId, disStrList);
                        }
                    }
                    else if(result == -4)
                    {
                        trans.Rollback();
                    }
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return Tuple.Create(quoteId, result, fileName);
        }



        public static ObservableCollection<Quote> GetAllQuotes(int start, int itemCount, out int totalItems, string stringToSearch, int tabSelectedIndex)
        {
            string whereClause = string.Empty;
            string whereTotalClause = string.Empty;
            int end = start + itemCount;
            Int32 totRows = 0;
            Int32 fullCount = 0;
            SqlTransaction trans = null;
            ObservableCollection<Quote> quoteList = new ObservableCollection<Quote>();

            if (start > 0)
            {
                start += 1;
            }

            if (!string.IsNullOrWhiteSpace(stringToSearch))
            {
                whereClause = "row_num >= @Start AND row_num <= @End AND QuoteNo LIKE '%'+@StringToSearch+'%' OR " +
                              "project_name LIKE '%'+@StringToSearch+'%' OR " +
                              "companyname LIKE '%'+@StringToSearch+'%' OR " +
                              "prepaid_customername LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.LastName  LIKE '%'+@StringToSearch+'%'";

            }
            else
            {
                whereClause = "row_num >= @Start AND row_num <= @End";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {

                    SqlCommand cmdGetFullCount = new SqlCommand("SELECT COUNT(*) FROM Quotes " +
                                                                "LEFT JOIN Customers ON Quotes.customer_id = Customers.id " +
                                                                "LEFT JOIN PrePaidCustomers ON Quotes.id = PrePaidCustomers.quote_no " +
                                                                "INNER JOIN Users ON Quotes.rep_id = Users.ID " +
                                                                "WHERE Quotes.sent_to_pending_sale='False' AND pending_sale_to_sale='False'", conn);


                    SqlCommand cmdGetTotalQuotes = new SqlCommand("SELECT COUNT(*) FROM Quotes " +
                                                                    "LEFT JOIN Customers ON Quotes.customer_id = Customers.id " +
                                                                    "LEFT JOIN PrePaidCustomers ON Quotes.id = PrePaidCustomers.quote_no " +
                                                                    "INNER JOIN Users ON Quotes.rep_id = Users.ID " +
                                                                    "WHERE Quotes.sent_to_pending_sale='False' AND pending_sale_to_sale='False' AND " +
                                                                    "(Quotes.id LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "project_name LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "Customers.company_name LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "PrePaidCustomers.prepaid_customer_name LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "Quotes.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "Quotes.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "Quotes.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "Users.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                                                                    "Users.LastName  LIKE '%'+@StringToSearch+'%')", conn);

                    SqlCommand cmdGetQuotes = new SqlCommand("WITH cte_quotes AS ( " +
                                                                    "SELECT ROW_NUMBER() OVER(ORDER BY Quotes.id DESC) row_num, " +
                                                                    "Quotes.id As QuoteNo,Quotes.customer_id,Quotes.contact_person_id,Quotes.project_name,Quotes.quote_date,Quotes.list_price_total,Quotes.discounted_total,Quotes.freight_total,Quotes.gst,Quotes.total_amount,Quotes.rep_id,Users.FirstName,Users.LastName,Quotes.instructions,Quotes.internal_comments,Quotes.last_updated_id,Quotes.last_updated_date,Quotes.time_stamp,Quotes.file_name, " +
                                                                    "ISNULL(Customers.company_name,'') AS companyname,Quotes.ship_address,Quotes.ship_city,Quotes.ship_country,Quotes.ship_postcode,Quotes.ship_state, " +
                                                                    "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customername, " +
                                                                    "ISNULL(Category.id,0) AS Category_id,ISNULL(Category.category_name,'') AS category_name " +
                                                                    "FROM Quotes " +
                                                                    "LEFT JOIN Customers ON Quotes.customer_id = Customers.id " +
                                                                    "LEFT JOIN PrePaidCustomers ON Quotes.id = PrePaidCustomers.quote_no " +
                                                                    "LEFT JOIN Category ON Customers.primary_business = Category.id " +
                                                                    "INNER JOIN Users ON Quotes.rep_id = Users.ID " +
                                                                    "WHERE Quotes.sent_to_pending_sale='False' AND pending_sale_to_sale='False' " +
                                                                    ") SELECT " +
                                                                    "cte_quotes.row_num,cte_quotes.QuoteNo,cte_quotes.customer_id,cte_quotes.contact_person_id,cte_quotes.project_name,cte_quotes.quote_date,cte_quotes.list_price_total,cte_quotes.discounted_total,cte_quotes.freight_total,cte_quotes.gst,cte_quotes.total_amount,cte_quotes.rep_id,Users.FirstName,Users.LastName,cte_quotes.instructions,cte_quotes.internal_comments,cte_quotes.last_updated_id,cte_quotes.last_updated_date,cte_quotes.time_stamp,cte_quotes.file_name, " +
                                                                    "ISNULL(Customers.company_name,'') AS companyname,cte_quotes.ship_address,cte_quotes.ship_city,cte_quotes.ship_country,cte_quotes.ship_postcode,cte_quotes.ship_state, " +
                                                                    "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customername, " +
                                                                    "ISNULL(Category.id,0) AS Category_id,ISNULL(Category.category_name,'') AS category_name " +
                                                                    "FROM cte_quotes " +
                                                                    "LEFT JOIN Customers ON cte_quotes.customer_id = Customers.id " +
                                                                    "LEFT JOIN PrePaidCustomers ON cte_quotes.QuoteNo = PrePaidCustomers.quote_no " +
                                                                    "LEFT JOIN Category ON Customers.primary_business = Category.id " +
                                                                    "INNER JOIN Users ON cte_quotes.rep_id = Users.ID " +
                                                                    "WHERE " + whereClause + " ORDER BY cte_quotes.quote_date desc", conn);

                    if (!string.IsNullOrWhiteSpace(stringToSearch) || tabSelectedIndex == 1)
                    {
                        cmdGetFullCount.Transaction = trans;
                        fullCount = (Int32)cmdGetFullCount.ExecuteScalar();
                        end = fullCount;
                    }

                    cmdGetTotalQuotes.Transaction = trans;
                    cmdGetTotalQuotes.Parameters.AddWithValue("@StringToSearch", stringToSearch);
                    totRows = (Int32)cmdGetTotalQuotes.ExecuteScalar();

                    cmdGetQuotes.Transaction = trans;
                    cmdGetQuotes.Parameters.AddWithValue("@Start", start);
                    cmdGetQuotes.Parameters.AddWithValue("@End", end);
                    cmdGetQuotes.Parameters.AddWithValue("@StringToSearch", stringToSearch);
                    using (SqlDataReader dr = cmdGetQuotes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Quote q = new Quote();
                                q.QuoteNo = Convert.ToInt32(dr["QuoteNo"]);
                                q.ProjectName = dr["project_name"].ToString();
                                q.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]), CompanyName = Convert.ToInt16(dr["customer_id"]) == 0 ? dr["prepaid_customername"].ToString() : dr["companyname"].ToString(), ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipCountry = dr["ship_country"].ToString(), ShipPostCode = dr["ship_postcode"].ToString(), ShipState = dr["ship_state"].ToString(), PrimaryBusiness = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]), CategoryName = dr["category_name"].ToString() } };
                                q.ContactPerson = new ContactPerson() { ContactPersonID = Convert.ToInt16(dr["contact_person_id"]) };
                                q.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                q.ListPriceTotal = CheckNull<decimal>(dr["list_price_total"]);
                                q.DiscountedTotal = CheckNull<decimal>(dr["discounted_total"]);
                                q.FreightTotal = CheckNull<decimal>(dr["freight_total"]);
                                q.Gst = CheckNull<decimal>(dr["gst"]);
                                q.TotalAmount = CheckNull<decimal>(dr["total_amount"]);
                                q.User = new User() { ID = Convert.ToInt16(dr["rep_id"]), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                q.FileName = CheckNull<string>(dr["file_name"]);
                                //q.FilePath = CheckNull<string>(dr["file_path"]);
                                quoteList.Add(q);
                            }
                        }
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            totalItems = totRows;

            return quoteList;
        }


        public static ObservableCollection<NewOrderPDFM> GetAllConvertedQuotes(int start, int itemCount, out int totalItems, string stringToSearch, int tabSelectedIndex, string searchOrderType)
        {
            string whereClause1 = string.Empty;
            string whereTotalClause = string.Empty;
            string whereClause2 = string.Empty;
            string whereClause3 = string.Empty;
            int end = start + itemCount;
            Int32 totRows = 0;
            Int32 fullCount = 0;
            SqlTransaction trans = null;
            ObservableCollection<NewOrderPDFM> quoteList = new ObservableCollection<NewOrderPDFM>();
            

            if (start > 0)
            {
                start += 1;
            }

            if (!string.IsNullOrWhiteSpace(stringToSearch))
            {
                string a = string.Empty;
                string b = string.Empty;

                if (searchOrderType == "All")
                {
                    //whereClause1 = "row_num >= @Start AND row_num <= @End AND QuoteNo LIKE '%'+@StringToSearch+'%' OR " +
                    //              "project_name LIKE '%'+@StringToSearch+'%' OR " +
                    //              "companyname LIKE '%'+@StringToSearch+'%' OR " +
                    //              "prepaid_customername LIKE '%'+@StringToSearch+'%' OR " +
                    //              "cte_quotes.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                    //              "cte_quotes.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                    //              "cte_quotes.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                    //              "cte_quotes.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                    //              "cte_quotes.LastName  LIKE '%'+@StringToSearch+'%'";

                    //whereClause3 = "NewOrderPDF.quote_no LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "project_name LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "Customers.company_name LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "PrePaidCustomers.prepaid_customer_name LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "NewOrderPDF.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "NewOrderPDF.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "NewOrderPDF.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "Users.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                    //                                                  "Users.LastName  LIKE '%'+@StringToSearch+'%'";
                    whereClause1 = string.Empty;
                    whereClause3 = string.Empty;

                }
                else if (searchOrderType == "Converted")
                {
                    whereClause2 = "WHERE NewOrderPDF.quote_no > 0 ";
                    a = " NewOrderPDF.quote_no > 0 AND ";
                    b = " cte_quotes.QuoteNo > 0 AND ";

                }
                else if (searchOrderType == "Direct")
                {
                    whereClause2 = "WHERE NewOrderPDF.quote_no = 0 ";
                    a = " NewOrderPDF.quote_no = 0 AND ";
                    b = " cte_quotes.QuoteNo = 0 AND ";
                }

                whereClause3 = " " + a +" (NewOrderPDF.quote_no LIKE '%'+@StringToSearch+'%' OR " +
                                                            "NewOrderPDF.id LIKE '%'+@StringToSearch+'%' OR " +
                                                            "project_name LIKE '%'+@StringToSearch+'%' OR " +
                                                            "Customers.company_name LIKE '%'+@StringToSearch+'%' OR " +
                                                            "PrePaidCustomers.prepaid_customer_name LIKE '%'+@StringToSearch+'%' OR " +
                                                            "NewOrderPDF.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                                                            "NewOrderPDF.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                                                            "NewOrderPDF.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                                                            "Users.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                                                            "Users.LastName  LIKE '%'+@StringToSearch+'%')";

                whereClause1 = " " + b + " (row_num >= @Start AND row_num <= @End AND QuoteNo LIKE '%'+@StringToSearch+'%' OR " +
                              "SalesOrderNo LIKE '%'+@StringToSearch+'%' OR " +
                              "project_name LIKE '%'+@StringToSearch+'%' OR " +
                              "companyname LIKE '%'+@StringToSearch+'%' OR " +
                              "prepaid_customername LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                              "cte_quotes.LastName  LIKE '%'+@StringToSearch+'%')";

            }
            else
            {
                if (searchOrderType == "All")
                {
                    whereClause2 = string.Empty; whereClause3 = string.Empty;
                    whereClause1 = "row_num >= @Start AND row_num <= @End";
                    whereClause3 = "NewOrderPDF.quote_no LIKE '%'+@StringToSearch+'%' OR " +
                                                                "NewOrderPDF.id LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "project_name LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "Customers.company_name LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "PrePaidCustomers.prepaid_customer_name LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "NewOrderPDF.ship_address LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "NewOrderPDF.ship_city  LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "NewOrderPDF.ship_state  LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "Users.FirstName  LIKE '%'+@StringToSearch+'%' OR " +
                                                                 "Users.LastName  LIKE '%'+@StringToSearch+'%'";
                }
                else if (searchOrderType == "Converted")
                {
                    whereClause2 = "WHERE NewOrderPDF.quote_no > 0 ";
                    whereClause3 = " NewOrderPDF.quote_no > 0 ";
                    whereClause1 = " cte_quotes.QuoteNo > 0 ";
                }
                else if (searchOrderType == "Direct")
                {
                    whereClause2 = "WHERE NewOrderPDF.quote_no = 0 ";
                    whereClause3 = " NewOrderPDF.quote_no = 0 ";
                    whereClause1 = " cte_quotes.QuoteNo = 0 ";
                }
            }            

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {

                    SqlCommand cmdGetFullCount = new SqlCommand("SELECT COUNT(*) FROM NewOrderPDF " +
                                                                "LEFT JOIN Customers ON NewOrderPDF.customer_id = Customers.id " +
                                                                "LEFT JOIN PrePaidCustomers ON NewOrderPDF.id = PrePaidCustomers.new_order_pdf_no " +
                                                                "INNER JOIN Users ON NewOrderPDF.rep_id = Users.ID " + whereClause2, conn);

                    SqlCommand cmdGetTotalQuotes = new SqlCommand("SELECT COUNT(*) FROM NewOrderPDF " +
                                                                  "LEFT JOIN Customers ON NewOrderPDF.customer_id = Customers.id " +
                                                                  "LEFT JOIN PrePaidCustomers ON NewOrderPDF.id = PrePaidCustomers. new_order_pdf_no " +
                                                                  "INNER JOIN Users ON NewOrderPDF.rep_id = Users.ID  " +
                                                                  "WHERE " + whereClause3 + "", conn);

                    SqlCommand cmdGetQuotes = new SqlCommand("WITH cte_quotes AS ( " +
                                                             "SELECT ROW_NUMBER() OVER(ORDER BY NewOrderPDF.id DESC) row_num, " +
                                                             "NewOrderPDF.id AS SalesOrderNo,NewOrderPDF.quote_no As QuoteNo,NewOrderPDF.customer_id,NewOrderPDF.project_name,NewOrderPDF.new_order_date,NewOrderPDF.list_price_total,NewOrderPDF.discounted_total,NewOrderPDF.freight_total,NewOrderPDF.gst,NewOrderPDF.total_amount,NewOrderPDF.rep_id,Users.FirstName,Users.LastName,NewOrderPDF.instructions,NewOrderPDF.internal_comments,NewOrderPDF.last_updated_id,NewOrderPDF.last_updated_date,NewOrderPDF.time_stamp,NewOrderPDF.file_name, " +
                                                             "ISNULL(Customers.company_name,'') AS companyname,NewOrderPDF.ship_address,NewOrderPDF.ship_city,NewOrderPDF.ship_country,NewOrderPDF.ship_postcode,NewOrderPDF.ship_state,NewOrderPDF.courier_name,NewOrderPDF.unload_type, " +
                                                             "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customername " +
                                                             "FROM NewOrderPDF " +
                                                             "LEFT JOIN Customers ON NewOrderPDF.customer_id = Customers.id " +
                                                             "LEFT JOIN PrePaidCustomers ON NewOrderPDF.id = PrePaidCustomers.new_order_pdf_no " +
                                                             "INNER JOIN Users ON NewOrderPDF.rep_id = Users.ID " +
                                                             ") SELECT " +
                                                             "cte_quotes.row_num,cte_quotes.SalesOrderNo,cte_quotes.QuoteNo,cte_quotes.customer_id,cte_quotes.project_name,cte_quotes.new_order_date,cte_quotes.list_price_total,cte_quotes.discounted_total,cte_quotes.freight_total,cte_quotes.gst,cte_quotes.total_amount,cte_quotes.rep_id,Users.FirstName,Users.LastName,cte_quotes.instructions,cte_quotes.internal_comments,cte_quotes.last_updated_id,cte_quotes.last_updated_date,cte_quotes.time_stamp,cte_quotes.file_name, " +
                                                             "ISNULL(Customers.company_name,'') AS companyname,cte_quotes.ship_address,cte_quotes.ship_city,cte_quotes.ship_country,cte_quotes.ship_postcode,cte_quotes.ship_state,cte_quotes.courier_name,cte_quotes.unload_type, " +
                                                             "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customername " +
                                                             "FROM cte_quotes " +
                                                             "LEFT JOIN Customers ON cte_quotes.customer_id = Customers.id " +
                                                             "LEFT JOIN PrePaidCustomers ON cte_quotes.SalesOrderNo = PrePaidCustomers.new_order_pdf_no " +
                                                             "INNER JOIN Users ON cte_quotes.rep_id = Users.ID " +
                                                             "WHERE " + whereClause1 + " ORDER BY cte_quotes.new_order_date desc", conn);

                    if (!string.IsNullOrWhiteSpace(stringToSearch) || tabSelectedIndex == 2)
                    {
                        cmdGetFullCount.Transaction = trans;
                        fullCount = (Int32)cmdGetFullCount.ExecuteScalar();
                        end = fullCount;
                    }

                    cmdGetTotalQuotes.Transaction = trans;
                    cmdGetTotalQuotes.Parameters.AddWithValue("@StringToSearch", stringToSearch);
                    totRows = (Int32)cmdGetTotalQuotes.ExecuteScalar();

                    cmdGetQuotes.Transaction = trans;
                    cmdGetQuotes.Parameters.AddWithValue("@Start", start);
                    cmdGetQuotes.Parameters.AddWithValue("@End", end);
                    cmdGetQuotes.Parameters.AddWithValue("@StringToSearch", stringToSearch);
                    using (SqlDataReader dr = cmdGetQuotes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                NewOrderPDFM q = new NewOrderPDFM();
                                q.ID = Convert.ToInt32(dr["SalesOrderNo"]);
                                q.QuoteNo = Convert.ToInt32(dr["QuoteNo"]);
                                q.QuoteNoStr = Convert.ToInt32(dr["QuoteNo"]) == 0 ? "" : Convert.ToInt32(dr["QuoteNo"]).ToString();
                                q.ProjectName = dr["project_name"].ToString();
                                q.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]), CompanyName = Convert.ToInt16(dr["customer_id"]) == 0 ? dr["prepaid_customername"].ToString() : dr["companyname"].ToString() };
                                q.QuoteDate = Convert.ToDateTime(dr["new_order_date"]);
                                q.ListPriceTotal = CheckNull<decimal>(dr["list_price_total"]);
                                q.DiscountedTotal = CheckNull<decimal>(dr["discounted_total"]);
                                q.FreightTotal = CheckNull<decimal>(dr["freight_total"]);
                                q.Gst = CheckNull<decimal>(dr["gst"]);
                                q.TotalAmount = CheckNull<decimal>(dr["total_amount"]);
                                q.User = new User() { ID = Convert.ToInt16(dr["rep_id"]), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                q.FileName = CheckNull<string>(dr["file_name"]);
                                q.CourierName = CheckNull<string>(dr["courier_name"]);
                                q.UnloadType = CheckNull<string>(dr["unload_type"]);
                                quoteList.Add(q);
                            }
                        }
                    }

                    trans.Commit();

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            totalItems = totRows;

            return quoteList;
        }


        public static bool CheckQuoteProjectName(string ProjectName)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM Quotes WHERE project_name = '" + ProjectName + "'", conn))
                    {
                        cmd.Parameters.AddWithValue("@ProName", ProjectName);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            res = true;
                        }
                        else
                        {
                            res = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static bool CheckNewOrderPDFProjectName(string ProjectName)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM NewOrderPDF WHERE project_name = '" + ProjectName + "'", conn))
                    {
                        cmd.Parameters.AddWithValue("@ProName", ProjectName);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            res = true;
                        }
                        else
                        {
                            res = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static bool CheckQuoteProjectNameAndQuoteNo(string ProjectName, Int32 quoteNo)
        {
            bool res = false;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM Quotes WHERE project_name = @ProName AND id <> @QuoteNO", conn))
                    {
                        cmd.Parameters.AddWithValue("@ProName", ProjectName);
                        cmd.Parameters.AddWithValue("@QuoteNO", quoteNo);

                        int rowCount = (int)cmd.ExecuteScalar();

                        if (rowCount > 0)
                        {
                            res = true;
                        }
                        else
                        {
                            res = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading Login: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return res;
        }

        public static Quote GetQuote(Int32 quoteNo)
        {
            Quote quote = new Quote();
            quote.QuoteDetails = new ObservableCollection<QuoteDetails>();
            quote.FreightDetails = new BindingList<FreightDetails>();
            Int32 contactPersonID = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetQuotes = new SqlCommand("SELECT Quotes.id As QuoteNo,Quotes.customer_id,Quotes.contact_person_id,Quotes.project_name,Quotes.quote_date,Quotes.list_price_total,Quotes.discounted_total,Quotes.freight_total,Quotes.gst,Quotes.gst_enabled,Quotes.total_amount,Quotes.rep_id,Users.FirstName,Users.LastName,Quotes.instructions,Quotes.internal_comments,Quotes.last_updated_id,Quotes.last_updated_date,Quotes.time_stamp,Quotes.file_name, " +
                                                             "ISNULL(Customers.customer_type,'') AS customer_type,ISNULL(Customers.company_name,'') AS company_name, ISNULL(Category.id,0) AS Category_id,ISNULL(Category.category_name,'') AS category_name,Quotes.ship_address,Quotes.ship_city,Quotes.ship_country,Quotes.ship_postcode,Quotes.ship_state, Quotes.courier_name, " +
                                                             "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customer_name " +
                                                             "FROM Quotes " +
                                                             "LEFT JOIN Customers ON Quotes.customer_id = Customers.id " +
                                                             "LEFT JOIN PrePaidCustomers ON Quotes.id = PrePaidCustomers.quote_no " +
                                                             "LEFT JOIN Category ON Customers.primary_business = Category.id " +
                                                             "INNER JOIN Users ON Quotes.rep_id = Users.ID " +
                                                             "WHERE Quotes.id=@QuoteId ", conn);

                    SqlCommand cmdGetQuoteDetails = new SqlCommand("SELECT QuoteDetails.id as quote_details_id,QuoteDetails.quote_no,QuoteDetails.qty,QuoteDetails.product_id,Products.product_code,Products.unit,Products.product_description,Products.category_id,Products.type,Products.size,QuoteDetails.description,QuoteDetails.list_price,QuoteDetails.discount,QuoteDetails.total,QuoteDetails.stocked,QuoteDetails.time_stamp " +
                                                                   "FROM QuoteDetails " +
                                                                   "INNER JOIN Products ON QuoteDetails.product_id = Products.id " +
                                                                   "WHERE QuoteDetails.quote_no=@QuoteNo", conn);

                    SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT QuoteFreightDetails.quote_no,QuoteFreightDetails.freight_code_id,FreightCodes.code,FreightCodes.unit,QuoteFreightDetails.description,QuoteFreightDetails.pallets,QuoteFreightDetails.price,QuoteFreightDetails.total,QuoteFreightDetails.discount " +
                                                                     "FROM QuoteFreightDetails " +
                                                                     "INNER JOIN FreightCodes ON QuoteFreightDetails.freight_code_id = FreightCodes.id " +
                                                                     "WHERE QuoteFreightDetails.quote_no=@QuoteNo", conn);

                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT id,customer_id,contact_person_name, contact_phone_number1,contact_phone_number2, contact_email,active,time_stamp " +
                                                                    "FROM ContactPerson WHERE id=@ContactPersonID", conn);

                    SqlCommand cmdGetPrePaidContactPersonDetails = new SqlCommand("SELECT id,quote_no,contact_person_name, contact_phone_number1,contact_phone_number2, contact_email " +
                                                                                  "FROM PrepaidCustomerContactPersonDetails WHERE quote_no=@QuoteNo", conn);




                    cmdGetQuotes.Parameters.AddWithValue("@QuoteId", quoteNo);
                    using (SqlDataReader dr = cmdGetQuotes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string compName = dr["company_name"].ToString();
                                string type = dr["customer_type"].ToString();
                                if (Convert.ToInt16(dr["customer_id"]) == 0)
                                {
                                    compName = dr["prepaid_customer_name"].ToString();
                                    type = "Prepaid";
                                }

                                quote.QuoteNo = Convert.ToInt32(dr["QuoteNo"]);
                                quote.ProjectName = dr["project_name"].ToString();
                                quote.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]), CompanyName = compName, CustomerType = type, ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipState = dr["ship_state"].ToString(), ShipPostCode = dr["ship_postcode"].ToString(), ShipCountry = dr["ship_country"].ToString(), PrimaryBusiness = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]), CategoryName = dr["category_name"].ToString() } };
                                quote.ContactPerson = new ContactPerson() { ContactPersonID = Convert.ToInt32(dr["contact_person_id"]) };
                                quote.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                quote.ListPriceTotal = CheckNull<decimal>(dr["list_price_total"]);
                                quote.DiscountedTotal = CheckNull<decimal>(dr["discounted_total"]);
                                quote.FreightTotal = CheckNull<decimal>(dr["freight_total"]);
                                quote.Gst = CheckNull<decimal>(dr["gst"]);
                                quote.TotalAmount = CheckNull<decimal>(dr["total_amount"]);
                                quote.User = new User() { ID = Convert.ToInt16(dr["rep_id"]), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                quote.Instructions = dr["instructions"].ToString();
                                quote.InternalComments = dr["internal_comments"].ToString();
                                quote.GSTActive = Convert.ToBoolean(dr["gst_enabled"]);
                                quote.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                quote.FileName = CheckNull<string>(dr["file_name"]);
                                quote.QuoteCourierName = CheckNull<string>(dr["courier_name"]);
                                contactPersonID = Convert.ToInt32(dr["contact_person_id"]);
                            }
                        }
                    }


                    cmdGetQuoteDetails.Parameters.AddWithValue("@QuoteNo", quoteNo);
                    using (SqlDataReader dr = cmdGetQuoteDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                QuoteDetails qd = new QuoteDetails();
                                qd.ID = Convert.ToInt32(dr["quote_details_id"]);
                                qd.QuoteNo = Convert.ToInt32(dr["quote_no"]);
                                qd.Quantity = Convert.ToDecimal(dr["qty"]);
                                qd.QuantityStr = qd.Quantity.ToString("G29");
                                qd.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductUnit = dr["unit"].ToString(), ProductDescription = dr["product_description"].ToString(), UnitPrice = Convert.ToDecimal(dr["list_price"]), Type = dr["type"].ToString(), Size = dr["size"].ToString(), LocationType = CheckNull<string>(dr["stocked"]), Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) } };
                                if (Convert.ToInt16(dr["category_id"]) == 11)
                                {
                                    qd.MaxDiscount = Convert.ToInt16(dr["discount"]);
                                }
                                qd.Discount = Convert.ToInt16(dr["discount"]);
                                qd.Total = Convert.ToDecimal(dr["total"]);
                                qd.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                qd.QuoteUnitPrice = Convert.ToDecimal(dr["list_price"]);
                                qd.QuoteProductDescription = dr["description"].ToString();
                                quote.QuoteDetails.Add(qd);
                            }
                        }
                    }


                    cmdGetFreightDetails.Parameters.AddWithValue("@QuoteNo", quoteNo);
                    using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                FreightDetails fd = new FreightDetails();
                                fd.SalesNo = Convert.ToInt32(dr["quote_no"]);
                                fd.FreightCodeDetails = new FreightCode() { ID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["unit"].ToString(), Price = Convert.ToDecimal(dr["price"]) };
                                fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                fd.Discount = Convert.ToInt16(dr["discount"]);
                                fd.Total = Convert.ToDecimal(dr["total"]);
                                fd.PalletsStr = dr["pallets"].ToString();
                                fd.DummyPrice = Convert.ToDecimal(dr["price"]);
                                quote.FreightDetails.Add(fd);
                            }
                        }
                    }


                    quote.ContactPerson = new ContactPerson();

                    if (quote.Customer.CustomerId > 0)
                    {
                        if (contactPersonID > 0)
                        {
                            cmdGetContactPerson.Parameters.AddWithValue("@ContactPersonID", contactPersonID);
                            using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        quote.ContactPerson.ContactPersonID = Convert.ToInt16(dr["id"]);
                                        quote.ContactPerson.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                        quote.ContactPerson.ContactPersonName = Convert.ToInt16(dr["id"]) == 0 ? "Other" : dr["contact_person_name"].ToString();
                                        //quote.ContactPerson.PhoneNumber1 = String.IsNullOrWhiteSpace(dr["contact_phone_number1"].ToString()) ? "Not Available" : dr["contact_phone_number1"].ToString();
                                        //quote.ContactPerson.PhoneNumber2 = String.IsNullOrWhiteSpace(dr["contact_phone_number2"].ToString()) ? "Not Available" : dr["contact_phone_number2"].ToString();
                                        quote.ContactPerson.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                        quote.ContactPerson.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                        quote.ContactPerson.Email = dr["contact_email"].ToString();
                                        quote.ContactPerson.Active = Convert.ToBoolean(dr["active"]);
                                        quote.ContactPerson.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    }
                                }
                            }
                        }
                        else
                        {
                            quote.ContactPerson.ContactPersonID = -1;
                            quote.ContactPerson.ContactPersonName = "Other";
                            quote.ContactPerson.CustomerID = quote.Customer.CustomerId;
                        }
                    }
                    else
                    {
                        cmdGetPrePaidContactPersonDetails.Parameters.AddWithValue("@QuoteNo", quoteNo);
                        using (SqlDataReader dr = cmdGetPrePaidContactPersonDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    quote.ContactPerson.ContactPersonID = Convert.ToInt16(dr["id"]);
                                    quote.ContactPerson.ContactPersonName = dr["contact_person_name"].ToString();
                                    quote.ContactPerson.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                    quote.ContactPerson.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                    quote.ContactPerson.Email = dr["contact_email"].ToString();
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return quote;
        }


        public static NewOrderPDFM GetNewOrderPDF(Int32 id)
        {
            NewOrderPDFM newOrderPDFM = new NewOrderPDFM();
            newOrderPDFM.QuoteDetails = new ObservableCollection<QuoteDetails>();
            newOrderPDFM.FreightDetails = new BindingList<FreightDetails>();
            Int32 contactPersonID = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetNewOrderPDF = new SqlCommand("SELECT NewOrderPDF.id,NewOrderPDF.quote_no As QuoteNo,NewOrderPDF.customer_id,NewOrderPDF.contact_person_id,NewOrderPDF.project_name,NewOrderPDF.new_order_date,NewOrderPDF.list_price_total,NewOrderPDF.discounted_total,NewOrderPDF.freight_total,NewOrderPDF.gst,NewOrderPDF.gst_enabled,NewOrderPDF.total_amount,NewOrderPDF.rep_id,Users.FirstName,Users.LastName,NewOrderPDF.instructions,NewOrderPDF.internal_comments,NewOrderPDF.last_updated_id,NewOrderPDF.last_updated_date,NewOrderPDF.time_stamp,NewOrderPDF.file_name,NewOrderPDF.order_truck,NewOrderPDF.customer_charged_freight,NewOrderPDF.freight_type,NewOrderPDF.site_contact_name,NewOrderPDF.site_contact_phone, NewOrderPDF.date_required,NewOrderPDF.date_required_type,NewOrderPDF.courier_name,NewOrderPDF.unload_type, " +
                                                                  "ISNULL(Customers.customer_type,'') AS customer_type,ISNULL(Customers.company_name,'') AS company_name,NewOrderPDF.ship_address,NewOrderPDF.ship_city,NewOrderPDF.ship_country,NewOrderPDF.ship_postcode,NewOrderPDF.ship_state, " +
                                                                  "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customer_name, ISNULL(Category.id,0) AS CategoryID, ISNULL(Category.category_name,'') AS category_name " +
                                                                  "FROM NewOrderPDF " +
                                                                  "LEFT JOIN Customers ON NewOrderPDF.customer_id = Customers.id " +
                                                                  "LEFT JOIN Category ON Customers.primary_business  = Category.id " +
                                                                  "LEFT JOIN PrePaidCustomers ON NewOrderPDF.id = PrePaidCustomers.new_order_pdf_no " +
                                                                  "INNER JOIN Users ON NewOrderPDF.rep_id = Users.ID " +
                                                                  "WHERE NewOrderPDF.id=@ID ", conn);

                    SqlCommand cmdGetQuoteDetails = new SqlCommand("SELECT NewOrderPDFDetails.id AS id,NewOrderPDFDetails.new_orderPDF_no,NewOrderPDFDetails.qty,NewOrderPDFDetails.product_id,Products.product_code,Products.unit,Products.product_description,Products.category_id,Products.type,Products.size,NewOrderPDFDetails.description,NewOrderPDFDetails.list_price,NewOrderPDFDetails.discount,NewOrderPDFDetails.total ,NewOrderPDFDetails.stocked,NewOrderPDFDetails.time_stamp " +
                                                                   "FROM NewOrderPDFDetails " +
                                                                   "INNER JOIN Products ON NewOrderPDFDetails.product_id = Products.id " +
                                                                   "WHERE NewOrderPDFDetails.new_orderPDF_no=@ID", conn);

                    SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT NewOrderPDFFreightDetails.new_orderPDF_no,NewOrderPDFFreightDetails.freight_code_id,FreightCodes.code,FreightCodes.unit,NewOrderPDFFreightDetails.description,NewOrderPDFFreightDetails.pallets,NewOrderPDFFreightDetails.price,NewOrderPDFFreightDetails.total,NewOrderPDFFreightDetails.discount " +
                                                                     "FROM NewOrderPDFFreightDetails " +
                                                                     "INNER JOIN FreightCodes ON NewOrderPDFFreightDetails.freight_code_id = FreightCodes.id " +
                                                                     "WHERE NewOrderPDFFreightDetails.new_orderPDF_no=@ID", conn);
                      
                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT id,customer_id,contact_person_name, contact_phone_number1,contact_phone_number2, contact_email,active,time_stamp " +
                                                                    "FROM ContactPerson WHERE id=@ContactPersonID", conn);

                    SqlCommand cmdGetPrePaidContactPerson = new SqlCommand("SELECT id,quote_no,order_no,contact_person_name,contact_phone_number1,contact_phone_number2, contact_email,active,time_stamp " +
                                                                           "FROM PrepaidCustomerContactPersonDetails WHERE order_no=@OrderNo", conn);


                    

                    
                    cmdGetNewOrderPDF.Parameters.AddWithValue("@ID", id);
                    using (SqlDataReader dr = cmdGetNewOrderPDF.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                string compName = dr["company_name"].ToString();
                                string type = dr["customer_type"].ToString();
                                if (Convert.ToInt16(dr["customer_id"]) == 0)
                                {
                                    compName = dr["prepaid_customer_name"].ToString();
                                    type = "Prepaid";
                                }
                                newOrderPDFM.ID = Convert.ToInt32(dr["id"]);
                                newOrderPDFM.QuoteNo = Convert.ToInt32(dr["QuoteNo"]);
                                newOrderPDFM.QuoteNoStr = dr["QuoteNo"].ToString();
                                newOrderPDFM.ProjectName = dr["project_name"].ToString();
                                newOrderPDFM.RequiredDate = CheckNull<DateTime>(dr["date_required"]);
                                newOrderPDFM.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]), CompanyName = compName, CustomerType = type, ShipAddress = dr["ship_address"].ToString(), ShipCity = dr["ship_city"].ToString(), ShipState = dr["ship_state"].ToString(), ShipPostCode = dr["ship_postcode"].ToString(), ShipCountry = dr["ship_country"].ToString(), PrimaryBusiness = new Category() { CategoryID = Convert.ToInt16(dr["CategoryID"]), CategoryName = dr["category_name"].ToString() } };
                                newOrderPDFM.ContactPerson = new ContactPerson() { ContactPersonID = Convert.ToInt32(dr["contact_person_id"]) };
                                newOrderPDFM.QuoteDate = Convert.ToDateTime(dr["new_order_date"]);
                                newOrderPDFM.ListPriceTotal = CheckNull<decimal>(dr["list_price_total"]);
                                newOrderPDFM.DiscountedTotal = CheckNull<decimal>(dr["discounted_total"]);
                                newOrderPDFM.FreightTotal = CheckNull<decimal>(dr["freight_total"]);
                                newOrderPDFM.Gst = CheckNull<decimal>(dr["gst"]);
                                newOrderPDFM.TotalAmount = CheckNull<decimal>(dr["total_amount"]);
                                newOrderPDFM.User = new User() { ID = Convert.ToInt16(dr["rep_id"]), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                newOrderPDFM.Instructions = dr["instructions"].ToString();
                                newOrderPDFM.InternalComments = dr["internal_comments"].ToString();
                                newOrderPDFM.GSTActive = Convert.ToBoolean(dr["gst_enabled"]);
                                newOrderPDFM.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                newOrderPDFM.FileName = CheckNull<string>(dr["file_name"]);
                                newOrderPDFM.OrderTruck = dr["order_truck"].ToString();
                                newOrderPDFM.CustomerToChargedFreight = CheckNull<string>(dr["customer_charged_freight"]);
                                newOrderPDFM.FreightType = dr["freight_type"].ToString();
                                newOrderPDFM.SiteContactName = dr["site_contact_name"].ToString();
                                newOrderPDFM.SiteContactPhone = dr["site_contact_phone"].ToString();
                                newOrderPDFM.DateTypeRequired = dr["date_required_type"].ToString();
                                newOrderPDFM.CourierName = dr["courier_name"].ToString();
                                newOrderPDFM.UnloadType = dr["unload_type"].ToString();
                                contactPersonID = Convert.ToInt32(dr["contact_person_id"]);
                            }
                        }
                    }

                    cmdGetQuoteDetails.Parameters.AddWithValue("@ID", id);
                    using (SqlDataReader dr = cmdGetQuoteDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {                                
                                QuoteDetails qd = new QuoteDetails();
                                qd.ID = Convert.ToInt32(dr["id"]);
                                qd.QuoteNo = Convert.ToInt32(dr["new_orderPDF_no"]);
                                qd.Quantity = Convert.ToDecimal(dr["qty"]);
                                qd.QuantityStr = qd.Quantity.ToString("G29");
                                qd.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), ProductCode = dr["product_code"].ToString(), ProductUnit = dr["unit"].ToString(), ProductDescription = dr["product_description"].ToString(), UnitPrice = Convert.ToDecimal(dr["list_price"]), Type = dr["type"].ToString(), Size = dr["size"].ToString(), LocationType = CheckNull<string>(dr["stocked"]), Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) } };
                                if(Convert.ToInt16(dr["category_id"]) == 11)
                                {
                                    qd.MaxDiscount = Convert.ToInt16(dr["discount"]);
                                }
                                qd.Discount = Convert.ToInt16(dr["discount"]);
                                qd.Total = Convert.ToDecimal(dr["total"]);
                                qd.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                qd.QuoteUnitPrice = Convert.ToDecimal(dr["list_price"]);
                                qd.QuoteProductDescription = dr["description"].ToString();
                                newOrderPDFM.QuoteDetails.Add(qd);
                            }
                        }
                    }

                    cmdGetFreightDetails.Parameters.AddWithValue("@ID", id);
                    using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                FreightDetails fd = new FreightDetails();
                                fd.SalesNo = Convert.ToInt32(dr["new_orderPDF_no"]);
                                fd.FreightCodeDetails = new FreightCode() { ID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["unit"].ToString(), Price = Convert.ToDecimal(dr["price"]) };
                                fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                fd.Discount = Convert.ToInt16(dr["discount"]);
                                fd.Total = Convert.ToDecimal(dr["total"]);
                                fd.PalletsStr = dr["pallets"].ToString();
                                fd.DummyPrice = Convert.ToDecimal(dr["price"]);
                                newOrderPDFM.FreightDetails.Add(fd);
                            }
                        }
                    }

                    newOrderPDFM.ContactPerson = new ContactPerson();
                    if (newOrderPDFM.Customer.CustomerId > 0)
                    {
                        if (contactPersonID > 0)
                        {
                            cmdGetContactPerson.Parameters.AddWithValue("@ContactPersonID", contactPersonID);
                            using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        newOrderPDFM.ContactPerson.ContactPersonID = Convert.ToInt16(dr["id"]);
                                        newOrderPDFM.ContactPerson.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                        newOrderPDFM.ContactPerson.ContactPersonName = Convert.ToInt16(dr["id"]) == 0 ? "No Contact" : dr["contact_person_name"].ToString();
                                        newOrderPDFM.ContactPerson.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                        newOrderPDFM.ContactPerson.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                        newOrderPDFM.ContactPerson.Email = dr["contact_email"].ToString();
                                        newOrderPDFM.ContactPerson.Active = Convert.ToBoolean(dr["active"]);
                                        newOrderPDFM.ContactPerson.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    }
                                }
                            }
                        }
                        else
                        {
                            newOrderPDFM.ContactPerson.ContactPersonID = 0;
                            newOrderPDFM.ContactPerson.ContactPersonName = "Other";
                            newOrderPDFM.ContactPerson.CustomerID = newOrderPDFM.Customer.CustomerId;
                        }
                    }
                    else
                    {
                        cmdGetPrePaidContactPerson.Parameters.AddWithValue("@OrderNo", id);
                        using (SqlDataReader dr = cmdGetPrePaidContactPerson.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    newOrderPDFM.ContactPerson.ContactPersonID = Convert.ToInt16(dr["id"]);
                                    newOrderPDFM.ContactPerson.ContactPersonName = dr["contact_person_name"].ToString();
                                    newOrderPDFM.ContactPerson.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                    newOrderPDFM.ContactPerson.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                    newOrderPDFM.ContactPerson.Email = dr["contact_email"].ToString();
                                    newOrderPDFM.ContactPerson.Active = Convert.ToBoolean(dr["active"]);
                                    newOrderPDFM.ContactPerson.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return newOrderPDFM;
        }

        public static int UpdateQuote(Quote quote, bool addShippingAddress)
        {
            int updateQuoteRes = 0;
            int shippAddressRes = 0;
            int result = 0;
            Quote quoteTimeStamp = new Quote();
            ObservableCollection<QuoteDetails> oldQuoteDetails = new ObservableCollection<QuoteDetails>();
            List<FreightDetails> oldFreighDetails = new List<FreightDetails>();
            List<int> qdRList = new List<int>();
            List<int> qdDeleteRList = new List<int>();
            List<int> qFDList = new List<int>();
            List<int> fdDeleteRList = new List<int>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                //Get quotes TimeStamp
                SqlCommand cmdGetQuoteTimeStamp = new SqlCommand("SELECT * FROM Quotes " +
                                                                 "WHERE id=@QuoteNo", conn);

                //Update Quotes
                SqlCommand cmdUpdateQuote = new SqlCommand("UPDATE Quotes SET project_name=@ProjectName,quote_date=@QuoteDate,ship_address=@ShipAddress,ship_city=@ShipCity,ship_state=@ShipState,ship_postcode=@ShipPostCode,ship_country=@ShipCountry, " +
                                                           "list_price_total=@ListPriceTotal,discounted_total=@DiscountedTotal,freight_total=@FreightTotal,gst=@Gst,gst_enabled=@GstEnabled,total_amount=@TotalAmount,instructions=@Instructions,internal_comments=@InternalComments " +
                                                           "WHERE id=@QuoteNo AND (project_name <> @ProjectName OR quote_date <> @QuoteDate OR ship_address <> @ShipAddress OR ship_city <> @ShipCity OR "+
                                                           "ship_state <> @ShipState OR ship_postcode <> @ShipPostCode OR ship_country <> @ShipCountry OR list_price_total <> @ListPriceTotal OR "+
                                                           "discounted_total <> @DiscountedTotal OR freight_total <> @FreightTotal OR gst <> @Gst OR gst_enabled <> @GstEnabled OR total_amount <> @TotalAmount OR " +
                                                           "instructions <> @Instructions OR internal_comments <> @InternalComments)", conn);
                //Get Quote Details
                SqlCommand cmdGetQuoteDetails = new SqlCommand("SELECT * FROM QuoteDetails " +
                                                               "WHERE quote_no=@QuoteNo", conn);
                
                //Insert/Update QuoteDetails
                SqlCommand cmdInsertUpdateQuoteDetails = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM QuoteDetails " +
                                                                        "WHERE quote_no=@QuoteNo AND product_id=@ProductID) " +
                                                                        "INSERT INTO QuoteDetails(quote_no,qty,product_id,list_price,discount,total) VALUES(@QuoteNo,@Qty,@ProductID,@ListPrice,@Discount,@total) " +
                                                                        "ELSE " +
                                                                        "UPDATE QuoteDetails SET qty=@Qty,product_id=@ProductID,list_price=@ListPrice,discount=@Discount,total=@Total " +
                                                                        "WHERE quote_no=@QuoteNo AND product_id=@ProductID AND (qty <> @Qty OR list_price <> @ListPrice OR discount <> @Discount OR total <> @Total)", conn);

                //Delete QuoteDetails
                SqlCommand cmdDeleteQuoteDetails = new SqlCommand("DELETE FROM QuoteDetails " +
                                                                  "WHERE quote_no=@QuoteNo AND product_id=@ProductID", conn);
                                
                //Get FreightDetails
                SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT * FROM QuoteFreightDetails " +
                                                                 "WHERE quote_no=@QuoteNo", conn);

                //Update FreightDetails
                SqlCommand cmdInsUpdateQuoteFreightDetails = new SqlCommand("IF NOT EXISTS(SELECT 1 FROM QuoteFreightDetails " +
                                                                            "WHERE quote_no=@QuoteNo AND freight_code_id=@FreightCodeID) " +
                                                                            "INSERT INTO QuoteFreightDetails(quote_no,pallets,freight_code_id,description,price,total,last_updated_by,last_updated_date) " +
                                                                            "VALUES(@QuoteNo,@Pallets,@FreightCodeID,@Description,@Price,@Total,@LastUpdatedBy,@LastUpdatedDate) " +
                                                                            "ELSE " +
                                                                            "UPDATE QuoteFreightDetails SET pallets=@Pallets,freight_code_id=@FreightCodeID,description=@Description,price=@Price,total=@Total,last_updated_by=@LastUpdatedBy,last_updated_date=@LastUpdatedDate " +
                                                                            "WHERE quote_no=@QuoteNo AND freight_code_id=@FreightCodeID AND (pallets <> @Pallets OR freight_code_id <> @FreightCodeID OR description <> @Description OR price <> @Price OR total <> @Total)", conn);

                //Delete FreightDetails
                SqlCommand cmdDeleteFreightDetails = new SqlCommand("DELETE FROM QuoteFreightDetails " +
                                                                    "WHERE quote_no=@QuoteNo AND freight_code_id=@FreightCodeID", conn);

                SqlCommand cmdUpdateCustomer = new SqlCommand("UPDATE Customers SET ship_address= @ShipAddress,ship_city=@ShipCity,ship_state=@ShipState,ship_postcode=@ShipPostcode,ship_country=@ShipCountry,last_updated_by=@LastUpdatedBy,last_updated_datetime=@LastUpdatedDatetime " +
                                                              "WHERE id = @CustomerID", conn);

                SqlCommand cmdUpdateQuoteLastUpdated = new SqlCommand("UPDATE Quotes SET last_updated_id=@LastUpdatedID,last_updated_date=@LastUpdatedDate " +
                                                                      "WHERE id=@QuoteNo", conn);
                
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    //Get Quotes TimeStamp
                    cmdGetQuoteTimeStamp.Transaction = trans;
                    cmdGetQuoteTimeStamp.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                    using (SqlDataReader dr = cmdGetQuoteTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                quoteTimeStamp.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                            }
                        }
                    }

                    if (quote.TimeStamp == quoteTimeStamp.TimeStamp)
                    {

                        cmdUpdateQuote.Transaction = trans;
                        cmdUpdateQuote.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                        cmdUpdateQuote.Parameters.AddWithValue("@ProjectName", quote.ProjectName);
                        cmdUpdateQuote.Parameters.AddWithValue("@QuoteDate", quote.QuoteDate);
                        cmdUpdateQuote.Parameters.AddWithValue("@ShipAddress", quote.Customer.ShipAddress);
                        cmdUpdateQuote.Parameters.AddWithValue("@ShipCity", quote.Customer.ShipCity);
                        cmdUpdateQuote.Parameters.AddWithValue("@ShipState", quote.Customer.ShipState);
                        cmdUpdateQuote.Parameters.AddWithValue("@ShipPostCode", quote.Customer.ShipPostCode);
                        cmdUpdateQuote.Parameters.AddWithValue("@ShipCountry", quote.Customer.ShipCountry);
                        cmdUpdateQuote.Parameters.AddWithValue("@ListPriceTotal", quote.ListPriceTotal);
                        cmdUpdateQuote.Parameters.AddWithValue("@DiscountedTotal", quote.DiscountedTotal);
                        cmdUpdateQuote.Parameters.AddWithValue("@FreightTotal", quote.FreightTotal);
                        cmdUpdateQuote.Parameters.AddWithValue("@Gst", quote.Gst);
                        cmdUpdateQuote.Parameters.AddWithValue("@GstEnabled", quote.GSTActive);
                        cmdUpdateQuote.Parameters.AddWithValue("@TotalAmount", quote.TotalAmount);
                        cmdUpdateQuote.Parameters.AddWithValue("@Instructions", quote.Instructions == null ? "" : quote.Instructions);
                        cmdUpdateQuote.Parameters.AddWithValue("@InternalComments", quote.InternalComments == null ? "" : quote.InternalComments);
                        updateQuoteRes = cmdUpdateQuote.ExecuteNonQuery();

                        cmdGetQuoteDetails.Transaction = trans;
                        cmdGetQuoteDetails.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                        using (SqlDataReader dr = cmdGetQuoteDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    QuoteDetails qd = new QuoteDetails();
                                    qd.QuoteNo = Convert.ToInt32(dr["quote_no"]);
                                    qd.Quantity = Convert.ToDecimal(dr["qty"]);
                                    qd.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]), UnitPrice = Convert.ToDecimal(dr["list_price"]) };
                                    qd.Discount = Convert.ToInt16(dr["discount"]);
                                    qd.Total = Convert.ToDecimal(dr["total"]);
                                    oldQuoteDetails.Add(qd);
                                }
                            }
                        }

                        //Compare two collection to see the difference
                        List<QuoteDetails> tempQD = new List<QuoteDetails>();
                        foreach (var item in oldQuoteDetails)
                        {
                            var x = quote.QuoteDetails.SingleOrDefault(y => y.Product.ProductID == item.Product.ProductID);
                            if (x == null)
                            {
                                tempQD.Add(item);
                            }
                        }

                        foreach (var item in quote.QuoteDetails)
                        {
                            cmdInsertUpdateQuoteDetails.Transaction = trans;
                            cmdInsertUpdateQuoteDetails.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                            cmdInsertUpdateQuoteDetails.Parameters.AddWithValue("@Qty", item.Quantity);
                            cmdInsertUpdateQuoteDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            cmdInsertUpdateQuoteDetails.Parameters.AddWithValue("@ListPrice", item.Product.UnitPrice);
                            cmdInsertUpdateQuoteDetails.Parameters.AddWithValue("@Discount", item.Discount);
                            cmdInsertUpdateQuoteDetails.Parameters.AddWithValue("@Total", item.Total);
                            qdRList.Add(cmdInsertUpdateQuoteDetails.ExecuteNonQuery());
                            cmdInsertUpdateQuoteDetails.Parameters.Clear();
                        }

                        foreach (var item in tempQD)
                        {
                            cmdDeleteQuoteDetails.Transaction = trans;
                            cmdDeleteQuoteDetails.Parameters.AddWithValue("@QuoteNo", item.QuoteNo);
                            cmdDeleteQuoteDetails.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            qdDeleteRList.Add(cmdDeleteQuoteDetails.ExecuteNonQuery());
                        }

                        cmdGetFreightDetails.Transaction = trans;
                        cmdGetFreightDetails.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                        using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    FreightDetails fd = new FreightDetails();
                                    fd.SalesNo = Convert.ToInt32(dr["quote_no"]);
                                    fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                    fd.FreightCodeDetails = new FreightCode() { FreightCodeID = Convert.ToInt16(dr["freight_code_id"]), Description = dr["description"].ToString(), Price = Convert.ToDecimal(dr["price"]) };
                                    fd.Total = Convert.ToDecimal(dr["total"]);
                                    oldFreighDetails.Add(fd);
                                }
                            }
                        }


                        //Compare two collection to see the difference
                        List<FreightDetails> tempFD = new List<FreightDetails>();
                        foreach (var item in oldFreighDetails)
                        {
                            var x = quote.FreightDetails.SingleOrDefault(y => y.FreightCodeDetails.FreightCodeID == item.FreightCodeDetails.FreightCodeID);
                            if (x == null)
                            {
                                tempFD.Add(item);
                            }
                        }

                        foreach (var item in quote.FreightDetails)
                        {
                            cmdInsUpdateQuoteFreightDetails.Transaction = trans;
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@Pallets", item.Pallets);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.ID);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@Description", item.FreightCodeDetails.Description);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@Price", item.FreightCodeDetails.Price);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@Total", item.Total);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@LastUpdatedBy", UserData.UserID);
                            cmdInsUpdateQuoteFreightDetails.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                            qFDList.Add(cmdInsUpdateQuoteFreightDetails.ExecuteNonQuery());
                            cmdInsUpdateQuoteFreightDetails.Parameters.Clear();
                        }

                        //Delete FreightDetails
                        foreach (var item in tempFD)
                        {
                            cmdDeleteFreightDetails.Transaction = trans;
                            cmdDeleteFreightDetails.Parameters.AddWithValue("@QuoteNo", item.SalesNo);
                            cmdDeleteFreightDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
                            fdDeleteRList.Add(cmdDeleteFreightDetails.ExecuteNonQuery());
                        }

                        if (addShippingAddress)
                        {
                            cmdUpdateCustomer.Transaction = trans;
                            cmdUpdateCustomer.Parameters.AddWithValue("@CustomerID", quote.Customer.CustomerId);
                            cmdUpdateCustomer.Parameters.AddWithValue("@ShipAddress", quote.Customer.ShipAddress);
                            cmdUpdateCustomer.Parameters.AddWithValue("@ShipCity", quote.Customer.ShipCity);
                            cmdUpdateCustomer.Parameters.AddWithValue("@ShipState", quote.Customer.ShipState);
                            cmdUpdateCustomer.Parameters.AddWithValue("@ShipPostcode", quote.Customer.ShipPostCode);
                            cmdUpdateCustomer.Parameters.AddWithValue("@ShipCountry", quote.Customer.ShipCountry);
                            cmdUpdateCustomer.Parameters.AddWithValue("@LastUpdatedBy", UserData.UserName);
                            cmdUpdateCustomer.Parameters.AddWithValue("@LastUpdatedDatetime", DateTime.Now);
                            shippAddressRes = cmdUpdateCustomer.ExecuteNonQuery();
                        }


                        bool qdR = qdRList.Any(x => x > 0);
                        bool qdDR = qdDeleteRList.Any(x => x > 0);
                        bool qFD = qFDList.Any(x => x > 0);
                        bool qFDR = fdDeleteRList.Any(x => x > 0);

                        if (updateQuoteRes > 0 || shippAddressRes > 0 || qdR || qdDR || qFD || qFDR)
                        {
                            cmdUpdateQuoteLastUpdated.Transaction = trans;
                            cmdUpdateQuoteLastUpdated.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                            cmdUpdateQuoteLastUpdated.Parameters.AddWithValue("@LastUpdatedID", quote.LastUpdatedBy.ID);
                            cmdUpdateQuoteLastUpdated.Parameters.AddWithValue("@LastUpdatedDate", quote.LastUpdatedDate);
                            cmdUpdateQuoteLastUpdated.ExecuteNonQuery();

                            result = 1;
                        }
                        else
                        {
                            result = -1;
                        }
                    }
                    else
                    {
                        result = -2;
                    }

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    result = 0;
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return result;
        }

        public static ObservableCollection<CustomerPending> GetCustomerPendingList()
        {
            ObservableCollection<CustomerPending> customerPendingList = new ObservableCollection<CustomerPending>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetCustomerPending = new SqlCommand("SELECT CustomerPending.id,CustomerPending.primary_business,Category.category_name,CustomerPending.company_name,CustomerPending.company_address,CustomerPending.company_address,CustomerPending.company_city,CustomerPending.company_state,CustomerPending.company_postcode,CustomerPending.company_country,CustomerPending.company_email,CustomerPending.company_telephone,CustomerPending.company_fax,CustomerPending.first_name1,CustomerPending.last_name1,CustomerPending.telephone1,CustomerPending.mobile1,CustomerPending.fax1,CustomerPending.email1,CustomerPending.first_name2,CustomerPending.last_name2,CustomerPending.telephone2,CustomerPending.mobile2,CustomerPending.fax2,CustomerPending.email2,CustomerPending.first_name3,CustomerPending.last_name3,CustomerPending.telephone3,CustomerPending.mobile3,CustomerPending.fax3,CustomerPending.email3,CustomerPending.ship_address,CustomerPending.ship_city,CustomerPending.ship_state,CustomerPending.ship_postcode,CustomerPending.ship_country,CustomerPending.discount_str,CustomerPending.product_type_str,CustomerPending.customer_note_str,CustomerPending.last_updated_by,CustomerPending.last_updated_datetime,CustomerPending.transfered,CustomerPending.transfered_date_time,CustomerPending.transfered_by,CustomerPending.time_stamp " +
                                                                             "FROM CustomerPending " +
                                                                             "INNER JOIN Category ON CustomerPending.primary_business = Category.id " +
                                                                             "WHERE CustomerPending.transfered ='False'", conn))
                    {
                        using (SqlDataReader dr = cmdGetCustomerPending.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    CustomerPending cp = new CustomerPending();
                                    cp.CustomerId = Convert.ToInt32(dr["id"]);
                                    cp.CompanyName = dr["company_name"].ToString();
                                    cp.PrimaryBusiness = new Category() { CategoryID = Convert.ToInt16(dr["primary_business"]), CategoryName = dr["category_name"].ToString() };
                                    cp.CompanyAddress = dr["company_address"].ToString();
                                    cp.CompanyCity = dr["company_city"].ToString();
                                    cp.CompanyState = dr["company_state"].ToString();
                                    cp.CompanyPostCode = dr["company_postcode"].ToString();
                                    cp.CompanyCountry = dr["company_country"].ToString();
                                    cp.CompanyEmail = dr["company_email"].ToString();
                                    cp.CompanyTelephone = dr["company_telephone"].ToString();
                                    cp.CompanyFax = dr["company_fax"].ToString();
                                    cp.FirstName1 = dr["first_name1"].ToString();
                                    cp.LastName1 = dr["last_name1"].ToString();
                                    cp.Telephone1 = dr["telephone1"].ToString();
                                    cp.Mobile1 = dr["mobile1"].ToString();
                                    cp.Email1 = dr["email1"].ToString();
                                    cp.Fax1 = dr["fax1"].ToString();
                                    cp.FirstName2 = dr["first_name2"].ToString();
                                    cp.LastName2 = dr["last_name2"].ToString();
                                    cp.Telephone2 = dr["telephone2"].ToString();
                                    cp.Mobile2 = dr["mobile2"].ToString();
                                    cp.Email2 = dr["email2"].ToString();
                                    cp.Fax2 = dr["fax2"].ToString();
                                    cp.FirstName3 = dr["first_name3"].ToString();
                                    cp.LastName3 = dr["last_name3"].ToString();
                                    cp.Telephone3 = dr["telephone3"].ToString();
                                    cp.Mobile3 = dr["mobile3"].ToString();
                                    cp.Email3 = dr["email3"].ToString();
                                    cp.Fax3 = dr["fax3"].ToString();
                                    cp.ShipAddress = dr["ship_address"].ToString();
                                    cp.ShipCity = dr["ship_city"].ToString();
                                    cp.ShipState = dr["ship_state"].ToString();
                                    cp.ShipPostCode = dr["ship_postcode"].ToString();
                                    cp.ShipCountry = dr["ship_country"].ToString();

                                    cp.DiscountStr = dr["discount_str"].ToString();
                                    cp.ProductTypeStr = dr["product_type_str"].ToString();
                                    cp.CustomerNoteStr = dr["customer_note_str"].ToString();
                                    cp.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    cp.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    cp.IsTransfered = Convert.ToBoolean(dr["transfered"]);
                                    cp.TransderedDateTime = CheckNull<DateTime>(dr["transfered_date_time"]);
                                    cp.TransferedBy = dr["transfered_by"].ToString();
                                    cp.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    customerPendingList.Add(cp);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return customerPendingList;
        }

        public static int DeletePendingCustomer(int id)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                
                SqlCommand cmdDeletePC = new SqlCommand("DELETE FROM CustomerPending " +
                                                        "WHERE id=@ID", conn);
                conn.Open();

                try
                {

                    cmdDeletePC.Parameters.AddWithValue("@ID", id);
                    result=cmdDeletePC.ExecuteNonQuery();
                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int DeleteQuote(int id)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdDeleteQuote = new SqlCommand("DELETE FROM Quotes WHERE id=@ID", conn);
                SqlCommand cmdDeleteQuoteDetails = new SqlCommand("DELETE FROM QuoteDetails WHERE quote_no=@ID", conn);
                SqlCommand cmdDeleteQuoteFreightDetails = new SqlCommand("DELETE FROM QuoteFreightDetails WHERE quote_no=@ID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    cmdDeleteQuote.Transaction = trans;
                    cmdDeleteQuote.Parameters.AddWithValue("@ID", id);
                    int q = cmdDeleteQuote.ExecuteNonQuery();

                    cmdDeleteQuoteDetails.Transaction = trans;
                    cmdDeleteQuoteDetails.Parameters.AddWithValue("@ID", id);
                    int qd = cmdDeleteQuoteDetails.ExecuteNonQuery();

                    cmdDeleteQuoteFreightDetails.Transaction = trans;
                    cmdDeleteQuoteFreightDetails.Parameters.AddWithValue("@ID", id);
                    int qfd = cmdDeleteQuoteFreightDetails.ExecuteNonQuery();

                    if(q > 0 && qd > 0 && qfd > 0)
                    {
                        trans.Commit();
                        result = 1;
                    }
                    else
                    {
                        trans.Rollback();
                    }                    

                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Deleting quote" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }



        public static ObservableCollection<OnlineOrderItem> GetOnlineOrderItemsByOrderNo(Int32 orderNo)
        {
            ObservableCollection<OnlineOrderItem> onlineOrderItemList = new ObservableCollection<OnlineOrderItem>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetOnlineOrderItem = new SqlCommand("SELECT * FROM OnlineOrderItems " +
                                                                             "WHERE order_no =@OrderNo", conn))
                    {
                        cmdGetOnlineOrderItem.Parameters.AddWithValue("@OrderNo", orderNo);
                        using (SqlDataReader dr = cmdGetOnlineOrderItem.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    OnlineOrderItem oi = new OnlineOrderItem();
                                    oi.OrderID = Convert.ToInt16(dr["order_no"]);
                                    oi.BrandID = Convert.ToInt16(dr["brand_id"]);
                                    oi.BrandName = dr["brand_name"].ToString();
                                    oi.ProductCode = dr["product_code"].ToString();
                                    oi.UnitPrice = Convert.ToDouble(dr["unit_price"]);
                                    oi.PackPrice = Convert.ToDouble(dr["pack_price"]);
                                    oi.ProductQty = Convert.ToInt16(dr["qty"]);
                                    oi.Discount = Convert.ToInt16(dr["discount"]);
                                    oi.Cost = Convert.ToDouble(dr["cost"]);
                                    onlineOrderItemList.Add(oi);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return onlineOrderItemList;
        }


        public static Customer GetCustomerNameByID(Int32 cusId)
        {
            Customer customer = new Customer();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetOnlineOrderItem = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, " +
                                                                             "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax, " +
                                                                             "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1, " +
                                                                             "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2, " +
                                                                             "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3, " +
                                                                             "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit, " +
                                                                             "Customers.primary_business,(SELECT p.category_name FROM Category p WHERE p.id = Customers.primary_business) AS primary_business_Cat " +
                                                                             "FROM Customers " +                                                                             
                                                                             "WHERE Customers.id=@CusID " +
                                                                             "ORDER BY Customers.company_name", conn))
                    {
                        cmdGetOnlineOrderItem.Parameters.AddWithValue("@CusID", cusId);
                        using (SqlDataReader dr = cmdGetOnlineOrderItem.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    customer.CustomerId = Convert.ToInt16(dr["id"]);
                                    customer.CustomerType = dr["customer_type"].ToString();
                                    customer.CompanyName = dr["company_name"].ToString();
                                    customer.CompanyAddress = dr["company_address"].ToString();
                                    customer.CompanyCity = dr["company_city"].ToString();
                                    customer.CompanyState = dr["company_state"].ToString();
                                    customer.CompanyPostCode = dr["company_postcode"].ToString();
                                    customer.CompanyCountry = dr["company_country"].ToString();
                                    customer.CompanyEmail = dr["company_email"].ToString();
                                    customer.CompanyTelephone = dr["company_telephone"].ToString();
                                    customer.CompanyFax = dr["company_fax"].ToString();
                                    customer.Designation1 = dr["designation1"].ToString();
                                    customer.FirstName1 = dr["first_name1"].ToString();
                                    customer.LastName1 = dr["last_name1"].ToString();
                                    customer.Telephone1 = dr["telephone1"].ToString();
                                    customer.Mobile1 = dr["mobile1"].ToString();
                                    customer.Email1 = dr["email1"].ToString();
                                    customer.Fax1 = dr["fax1"].ToString();
                                    customer.Designation2 = dr["designation2"].ToString();
                                    customer.FirstName2 = dr["first_name2"].ToString();
                                    customer.LastName2 = dr["last_name2"].ToString();
                                    customer.Telephone2 = dr["telephone2"].ToString();
                                    customer.Mobile2 = dr["mobile2"].ToString();
                                    customer.Email2 = dr["email2"].ToString();
                                    customer.Fax2 = dr["fax2"].ToString();
                                    customer.Designation3 = dr["designation3"].ToString();
                                    customer.FirstName3 = dr["first_name3"].ToString();
                                    customer.LastName3 = dr["last_name3"].ToString();
                                    customer.Telephone3 = dr["telephone3"].ToString();
                                    customer.Mobile3 = dr["mobile3"].ToString();
                                    customer.Email3 = dr["email3"].ToString();
                                    customer.Fax3 = dr["fax3"].ToString();
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    customer.ShipAddress = dr["ship_address"].ToString();
                                    customer.ShipCity = dr["ship_city"].ToString();
                                    customer.ShipState = dr["ship_state"].ToString();
                                    customer.ShipPostCode = dr["ship_postcode"].ToString();
                                    customer.ShipCountry = dr["ship_country"].ToString();
                                    customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    customer.Active = Convert.ToBoolean(dr["active"]);
                                    customer.StopCredit = dr["stop_credit"].ToString();
                                    customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    customer.DiscountStructure = new ObservableCollection<DiscountStructure>() { };
                                    customer.PrimaryBusiness = new Category();
                                    customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                    customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();                                   
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return customer;
        }

        public static Customer GetCustomerDataByCustomerID(Int32 cusId)
        {
            Customer customer = new Customer();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetOnlineOrderItem = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, ISNULL(Discount.category_id,0) AS category_id,ISNULL(Category.category_name,'') AS category_name,Category.category_document_path,ISNULL(Discount.discount,0) As Discount,Discount.time_stamp AS DisTimeStamp, " +
                                                                             "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax, " +
                                                                             "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1, " +
                                                                             "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2, " +
                                                                             "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3, " +
                                                                             "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit, " +
                                                                             "Customers.primary_business,(SELECT p.category_name FROM Category p WHERE p.id = Customers.primary_business) AS primary_business_Cat " +
                                                                             "FROM Customers " +
                                                                             "LEFT JOIN Discount ON Customers.id=Discount.customer_id " +
                                                                             "LEFT JOIN Category ON Discount.category_id = Category.id " +
                                                                             "WHERE Customers.id=@CusID " +
                                                                             "ORDER BY Customers.company_name", conn))
                    {
                        cmdGetOnlineOrderItem.Parameters.AddWithValue("@CusID", cusId);
                        using (SqlDataReader dr = cmdGetOnlineOrderItem.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    customer.CustomerId = Convert.ToInt16(dr["id"]);
                                    customer.CustomerType = dr["customer_type"].ToString();
                                    customer.CompanyName = dr["company_name"].ToString();
                                    customer.CompanyAddress = dr["company_address"].ToString();
                                    customer.CompanyCity = dr["company_city"].ToString();
                                    customer.CompanyState = dr["company_state"].ToString();
                                    customer.CompanyPostCode = dr["company_postcode"].ToString();
                                    customer.CompanyCountry = dr["company_country"].ToString();
                                    customer.CompanyEmail = dr["company_email"].ToString();
                                    customer.CompanyTelephone = dr["company_telephone"].ToString();
                                    customer.CompanyFax = dr["company_fax"].ToString();
                                    customer.Designation1 = dr["designation1"].ToString();
                                    customer.FirstName1 = dr["first_name1"].ToString();
                                    customer.LastName1 = dr["last_name1"].ToString();
                                    customer.Telephone1 = dr["telephone1"].ToString();
                                    customer.Mobile1 = dr["mobile1"].ToString();
                                    customer.Email1 = dr["email1"].ToString();
                                    customer.Fax1 = dr["fax1"].ToString();
                                    customer.Designation2 = dr["designation2"].ToString();
                                    customer.FirstName2 = dr["first_name2"].ToString();
                                    customer.LastName2 = dr["last_name2"].ToString();
                                    customer.Telephone2 = dr["telephone2"].ToString();
                                    customer.Mobile2 = dr["mobile2"].ToString();
                                    customer.Email2 = dr["email2"].ToString();
                                    customer.Fax2 = dr["fax2"].ToString();
                                    customer.Designation3 = dr["designation3"].ToString();
                                    customer.FirstName3 = dr["first_name3"].ToString();
                                    customer.LastName3 = dr["last_name3"].ToString();
                                    customer.Telephone3 = dr["telephone3"].ToString();
                                    customer.Mobile3 = dr["mobile3"].ToString();
                                    customer.Email3 = dr["email3"].ToString();
                                    customer.Fax3 = dr["fax3"].ToString();
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    customer.ShipAddress = dr["ship_address"].ToString();
                                    customer.ShipCity = dr["ship_city"].ToString();
                                    customer.ShipState = dr["ship_state"].ToString();
                                    customer.ShipPostCode = dr["ship_postcode"].ToString();
                                    customer.ShipCountry = dr["ship_country"].ToString();
                                    customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    customer.Active = Convert.ToBoolean(dr["active"]);
                                    customer.StopCredit = dr["stop_credit"].ToString();
                                    customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    customer.DiscountStructure = new ObservableCollection<DiscountStructure>() { };
                                    customer.PrimaryBusiness = new Category();
                                    customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                    customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();
                                    if (Convert.ToInt16(dr["category_id"]) != 0)
                                    {
                                        string vis = "Collapsed";
                                        if (Convert.ToInt16(dr["category_id"]) == 3)
                                        {
                                            if (Convert.ToInt16(dr["Discount"]) == 60 || Convert.ToInt16(dr["Discount"]) == 58)
                                            {
                                                vis = "Visible";
                                            }
                                        }
                                        customer.DiscountStructure.Add(new DiscountStructure() { CustomerID = Convert.ToInt16(dr["id"]), Category = new Category() { CategoryName = dr["category_name"].ToString(), CategoryID = Convert.ToInt16(dr["category_id"]), DocumentPath = dr["category_document_path"].ToString() }, Discount = Convert.ToInt16(dr["Discount"]), DiscountLabelVisibility = vis, TimeStamp = Convert.ToBase64String(dr["DisTimeStamp"] as byte[]) });
                                    }
                                }
                            }
                        }                     
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return customer;
        }

        public static AdminNote GetAdminNoteByID(Int32 cusId)
        {
            AdminNote adminNote = new AdminNote();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetAdminNote = new SqlCommand("SELECT * FROM AdminNotes " +
                                                                       "WHERE customer_id=@CusID AND active = 'True'", conn))
                    {
                        cmdGetAdminNote.Parameters.AddWithValue("@CusID", cusId);
                        using (SqlDataReader dr = cmdGetAdminNote.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    adminNote.ID = Convert.ToInt32(dr["id"]);
                                    adminNote.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                    adminNote.Area = dr["area"].ToString();
                                    adminNote.Note = dr["note"].ToString();
                                    adminNote.CreatedBy = dr["created_by"].ToString();
                                    adminNote.CreatedDate = Convert.ToDateTime(dr["datetime"]);
                                    adminNote.Active = Convert.ToBoolean(dr["active"]);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return adminNote;
        }


        public static ProductStock GetProductStockByID(int prodId,int stockId)
        {
            ProductStock ps = new ProductStock();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
               

                SqlCommand cmdGetProductStock = new SqlCommand("SELECT * FROM ProductStock " +
                                                               "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlCommand cmdGetPurchasingOrderItem = new SqlCommand("SELECT ISNULL(SUM(order_qty),0) AS OrderQty FROM PurchasingOrderItems " +
                                                                      "WHERE line_status='Open' AND product_id = @ProductID", conn);

                SqlCommand cmdGetQtyReserved = new SqlCommand("SELECT ISNULL(SUM(qty_reserved),0) AS qty_reserved " +
                                                              "FROM ProductStockReserved " +
                                                              "WHERE  product_id = @ProductID AND status = 'Reserved'", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    cmdGetProductStock.Transaction = trans;
                    cmdGetProductStock.Parameters.AddWithValue("@StockLocationID", stockId);
                    cmdGetProductStock.Parameters.AddWithValue("@ProductID", prodId);
                    using (SqlDataReader dr = cmdGetProductStock.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                ps.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                ps.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                ps.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                            }
                        }
                    }


                    cmdGetPurchasingOrderItem.Transaction = trans;
                    cmdGetPurchasingOrderItem.Parameters.AddWithValue("@ProductID", prodId);
                    ps.TotalSupply = CheckNull<decimal>(cmdGetPurchasingOrderItem.ExecuteScalar());
                    ps.ProjectedAvailable = ps.QtyAvailable + ps.TotalSupply;

                    cmdGetQtyReserved.Transaction = trans;
                    cmdGetQtyReserved.Parameters.AddWithValue("@ProductID", prodId);
                    ps.QtyOnHold = CheckNull<decimal>(cmdGetQtyReserved.ExecuteScalar());

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return ps;
        }

        public static Tuple<int,ProductStock> UpdateProductStock(int stkId, int prodId, string TimeStamp, decimal quantity)
        {
            int res = 0;
            ProductStock ps = new ProductStock();
            ProductStock psRe = new ProductStock();
            List<ProductStockReserved> prodStockReserved = new List<ProductStockReserved>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetProductStock = new SqlCommand("SELECT * FROM ProductStock " +
                                                               "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlCommand cmdUpdateProdStock = new SqlCommand("UPDATE ProductStock SET qty_available=@Qty,last_updated_date=@LastUpdatedDate,updated_by=@UpdatedBy " +
                                                               "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlCommand cmdInsertProdTransactions = new SqlCommand("INSERT INTO ProductTransactions(transaction_date,qty,type,reason,sales_no,shipping_no,purchase_no,work_order_no,product_id,line_no,added_by,result) " +
                                                                      "VALUES (@TransactionDate,@Qty,@Type,@Reason,@SalesNo,@ShippingNo,@PurchaseNo,@WorkOrderNo,@ProductID,@LineNo,@AddedBy,@Result)", conn);

                SqlCommand cmdGetPurchasingOrderItem = new SqlCommand("SELECT ISNULL(SUM(order_qty),0) AS OrderQty FROM PurchasingOrderItems " +
                                                                      "WHERE line_status='Open' AND product_id = @ProductID", conn);

                SqlCommand cmdGetProductStockRe = new SqlCommand("SELECT * FROM ProductStock " +
                                                                 "WHERE stock_location_id=@StockLocationID AND product_id=@ProductID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction(System.Data.IsolationLevel.Serializable);
                try
                {

                    cmdGetProductStock.Transaction = trans;
                    cmdGetProductStock.Parameters.AddWithValue("@StockLocationID", stkId);
                    cmdGetProductStock.Parameters.AddWithValue("@ProductID", prodId);
                    using (SqlDataReader dr = cmdGetProductStock.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {  
                                ps.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                            }
                        }
                    }

                    cmdGetPurchasingOrderItem.Transaction = trans;
                    cmdGetPurchasingOrderItem.Parameters.AddWithValue("@ProductID", prodId);
                    ps.TotalSupply = CheckNull<decimal>(cmdGetPurchasingOrderItem.ExecuteScalar());

                    bool y = true;

                    if (TimeStamp != ps.TimeStamp)
                    {
                        y = false;
                    }

                    if (y)
                    {

                        cmdUpdateProdStock.Transaction = trans;
                        cmdUpdateProdStock.Parameters.AddWithValue("@Qty", quantity);
                        cmdUpdateProdStock.Parameters.AddWithValue("@ProjectedAvailable", 0);
                        cmdUpdateProdStock.Parameters.AddWithValue("@StockLocationID", stkId);
                        cmdUpdateProdStock.Parameters.AddWithValue("@ProductID", prodId);
                        cmdUpdateProdStock.Parameters.AddWithValue("@LastUpdatedDate", DateTime.Now);
                        cmdUpdateProdStock.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        int r = cmdUpdateProdStock.ExecuteNonQuery();

                        if (r > 0)
                        {
                            cmdGetProductStockRe.Transaction = trans;
                            cmdGetProductStockRe.Parameters.AddWithValue("@StockLocationID", stkId);
                            cmdGetProductStockRe.Parameters.AddWithValue("@ProductID", prodId);
                            using (SqlDataReader dr = cmdGetProductStockRe.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        psRe.ID = Convert.ToInt16(dr["id"]);
                                        psRe.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                        psRe.Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) };
                                        psRe.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                        psRe.TotalSupply = ps.TotalSupply;
                                        psRe.LastUpdatedDate = CheckNull<DateTime>(dr["last_updated_date"]);
                                        psRe.UpdatedBy = dr["updated_by"].ToString();
                                        psRe.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    }
                                }
                            }

                            /**INSERT to ProductTransactions**/
                            cmdInsertProdTransactions.Transaction = trans;
                            cmdInsertProdTransactions.Parameters.AddWithValue("@TransactionDate", DateTime.Now);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Qty", quantity);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Type", "Adjustment P/M");
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Reason", "Bulk Adjustment");
                            cmdInsertProdTransactions.Parameters.AddWithValue("@SalesNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@ShippingNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@PurchaseNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@WorkOrderNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@ProductID", prodId);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@LineNo", 0);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@AddedBy", UserData.FirstName + " " + UserData.LastName);
                            cmdInsertProdTransactions.Parameters.AddWithValue("@Result", "Bulk Adjustment");
                            res = cmdInsertProdTransactions.ExecuteNonQuery();
                        }
                    }
                    else
                    {
                        res = -1;
                    }
                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(res, psRe);
        }

        public static List<SalesOrder> GetNoStockSalesOrders(ProductStock ps)
        {
            List<SalesOrder> soList = new List<SalesOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {


                SqlCommand cmdGetSalesOrders = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,SalesOrder.order_priority,SalesOrder.customer_id,Customers.company_name,Customers.customer_type,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,SalesOrder.freight_id,Freight.FreightName,SalesOrder.quote_no,SalesOrder.customer_order_no,SalesOrder.bill_to,SalesOrder.ship_to,SalesOrder.pickup_time,SalesOrder.dispatch_date,SalesOrder.terms_id,SalesOrder.list_price_total,SalesOrder.freight_total,SalesOrder.total_amount,SalesOrder.gst,SalesOrder.stock_location,SalesOrder.sales_made_by,SalesOrder.sales_completed_by,SalesOrder.order_status,SalesOrder.last_modified_date,SalesOrder.last_modified_by,SalesOrder.payment_due_date,SalesOrder.gst_enabled,SalesOrder.payment_recieved,  " +
                                                              "PrePaidCustomers.prepaid_customer_name,DispatchOrders.dispatched_date, " +
                                                              "SalesOrderDetails.order_line,SalesOrderDetails.product_id,SalesOrderDetails.qty " +
                                                              "FROM SalesOrder  " +
                                                              "INNER JOIN SalesOrderDetails ON SalesOrder.sales_no = SalesOrderDetails.sales_no " +
                                                              "INNER JOIN  Freight ON SalesOrder.freight_id = Freight.ID  " +
                                                              "LEFT JOIN  Customers ON SalesOrder.customer_id = Customers.id  " +
                                                              "INNER JOIN PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no  " +
                                                              "LEFT JOIN DispatchOrders ON SalesOrder.sales_no = DispatchOrders.sales_no  " +
                                                              "WHERE (SalesOrder.order_status ='HoldNoStock' OR SalesOrder.order_status ='HoldNoCredit' OR SalesOrder.order_status='HoldNoCreditNoStock') AND SalesOrderDetails.product_id=@ProductID", conn);

                
                conn.Open();
                try
                {

                    cmdGetSalesOrders.Parameters.AddWithValue("@ProductID", ps.Product.ProductID);
                    using (SqlDataReader dr = cmdGetSalesOrders.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if(soList.Count ==0)
                                {
                                    SalesOrder so = new SalesOrder();
                                    so.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);

                                    so.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    so.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                    so.Customer = new Customer()
                                    {
                                        CustomerId = Convert.ToInt16(dr["customer_id"]),
                                        CompanyName = Convert.ToInt16(dr["customer_id"]) > 0 ? dr["company_name"].ToString() : dr["prepaid_customer_name"].ToString(),
                                        CustomerType = dr["customer_type"].ToString(),
                                        CreditLimit = CheckNull<decimal>(dr["credit_limit"]),
                                        CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]),
                                        Debt = CheckNull<decimal>(dr["debt"]),
                                        CreditOwed = CheckNull<decimal>(dr["credit_owed"])
                                    };
                                    so.FreightCarrier = new FreightCarrier() { Id = Convert.ToInt16(dr["freight_id"]), FreightName = dr["FreightName"].ToString() };
                                    so.DispatchOrder = new DispatchOrder() { DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]) };
                                    so.QuoteNo = Convert.ToInt16(dr["quote_no"]);
                                    so.CustomerOrderNo = dr["customer_order_no"].ToString();
                                    so.BillTo = dr["bill_to"].ToString();
                                    so.ShipTo = dr["ship_to"].ToString();
                                    so.PickupTime = dr["pickup_time"].ToString();
                                    so.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                    so.TermsID = dr["terms_id"].ToString();
                                    so.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                    so.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                    so.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                    so.GST = Convert.ToDecimal(dr["gst"]);
                                    so.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                    so.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location"]) };
                                    so.SalesMadeBy = dr["sales_made_by"].ToString();
                                    so.SalesCompletedBy = dr["sales_completed_by"].ToString();
                                    so.OrderStatus = dr["order_status"].ToString();
                                    so.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                    so.LastModifiedBy = dr["last_modified_by"].ToString();
                                    so.GSTEnabled = Convert.ToBoolean(dr["gst_enabled"]);
                                    so.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                    so.SalesOrderDetails = new ObservableCollection<SalesOrderDetails>();
                                    so.SalesOrderDetails.Add(new SalesOrderDetails() { OrderLine = Convert.ToInt16(dr["order_line"]), Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) }, Quantity = Convert.ToDecimal(dr["qty"]) });
                                    soList.Add(so);
                                }
                                else
                                {
                                    var has = soList.SingleOrDefault(x=>x.SalesOrderNo == Convert.ToInt32(dr["sales_no"]));
                                    if(has != null)
                                    {
                                        foreach (var item in soList)
                                        {
                                            if(item.SalesOrderNo == Convert.ToInt32(dr["sales_no"]))
                                            {
                                                item.SalesOrderDetails.Add(new SalesOrderDetails() { OrderLine = Convert.ToInt16(dr["order_line"]), Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) }, Quantity = Convert.ToDecimal(dr["qty"]) });
                                            }
                                        }
                                    }
                                    else
                                    {
                                        SalesOrder so = new SalesOrder();
                                        so.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);

                                        so.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                        so.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                        so.Customer = new Customer()
                                        {
                                            CustomerId = Convert.ToInt16(dr["customer_id"]),
                                            CompanyName = Convert.ToInt16(dr["customer_id"]) > 0 ? dr["company_name"].ToString() : dr["prepaid_customer_name"].ToString(),
                                            CustomerType = dr["customer_type"].ToString(),
                                            CreditLimit = CheckNull<decimal>(dr["credit_limit"]),
                                            CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]),
                                            Debt = CheckNull<decimal>(dr["debt"]),
                                            CreditOwed = CheckNull<decimal>(dr["credit_owed"])
                                        };
                                        so.FreightCarrier = new FreightCarrier() { Id = Convert.ToInt16(dr["freight_id"]), FreightName = dr["FreightName"].ToString() };
                                        so.DispatchOrder = new DispatchOrder() { DispatchedDate = CheckNull<DateTime>(dr["dispatched_date"]) };
                                        so.QuoteNo = Convert.ToInt16(dr["quote_no"]);
                                        so.CustomerOrderNo = dr["customer_order_no"].ToString();
                                        so.BillTo = dr["bill_to"].ToString();
                                        so.ShipTo = dr["ship_to"].ToString();
                                        so.PickupTime = dr["pickup_time"].ToString();
                                        so.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                        so.TermsID = dr["terms_id"].ToString();
                                        so.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                        so.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                        so.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                        so.GST = Convert.ToDecimal(dr["gst"]);
                                        so.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                        so.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location"]) };
                                        so.SalesMadeBy = dr["sales_made_by"].ToString();
                                        so.SalesCompletedBy = dr["sales_completed_by"].ToString();
                                        so.OrderStatus = dr["order_status"].ToString();
                                        so.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                        so.LastModifiedBy = dr["last_modified_by"].ToString();
                                        so.GSTEnabled = Convert.ToBoolean(dr["gst_enabled"]);
                                        so.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                        so.SalesOrderDetails = new ObservableCollection<SalesOrderDetails>();
                                        so.SalesOrderDetails.Add(new SalesOrderDetails() { OrderLine = Convert.ToInt16(dr["order_line"]), Product = new Product() { ProductID = Convert.ToInt16(dr["product_id"]) }, Quantity = Convert.ToDecimal(dr["qty"]) });
                                        soList.Add(so);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return soList;
        }

        public static string GetPrePaidCustomer(Int32 quoteNo, Int32 salesNo)
        {
            string compName = string.Empty;
            string where = string.Empty;

            if (quoteNo == 0 && salesNo > 0)
            {
                where = "sales_no=@SalesNo";
            }
            else if (salesNo == 0 && quoteNo > 0)
            {
                where = "quote_no=@QuoteNo";
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {


                SqlCommand cmdGetCompName = new SqlCommand("SELECT prepaid_customer_name " +
                                                           "FROM PrePaidCustomers " +
                                                           "WHERE "+where+"", conn);

                conn.Open();
                try
                {
                    cmdGetCompName.Parameters.AddWithValue("@SalesNo", salesNo);
                    cmdGetCompName.Parameters.AddWithValue("@QuoteNo", quoteNo);
                    compName = CheckNull<string>(cmdGetCompName.ExecuteScalar());
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return compName;
        }


        public static void InsertTransactionRecord(List<TransactionRecord> tr)
        {
            Customer custCred = new Customer();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
              
                SqlCommand cmdTransactionRecord = new SqlCommand("INSERT INTO TransactionRecord(date_time,area,description,script,value,result,user_name) " +
                                                                 "VALUES (@DateTime,@Area,@Description,@Script,@Value,@Result,@UserName)", conn);

                conn.Open();

                try
                {
                 
                    foreach (var item in tr)
                    {
                        cmdTransactionRecord.Parameters.AddWithValue("@DateTime", item.DateTime);
                        cmdTransactionRecord.Parameters.AddWithValue("@Area", item.Area);
                        cmdTransactionRecord.Parameters.AddWithValue("@Description", item.Description);
                        cmdTransactionRecord.Parameters.AddWithValue("@Script", item.ScriptName);
                        cmdTransactionRecord.Parameters.AddWithValue("@Value", item.Values);
                        cmdTransactionRecord.Parameters.AddWithValue("@Result", item.Result);
                        cmdTransactionRecord.Parameters.AddWithValue("@UserName", item.UserName);
                        cmdTransactionRecord.ExecuteNonQuery();
                        cmdTransactionRecord.Parameters.Clear();
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL INSERT ERROR OCCURED :  Transaction Record " + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            
        }


        public static List<Tuple<string, string, Int32>> GetSalesOrderTimeStamps(Int32 cusId, SalesOrder so, int locationID)
        {
            List<Tuple<string, string, Int32>> timeStamps = new List<Tuple<string, string, Int32>>();
            string[] prods = null;
            prods = MetaDataManager.GetPriceEditingProducts();


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetSalesOrderTimeStamp = new SqlCommand("SELECT time_stamp FROM SalesOrder " +
                                                                      "WHERE sales_no=@SalesNo", conn);

                SqlCommand cmdGetCustomerTimeStamp = new SqlCommand("SELECT time_stamp FROM Customers " +
                                                                    "WHERE id=@CustomerID", conn);

                SqlCommand cmdGetSODetailsTimeStamp = new SqlCommand("SELECT ProductStock.product_id,ProductStock.time_stamp AS prodStockTimeStamp, Products.time_stamp AS prodTimeStamp " +
                                                                     "FROM ProductStock " +
                                                                     "INNER JOIN Products ON ProductStock.product_id = Products.id " +
                                                                     "WHERE ProductStock.product_id=@ProductID AND ProductStock.stock_location_id=@LocationID", conn);

                SqlCommand cmdGetFreightCodesTimeStamp = new SqlCommand("SELECT time_stamp FROM FreightCodes " +
                                                                        "WHERE id=@FreightCodeID", conn);

                SqlCommand cmdGetFreightTimeStamp = new SqlCommand("SELECT time_stamp FROM Freight " +
                                                                   "WHERE id=@FreightID AND id != 0", conn);

                SqlCommand cmdGetSalesOrderDetailsTimeStamp = new SqlCommand("SELECT SalesOrderDetails.id,SalesOrderDetails.sales_no,SalesOrderDetails.product_id,SalesOrderDetails.time_stamp AS SODTimeStamp, ProductStockReserved.time_stamp AS PSRTimeStamp, Products.time_stamp AS PTimeStamp " +
                                                                             "FROM SalesOrderDetails " +
                                                                             "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id  " +
                                                                             "INNER JOIN ProductStockReserved ON SalesOrderDetails.id = ProductStockReserved.prod_stock_reserved_id " +
                                                                             "WHERE SalesOrderDetails.sales_no = @SalesNo", conn);

                SqlCommand cmdGetFreightDetailsTimeStamp = new SqlCommand("SELECT FreightDetails.freight_code_id, FreightDetails.time_stamp " +
                                                                          "FROM FreightDetails " +
                                                                          "WHERE FreightDetails.order_no = @SalesNo", conn);

                SqlCommand cmdGetCommentTimeStamp = new SqlCommand("SELECT * FROM Comments " +
                                                                   "WHERE no=@SalesNo AND (location_id=7 OR location_id=8)", conn);

                SqlCommand cmdGetDiscountTimeStamp = new SqlCommand("SELECT * FROM Discount " +
                                                                    "WHERE customer_id=@CustomerID AND (discount > 0)", conn);
                                
                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();
                try
                {
                    if (so.SalesOrderNo > 0)
                    {
                        cmdGetSalesOrderTimeStamp.Transaction = trans;
                        cmdGetSalesOrderTimeStamp.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetSalesOrderTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    timeStamps.Add(Tuple.Create("SO", Convert.ToBase64String(dr["time_stamp"] as byte[]), cusId));
                                }
                            }
                        }
                        
                        cmdGetSalesOrderDetailsTimeStamp.Transaction = trans;
                        cmdGetSalesOrderDetailsTimeStamp.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetSalesOrderDetailsTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    //Check if it is OffSpec or Rotatub custom
                                    //bool exists = false;
                                    //if (prods != null)
                                    //{
                                    //    exists = prods.Any(x => Convert.ToInt16(x) == Convert.ToInt32(dr["product_id"]));
                                    //}

                                    //if (exists == false)
                                    //{
                                        timeStamps.Add(Tuple.Create("PROD", Convert.ToBase64String(dr["PTimeStamp"] as byte[]), Convert.ToInt32(dr["id"])));
                                        timeStamps.Add(Tuple.Create("SOD", Convert.ToBase64String(dr["SODTimeStamp"] as byte[]), Convert.ToInt32(dr["id"])));
                                        timeStamps.Add(Tuple.Create("PRODSTOCK", Convert.ToBase64String(dr["PSRTimeStamp"] as byte[]), Convert.ToInt32(dr["id"])));
                                    //}
                                }
                            }
                        }                           

                        cmdGetFreightDetailsTimeStamp.Transaction = trans;
                        cmdGetFreightDetailsTimeStamp.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetFreightDetailsTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    timeStamps.Add(Tuple.Create("FD", Convert.ToBase64String(dr["time_stamp"] as byte[]), Convert.ToInt32(dr["freight_code_id"])));
                                }
                            }
                        }                        

                        cmdGetCommentTimeStamp.Transaction = trans;
                        cmdGetCommentTimeStamp.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetCommentTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    timeStamps.Add(Tuple.Create("COM", Convert.ToBase64String(dr["time_stamp"] as byte[]), Convert.ToInt32(dr["location_id"])));                                    
                                }
                            }
                        }

                    }
                    else
                    {
                        foreach (var item in so.SalesOrderDetails)
                        {
                            //Check if it is OffSpec or Rotatub custom
                            bool exists = false;
                            if (prods != null)
                            {
                                exists = prods.Any(x => Convert.ToInt16(x) == item.Product.ProductID);
                            }

                            if (exists == false)
                            {
                                cmdGetSODetailsTimeStamp.Transaction = trans;
                                cmdGetSODetailsTimeStamp.Parameters.AddWithValue("@LocationID", locationID);
                                cmdGetSODetailsTimeStamp.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                                using (SqlDataReader dr = cmdGetSODetailsTimeStamp.ExecuteReader())
                                {
                                    if (dr != null)
                                    {
                                        while (dr.Read())
                                        {
                                            timeStamps.Add(Tuple.Create("PROD", Convert.ToBase64String(dr["prodTimeStamp"] as byte[]), item.Product.ProductID));
                                            timeStamps.Add(Tuple.Create("PRODSTOCK", Convert.ToBase64String(dr["prodStockTimeStamp"] as byte[]), item.Product.ProductID));
                                        }
                                    }
                                }
                                cmdGetSODetailsTimeStamp.Parameters.Clear();
                            }
                        }
                    }
                    

                    cmdGetCustomerTimeStamp.Transaction = trans;
                    cmdGetCustomerTimeStamp.Parameters.AddWithValue("@CustomerID", cusId);
                    using (SqlDataReader dr = cmdGetCustomerTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("CUS", Convert.ToBase64String(dr["time_stamp"] as byte[]), cusId));
                            }
                        }
                    }

                    cmdGetDiscountTimeStamp.Transaction = trans;
                    cmdGetDiscountTimeStamp.Parameters.AddWithValue("@CustomerID", cusId);
                    using (SqlDataReader dr = cmdGetDiscountTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("DIS", Convert.ToBase64String(dr["time_stamp"] as byte[]), Convert.ToInt32(dr["category_id"])));
                            }
                        }
                    }
                    

                    foreach (var item in so.FreightDetails)
                    {
                        cmdGetFreightCodesTimeStamp.Transaction = trans;
                        cmdGetFreightCodesTimeStamp.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
                        using (SqlDataReader dr = cmdGetFreightCodesTimeStamp.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    timeStamps.Add(Tuple.Create("FREIGHT", Convert.ToBase64String(dr["time_stamp"] as byte[]), item.FreightCodeDetails.FreightCodeID));
                                }
                            }
                        }
                        cmdGetFreightCodesTimeStamp.Parameters.Clear();
                    }

                    cmdGetFreightTimeStamp.Transaction = trans;
                    cmdGetFreightTimeStamp.Parameters.AddWithValue("@FreightID", so.FreightCarrier.Id);
                    using (SqlDataReader dr = cmdGetFreightTimeStamp.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                timeStamps.Add(Tuple.Create("CARRIER", Convert.ToBase64String(dr["time_stamp"] as byte[]), so.FreightCarrier.Id));
                            }
                        }
                    }
                                      
                    

                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL UPDATE COMMAND ERROR OCCURED :  Updating Orders table" + e);
                }
                finally
                {
                    conn.Close();
                }

            }
            return timeStamps;
        }


        public static Tuple<Customer, List<ProductStock>, List<FreightCode>, FreightCarrier, SalesOrder> GetUpdatedSalesOrderDetailsDB(Int32 cusId, int stockLocation, SalesOrder so)
        {
            SalesOrder salesOrder = new SalesOrder();
            salesOrder.SalesOrderDetails = new ObservableCollection<SalesOrderDetails>();
            salesOrder.FreightDetails = new BindingList<FreightDetails>();
            salesOrder.Comments = new List<Comment>();
            Customer customer = null;
            List<ProductStock> productStockList = new List<ProductStock>();
            List<FreightCode> freightCodeList = new List<FreightCode>();
            FreightCarrier carrier = new FreightCarrier();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdGetSO = new SqlCommand("SELECT SalesOrder.sales_no,SalesOrder.order_date,SalesOrder.order_priority,SalesOrder.freight_id,SalesOrder.customer_order_no,SalesOrder.dispatch_date,SalesOrder.order_priority,SalesOrder.order_status,SalesOrder.ship_to,SalesOrder.bill_to,SalesOrder.last_modified_date,SalesOrder.terms_id,SalesOrder.pickup_time,SalesOrder.list_price_total,SalesOrder.total_amount,SalesOrder.gst,SalesOrder.payment_recieved,SalesOrder.sales_made_by,SalesOrder.payment_due_date,SalesOrder.freight_total,SalesOrder.gst_enabled,SalesOrder.time_stamp, " +
                                                        "Customers.id AS CusID,Customers.company_name,Customers.customer_type, " +
                                                        "StockLocation.id AS StockLocationID,StockLocation.stock_name, " +
                                                        "PrePaidCustomers.prepaid_customer_name, " +
                                                        "Freight.FreightName, Freight.FreightDescription,Freight.active AS FrightActive " +
                                                        "FROM SalesOrder " +
                                                        "LEFT JOIN Customers ON SalesOrder.customer_id = Customers.id " +
                                                        "INNER JOIN StockLocation ON SalesOrder.stock_location = StockLocation.id " +
                                                        "INNER JOIN PrePaidCustomers ON SalesOrder.sales_no = PrePaidCustomers.sales_no " +
                                                        "INNER JOIN Freight ON SalesOrder.freight_id = Freight.ID " +
                                                        "WHERE SalesOrder.sales_no = @SalesNo", conn);

                SqlCommand cmdGetSalesItems = new SqlCommand("SELECT SalesOrderDetails.id,SalesOrderDetails.sales_no,SalesOrderDetails.order_line,SalesOrderDetails.line_status,SalesOrderDetails.qty,SalesOrderDetails.discount,SalesOrderDetails.total,SalesOrderDetails.description,SalesOrderDetails.list_price,SalesOrderDetails.time_stamp AS salesOrderDetailsTimeStamp, " +
                                                                 "Products.id AS pID,Products.product_code,Products.product_description,Products.category_id,Products.unit,Products.unit_price, Products.time_stamp AS PTimeStamp, " +
																 "ProductStockReserved.qty_ordered, ProductStockReserved.qty_reserved, ProductStockReserved.qty_remaining, ProductStockReserved.time_stamp AS PSRTimeStamp " +
                                                                 "FROM SalesOrderDetails " +
                                                                 "INNER JOIN Products ON SalesOrderDetails.product_id = Products.id " +
                                                                 "INNER JOIN ProductStockReserved ON SalesOrderDetails.id = ProductStockReserved.prod_stock_reserved_id AND ProductStockReserved.sales_no = @SalesNo " +
                                                                 "WHERE SalesOrderDetails.sales_no = @SalesNo AND ProductStockReserved.stock_location_id = 1 ORDER BY SalesOrderDetails.order_line", conn);
                    
                    SqlCommand cmdGetOnlineOrderItem = new SqlCommand("SELECT Customers.id,Customers.customer_type,Customers.company_name, " +
                                                                                "Customers.company_address,Customers.company_city,Customers.company_state,Customers.company_postcode,Customers.company_country,Customers.company_email,Customers.company_telephone,Customers.company_fax, " +
                                                                                "Customers.designation1,Customers.first_name1,Customers.last_name1,Customers.telephone1,Customers.mobile1,Customers.fax1,Customers.email1, " +
                                                                                "Customers.designation2,Customers.first_name2,Customers.last_name2,Customers.telephone2,Customers.mobile2,Customers.fax2,Customers.email2, " +
                                                                                "Customers.designation3,Customers.first_name3,Customers.last_name3,Customers.telephone3,Customers.mobile3,Customers.fax3,Customers.email3, " +
                                                                                "Customers.ship_address,Customers.ship_city,Customers.ship_state,Customers.ship_postcode,Customers.ship_country,Customers.credit_limit,Customers.credit_remaining,Customers.debt,Customers.credit_owed,Customers.last_updated_by,Customers.last_updated_datetime,Customers.active,Customers.time_stamp,Customers.stop_credit, " +
                                                                                "Customers.primary_business,(SELECT p.category_name FROM Category p WHERE p.id = Customers.primary_business) AS primary_business_Cat " +
                                                                                "FROM Customers " +
                                                                                "WHERE Customers.id=@CusID " +
                                                                                "ORDER BY Customers.company_name", conn);

                    SqlCommand cmdGetProdStock = new SqlCommand("SELECT Products.id,Products.category_id,Products.product_type_id,Products.raw_product_id,Products.type,Products.commodity_code,Products.product_name,Products.product_code,Products.product_description,Products.unit,Products.size,Products.material_cost,Products.units_per_package,Products.unit_cost,Products.unit_price,Products.minimum_order_qty,Products.orders_in_multiples_of,Products.safety_stock_qty,Products.order_point,Products.is_manufactured,Products.is_purchased,Products.last_modified_by,Products.last_modified_date,Products.is_raw_material,Products.is_auto_order,Products.active,Products.time_stamp AS prodTimeStamp, " +
                                                            "ProductStock.id AS ProductStockID,ProductStock.stock_location_id,ProductStock.qty_available,ProductStock.net_demand,ProductStock.total_supply,ProductStock.projected_available,ProductStock.is_editing,ProductStock.editing_by,ProductStock.last_updated_date AS ProdStockUpdatedDate,ProductStock.updated_by AS ProdStockUpdatedBy,ProductStock.time_stamp AS prodStockTimeStamp " +
                                                            "FROM Products " +
                                                            "INNER JOIN ProductStock ON Products.id = ProductStock.product_id " +
                                                            "WHERE Products.id =@ProductID AND ProductStock.stock_location_id=@Location", conn);

                    SqlCommand cmdGetFreightCodeDetails = new SqlCommand("SELECT * FROM FreightCodes " +
                                                                            "WHERE id=@FreightCodeID AND active='True' ORDER BY code", conn);

                    SqlCommand cmdGetCarrierDetails = new SqlCommand("SELECT * FROM Freight " +
                                                                     "WHERE id=@FreightID AND active='True' ORDER BY FreightName", conn);

                    SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT FreightDetails.id,FreightDetails.freight_code_id,FreightDetails.description,FreightDetails.pallets,FreightDetails.price,FreightDetails.discount,FreightDetails.total AS FreightTotal, " +
                                                                     "FreightCodes.code,FreightCodes.description,FreightCodes.unit,FreightDetails.time_stamp " +
                                                                     "FROM FreightDetails " +
                                                                     "INNER JOIN FreightCodes ON FreightDetails.freight_code_id = FreightCodes.id " +
                                                                     "WHERE FreightDetails.order_no = @SalesNo", conn);
                    
                    SqlCommand cmdGetComments = new SqlCommand("SELECT * FROM Comments WHERE no=@SalesNo AND (location_id=7 OR location_id=8)", conn);

                    SqlCommand cmdGetDiscount = new SqlCommand("SELECT Discount.id,Discount.discount,Discount.comment,Discount.updated_date,Discount.updated_by,Discount.customer_id,Category.id AS cat_id,Category.category_name,Category.category_description,Discount.time_stamp " +
                                                                "FROM Discount " +
                                                                "INNER JOIN Category ON Category.id = Discount.category_id " +
                                                                "WHERE Discount.customer_id = @CustomerID AND Discount.discount > 0 ORDER BY Category.category_name", conn);

                    SqlTransaction trans = null;
                    conn.Open();
                    trans = conn.BeginTransaction();
                    try
                    {

                        cmdGetSO.Transaction = trans;
                        cmdGetSO.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetSO.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    salesOrder.SalesOrderNo = Convert.ToInt32(dr["sales_no"]);
                                    salesOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    salesOrder.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                    if (!DBNull.Value.Equals(dr["CusID"]))
                                    {
                                        salesOrder.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["CusID"]), CompanyName = dr["company_name"].ToString(), CustomerType = dr["customer_type"].ToString() };
                                    }
                                    else
                                    {
                                        salesOrder.PrepaidCustomerName = dr["prepaid_customer_name"].ToString();
                                        salesOrder.Customer = new Customer() { CustomerId = 0, CustomerType = "Prepaid" };
                                    }
                                    salesOrder.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["StockLocationID"]), StockName = dr["stock_name"].ToString() };
                                    salesOrder.CustomerOrderNo = dr["customer_order_no"].ToString();
                                    salesOrder.DesiredDispatchDate = Convert.ToDateTime(dr["dispatch_date"]);
                                    salesOrder.OrderStatus = dr["order_status"].ToString();
                                    salesOrder.OrderPriority = Convert.ToInt16(dr["order_priority"]);
                                    salesOrder.ShipTo = dr["ship_to"].ToString();
                                    salesOrder.BillTo = dr["bill_to"].ToString();
                                    salesOrder.LastModifiedDate = Convert.ToDateTime(dr["last_modified_date"]);
                                    salesOrder.FreightCarrier = new FreightCarrier() 
                                                    { 
                                                        Id = Convert.ToInt16(dr["freight_id"]), 
                                                        FreightName = dr["FreightName"].ToString(),
                                                        FreightDescription = dr["FreightDescription"].ToString(),
                                                        Active = Convert.ToBoolean(dr["FrightActive"])
                                                    };
                                    salesOrder.TermsID = dr["terms_id"].ToString();
                                    salesOrder.PickupTime = dr["pickup_time"].ToString();
                                    salesOrder.ListPriceTotal = Convert.ToDecimal(dr["list_price_total"]);
                                    salesOrder.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                    salesOrder.FreightTotal = Convert.ToDecimal(dr["freight_total"]);
                                    salesOrder.GST = Convert.ToDecimal(dr["gst"]);
                                    salesOrder.GSTEnabled = Convert.ToBoolean(dr["gst_enabled"]);
                                    salesOrder.PaymentRecieved = Convert.ToBoolean(dr["payment_recieved"]);
                                    salesOrder.SalesMadeBy = dr["sales_made_by"].ToString();
                                    salesOrder.PaymentDueDate = Convert.ToDateTime(dr["payment_due_date"]);
                                    salesOrder.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                }
                            }
                        }

                        cmdGetSalesItems.Transaction = trans;
                        cmdGetSalesItems.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetSalesItems.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    SalesOrderDetails sod = new SalesOrderDetails();
                                    sod.SalesOrderDetailsID = Convert.ToInt16(dr["id"]);
                                    sod.OrderLine = Convert.ToInt16(dr["order_line"]);
                                    sod.LineStatus = dr["line_status"].ToString();
                                    sod.Product = new Product() { ProductID = Convert.ToInt16(dr["pID"]), ProductCode = dr["product_code"].ToString(), ProductDescription = dr["product_description"].ToString(), ProductUnit = dr["unit"].ToString(), UnitPrice = Convert.ToDecimal(dr["unit_price"]), Category = new Category() { CategoryID = Convert.ToInt16(dr["category_id"]) }, TimeStamp = Convert.ToBase64String(dr["PTimeStamp"] as byte[]) };
                                    sod.Quantity = Convert.ToDecimal(dr["qty"]);
                                    sod.Discount = Convert.ToInt16(dr["discount"]);
                                    sod.QtyInStock = Convert.ToInt16(dr["qty_reserved"]);
                                    sod.QtyToMake = Convert.ToDecimal(dr["qty_remaining"]);//Quantity remaining
                                    sod.SODTimeStamp = Convert.ToBase64String(dr["salesOrderDetailsTimeStamp"] as byte[]);
                                    sod.PSTimeStamp = Convert.ToBase64String(dr["PSRTimeStamp"] as byte[]);
                                    sod.QuoteProductDescription = dr["description"].ToString();
                                    sod.QuoteUnitPrice = Convert.ToDecimal(dr["list_price"]);
                                    salesOrder.SalesOrderDetails.Add(sod);
                                }
                            }
                        }

                        cmdGetFreightDetails.Transaction = trans;
                        cmdGetFreightDetails.Parameters.AddWithValue("@SalesNo", so.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    FreightDetails fd = new FreightDetails();
                                    fd.Pallets = Convert.ToDecimal(dr["pallets"]);
                                    fd.FreightCodeDetails = new FreightCode() { ID = Convert.ToInt32(dr["id"]), FreightCodeID = Convert.ToInt16(dr["freight_code_id"]), Code = dr["code"].ToString(), Description = dr["description"].ToString(), Unit = dr["unit"].ToString(), Price = Convert.ToDecimal(dr["price"]), FreightTotal = Convert.ToDecimal(dr["FreightTotal"]) };
                                    fd.Discount = Convert.ToInt16(dr["discount"]);
                                    fd.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    salesOrder.FreightDetails.Add(fd);
                                }
                            }
                        }

                        //Comments
                        cmdGetComments.Transaction = trans;
                        cmdGetComments.Parameters.AddWithValue("@SalesNo", salesOrder.SalesOrderNo);
                        using (SqlDataReader dr = cmdGetComments.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    salesOrder.Comments.Add(new Comment() { LocationID = Convert.ToInt16(dr["location_id"]), Note = dr["comment"].ToString(), TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]) });
                                }
                            }
                        }


                        //Customer
                        if (cusId > 0)
                        {
                            cmdGetOnlineOrderItem.Transaction = trans;
                            cmdGetOnlineOrderItem.Parameters.AddWithValue("@CusID", cusId);
                            using (SqlDataReader dr = cmdGetOnlineOrderItem.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        customer = new Customer();
                                        customer.CustomerId = Convert.ToInt16(dr["id"]);
                                        customer.CustomerType = dr["customer_type"].ToString();
                                        customer.CompanyName = dr["company_name"].ToString();
                                        customer.CompanyAddress = dr["company_address"].ToString();
                                        customer.CompanyCity = dr["company_city"].ToString();
                                        customer.CompanyState = dr["company_state"].ToString();
                                        customer.CompanyPostCode = dr["company_postcode"].ToString();
                                        customer.CompanyCountry = dr["company_country"].ToString();
                                        customer.CompanyEmail = dr["company_email"].ToString();
                                        customer.CompanyTelephone = dr["company_telephone"].ToString();
                                        customer.CompanyFax = dr["company_fax"].ToString();
                                        customer.Designation1 = dr["designation1"].ToString();
                                        customer.FirstName1 = dr["first_name1"].ToString();
                                        customer.LastName1 = dr["last_name1"].ToString();
                                        customer.Telephone1 = dr["telephone1"].ToString();
                                        customer.Mobile1 = dr["mobile1"].ToString();
                                        customer.Email1 = dr["email1"].ToString();
                                        customer.Fax1 = dr["fax1"].ToString();
                                        customer.Designation2 = dr["designation2"].ToString();
                                        customer.FirstName2 = dr["first_name2"].ToString();
                                        customer.LastName2 = dr["last_name2"].ToString();
                                        customer.Telephone2 = dr["telephone2"].ToString();
                                        customer.Mobile2 = dr["mobile2"].ToString();
                                        customer.Email2 = dr["email2"].ToString();
                                        customer.Fax2 = dr["fax2"].ToString();
                                        customer.Designation3 = dr["designation3"].ToString();
                                        customer.FirstName3 = dr["first_name3"].ToString();
                                        customer.LastName3 = dr["last_name3"].ToString();
                                        customer.Telephone3 = dr["telephone3"].ToString();
                                        customer.Mobile3 = dr["mobile3"].ToString();
                                        customer.Email3 = dr["email3"].ToString();
                                        customer.Fax3 = dr["fax3"].ToString();
                                        customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                        customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                        customer.Debt = CheckNull<decimal>(dr["debt"]);
                                        customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                        customer.ShipAddress = dr["ship_address"].ToString();
                                        customer.ShipCity = dr["ship_city"].ToString();
                                        customer.ShipState = dr["ship_state"].ToString();
                                        customer.ShipPostCode = dr["ship_postcode"].ToString();
                                        customer.ShipCountry = dr["ship_country"].ToString();
                                        customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                        customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                        customer.Active = Convert.ToBoolean(dr["active"]);
                                        customer.StopCredit = dr["stop_credit"].ToString();
                                        customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                        customer.PrimaryBusiness = new Category();
                                        customer.PrimaryBusiness.CategoryID = Convert.ToInt16(dr["primary_business"]);
                                        customer.PrimaryBusiness.CategoryName = dr["primary_business_Cat"].ToString();

                                    }
                                }
                            }

                            customer.DiscountStructure = new ObservableCollection<DiscountStructure>();
                            cmdGetDiscount.Transaction = trans;
                            cmdGetDiscount.Parameters.AddWithValue("@CustomerID", cusId);
                            using (SqlDataReader dr = cmdGetDiscount.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        DiscountStructure ds = new DiscountStructure();
                                        ds.ID = Convert.ToInt16(dr["id"]);
                                        ds.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                        ds.Category = new Category() { CategoryID = Convert.ToInt16(dr["cat_id"]), CategoryName = dr["category_name"].ToString() };
                                        ds.Comment = dr["comment"].ToString();
                                        ds.UpdatedDate = Convert.ToDateTime(dr["updated_date"]);
                                        ds.UpdatedBy = dr["updated_by"].ToString();
                                        ds.Discount = Convert.ToInt16(dr["discount"]);
                                        ds.DiscountStr = dr["category_name"].ToString() + " " + Convert.ToInt16(dr["discount"]) + "%";
                                        ds.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                        customer.DiscountStructure.Add(ds);
                                    }
                                }
                            }


                        }


                        foreach (var item in so.SalesOrderDetails)
                        {
                            cmdGetProdStock.Transaction = trans;
                            cmdGetProdStock.Parameters.AddWithValue("@Location", stockLocation);
                            cmdGetProdStock.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                            using (SqlDataReader dr = cmdGetProdStock.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        ProductStock ps = new ProductStock();
                                        ps.ID = Convert.ToInt16(dr["ProductStockID"]);
                                        ps.StockLocation = new StockLocation() { ID = Convert.ToInt16(dr["stock_location_id"]) };
                                        ps.Product = new Product()
                                        {
                                            ProductID = Convert.ToInt16(dr["id"]),
                                            Category = new Category() { CategoryID = CheckNull<int>(dr["category_id"]) },
                                            ProductType = new ProductType() { ProductTypeID = Convert.ToInt16(dr["product_type_id"]) },
                                            RawProduct = new RawProduct() { RawProductID = CheckNull<int>(dr["raw_product_id"]) },
                                            Type = CheckNull<string>(dr["type"]),
                                            CommodityCode = CheckNull<string>(dr["commodity_code"]),
                                            ProductName = dr["product_name"].ToString(),
                                            ProductCode = dr["product_code"].ToString(),
                                            ProductDescription = dr["product_description"].ToString(),
                                            ProductUnit = dr["unit"].ToString(),
                                            Size = CheckNull<string>(dr["size"]),
                                            MaterialCost = Convert.ToDecimal(dr["material_cost"]),
                                            UnitsPerPack = Convert.ToDecimal(dr["units_per_package"]),
                                            UnitCost = Convert.ToDecimal(dr["unit_cost"]),
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                            MinimumOrderQty = Convert.ToDecimal(dr["minimum_order_qty"]),
                                            OrderInMultiplesOf = Convert.ToDecimal(dr["orders_in_multiples_of"]),
                                            SafetyStockQty = Convert.ToDecimal(dr["safety_stock_qty"]),
                                            OrderPoint = Convert.ToDecimal(dr["order_point"]),
                                            IsManufactured = Convert.ToBoolean(dr["is_manufactured"]),
                                            IsPurchased = Convert.ToBoolean(dr["is_purchased"]),
                                            LastModifiedBy = CheckNull<string>(dr["last_modified_by"]),
                                            LastModifiedDate = CheckNull<DateTime>(dr["last_modified_date"]),
                                            IsRawMaterial = Convert.ToBoolean(dr["is_raw_material"]),
                                            IsAutoOrder = Convert.ToBoolean(dr["is_auto_order"]),
                                            Active = Convert.ToBoolean(dr["active"]),
                                            TimeStamp = Convert.ToBase64String(dr["prodTimeStamp"] as byte[])
                                        };
                                        ps.QtyAvailable = Convert.ToDecimal(dr["qty_available"]);
                                        ps.NetDemand = Convert.ToDecimal(dr["net_demand"]);
                                        ps.TotalSupply = Convert.ToDecimal(dr["total_supply"]);
                                        ps.ProjectedAvailable = Convert.ToDecimal(dr["projected_available"]);
                                        ps.IsEditing = Convert.ToBoolean(dr["is_editing"]);
                                        ps.EditingBy = CheckNull<string>(dr["editing_by"]);
                                        ps.LastUpdatedDate = CheckNull<DateTime>(dr["ProdStockUpdatedDate"]);
                                        ps.UpdatedBy = CheckNull<string>(dr["ProdStockUpdatedBy"]);
                                        ps.TimeStamp = Convert.ToBase64String(dr["prodStockTimeStamp"] as byte[]);
                                        productStockList.Add(ps);
                                    }
                                }
                            }
                            cmdGetProdStock.Parameters.Clear();
                        }

                        foreach (var item in so.FreightDetails)
                        {
                            cmdGetFreightCodeDetails.Transaction = trans;
                            cmdGetFreightCodeDetails.Parameters.AddWithValue("@Location", stockLocation);
                            cmdGetFreightCodeDetails.Parameters.AddWithValue("@FreightCodeID", item.FreightCodeDetails.FreightCodeID);
                            using (SqlDataReader dr = cmdGetFreightCodeDetails.ExecuteReader())
                            {
                                if (dr != null)
                                {
                                    while (dr.Read())
                                    {
                                        FreightCode fc = new FreightCode();
                                        fc.ID = Convert.ToInt16(dr["id"]);
                                        fc.FreightCodeID = Convert.ToInt16(dr["id"]);
                                        fc.Code = dr["code"].ToString();
                                        fc.Description = dr["description"].ToString();
                                        fc.Unit = dr["unit"].ToString();
                                        fc.Price = Convert.ToDecimal(dr["price"]);
                                        fc.PriceEnabled = Convert.ToInt16(dr["id"]) == 50 ? true : false;
                                        fc.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                        fc.Active = Convert.ToBoolean(dr["active"]);
                                        freightCodeList.Add(fc);
                                    }
                                }
                            }
                            cmdGetFreightCodeDetails.Parameters.Clear();
                        }

                        cmdGetCarrierDetails.Transaction = trans;
                        cmdGetCarrierDetails.Parameters.AddWithValue("@FreightID", so.FreightCarrier.Id);
                        using (SqlDataReader dr = cmdGetCarrierDetails.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    carrier.Id = Convert.ToInt16(dr["ID"]);
                                    carrier.FreightName = dr["FreightName"].ToString();
                                    //freight.FreightUnit = dr["FreightUnit"].ToString();
                                    carrier.FreightPrice = Convert.ToDecimal(dr["FreightPrice"]);
                                    carrier.FreightDescription = dr["FreightDescription"].ToString();
                                    carrier.Active = Convert.ToBoolean(dr["active"]);
                                    carrier.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                   
                                }
                            }
                        }

                        trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return Tuple.Create(customer, productStockList, freightCodeList, carrier, salesOrder);
        }

        public static int UpdateQuoteFileLocation(Quote quote)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE Quotes SET file_name = @FileName WHERE id = @QuoteNo", conn);

                conn.Open();
                try
                {

                    cmd.Parameters.AddWithValue("@FileName", quote.FileName);
                    //cmd.Parameters.AddWithValue("@FilePath", quote.FilePath);
                    cmd.Parameters.AddWithValue("@QuoteNo", quote.QuoteNo);
                    result = cmd.ExecuteNonQuery();
                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static int UpdateOrderFileLocation(NewOrderPDFM newOrderPDF)
        {
            int result = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                SqlCommand cmd = new SqlCommand("UPDATE NewOrderPDF SET file_name = @FileName WHERE id = @OrderNo", conn);

                conn.Open();
                try
                {

                    cmd.Parameters.AddWithValue("@FileName", newOrderPDF.FileName);
                    //cmd.Parameters.AddWithValue("@FilePath", quote.FilePath);
                    cmd.Parameters.AddWithValue("@OrderNo", newOrderPDF.ID);
                    result = cmd.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return result;
        }

        public static ContactPerson GetContactPersonByContactPersonID(int Id)
        {
            ContactPerson cp = new ContactPerson();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {

                    conn.Open();
                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT id,customer_id,contact_person_name, contact_phone_number1,contact_phone_number2, contact_email,active,time_stamp " +
                                                                   "FROM ContactPerson WHERE id= @ContPersonID", conn);

                    cmdGetContactPerson.Parameters.AddWithValue("@ContPersonID", Id);
                    using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                
                                cp.ContactPersonID = Convert.ToInt16(dr["id"]);
                                cp.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                cp.ContactPersonName = dr["contact_person_name"].ToString();
                                cp.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                cp.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                cp.Email = dr["contact_email"].ToString();
                                cp.Active = Convert.ToBoolean(dr["active"]);
                                cp.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading contact person details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return cp;
        }

        public static int GetContactPersonIDByQuoteNo(int Id)
        {
            int contactPersonID = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {

                    conn.Open();
                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT contact_person_id " +
                                                                   "FROM Quotes WHERE id= @QuoteNo", conn);

                    cmdGetContactPerson.Parameters.AddWithValue("@QuoteNo", Id);
                    using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                contactPersonID = Convert.ToInt16(dr["contact_person_id"]);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading contact person details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return contactPersonID;
        }

        public static int AddContactPerson(ContactPerson cp)
        {
            int res = 0;
            int id = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {


                    SqlCommand cmdCheckCustomer = new SqlCommand("SELECT  * FROM ContactPerson WHERE LOWER(contact_person_name) =@ContactPersonName AND customer_id=@CustomerID", conn);

                    SqlCommand cmdInsertContactPerson = new SqlCommand("INSERT INTO ContactPerson(customer_id,contact_person_name,contact_phone_number1,contact_phone_number2,contact_email,updated_by,updated_datetime,active) " +
                                                                       "VALUES (@CustomerID,@ContactPersonName,@ContactPhoneNumber1,@ContactPhoneNumber2,@ContactEmail,@UpdatedBy,@UpdatedDateTime,@Active)", conn);

                    

                    cmdCheckCustomer.Transaction = trans;
                    cmdCheckCustomer.Parameters.AddWithValue("@CustomerID", cp.CustomerID);
                    cmdCheckCustomer.Parameters.AddWithValue("@ContactPersonName", cp.ContactPersonName.ToLower());
                    using (SqlDataReader dr = cmdCheckCustomer.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                id = Convert.ToInt16(dr["id"]);
                            }
                        }
                    }
                    if (id > 0)
                    {
                        res = -1;
                    }
                    else
                    {

                        cmdInsertContactPerson.Transaction = trans;
                        cmdInsertContactPerson.Parameters.AddWithValue("@CustomerID", cp.CustomerID);
                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPersonName", cp.ContactPersonName);
                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPhoneNumber1", cp.PhoneNumber1);
                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactPhoneNumber2", cp.PhoneNumber2);
                        cmdInsertContactPerson.Parameters.AddWithValue("@ContactEmail", cp.Email);
                        cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdInsertContactPerson.Parameters.AddWithValue("@UpdatedDateTime", DateTime.Now);
                        cmdInsertContactPerson.Parameters.AddWithValue("@Active", true);
                        res = cmdInsertContactPerson.ExecuteNonQuery();
                    }
                    trans.Commit();
                    
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return res;
        }
        

        public static int UpdateContactPerson(ContactPerson cp)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                conn.Open();
                
                try
                {
                    SqlCommand cmdUpdateContactPerson = new SqlCommand("UPDATE ContactPerson SET contact_person_name = @ContactPersonName, contact_phone_number1=@ContactPhoneNumber1, contact_phone_number2=@ContactPhoneNumber2, contact_email=@ContactEmail, active=@Active, updated_by=@UpdatedBy, updated_datetime=@UpdatedDateTime " +
                                                                       "WHERE id = @ID AND customer_id=@CustomerID AND (contact_person_name <> @ContactPersonName OR contact_phone_number1 <> @ContactPhoneNumber1 OR contact_phone_number2 <> @ContactPhoneNumber2 OR contact_email <> @ContactEmail OR active <> @Active)", conn);

                    cmdUpdateContactPerson.Parameters.AddWithValue("@ID", cp.ContactPersonID);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@CustomerID", cp.CustomerID);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPersonName", cp.ContactPersonName);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPhoneNumber1", cp.PhoneNumber1);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactPhoneNumber2", cp.PhoneNumber2);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@ContactEmail", cp.Email);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@Active", cp.Active);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@UpdatedBy", UserData.FirstName + " " + UserData.LastName);
                    cmdUpdateContactPerson.Parameters.AddWithValue("@UpdatedDateTime", DateTime.Now);
                    res = cmdUpdateContactPerson.ExecuteNonQuery();
                
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return res;
        }


        public static Tuple<List<Product>, FreightDetails> GetProductByProductNo(ObservableCollection<QuoteDetails> qdList, BindingList<FreightDetails> fdList)
        {
            List<Product> prodList = new List<Product>();
            FreightDetails fd = new FreightDetails();
            fd.FreightCodeDetails = new FreightCode();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT * FROM Products WHERE id= @ProductID", conn);
                    SqlCommand cmdGetFreightDetails = new SqlCommand("SELECT * FROM FreightCodes WHERE id= @FreightCodeID", conn);


                    foreach (var item in qdList)
                    {
                        cmdGetContactPerson.Parameters.AddWithValue("@ProductID", item.Product.ProductID);
                        using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Product p = new Product();
                                    p.ProductID = Convert.ToInt16(dr["id"]);
                                    p.ProductCode = dr["product_code"].ToString();
                                    p.ProductDescription = dr["product_description"].ToString();
                                    p.ProductUnit = dr["unit"].ToString();
                                    p.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                    prodList.Add(p);
                                }
                            }
                        }
                        cmdGetContactPerson.Parameters.Clear();
                    }


                    cmdGetFreightDetails.Parameters.AddWithValue("@FreightCodeID", fdList[0].FreightCodeDetails.ID);
                    using (SqlDataReader dr = cmdGetFreightDetails.ExecuteReader())
                    {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {                                    
                                    fd.FreightCodeDetails.ID = Convert.ToInt16(dr["id"]);
                                    fd.FreightCodeDetails.Price = Convert.ToDecimal(dr["price"]);
                                }
                            }
                   }                       
                   
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error in Products or FreightCode details : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return Tuple.Create(prodList,fd);
        }

        public static bool CheckRecordExist(Int64 id, string table)
        {
            bool exist = false;
            
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    if (table == "SalesOrder")
                    {                   
                        SqlCommand cmdGetContactPerson = new SqlCommand("SELECT COUNT(*) FROM SalesOrder WHERE sales_no= @SalesNo", conn);
                        
                        cmdGetContactPerson.Parameters.AddWithValue("@SalesNo", id);
                        exist = (int)cmdGetContactPerson.ExecuteScalar() > 0 ? true : false;
                    }
                    else if (table == "Quote")
                    {
                        SqlCommand cmdCheckQuote = new SqlCommand("SELECT COUNT(*) FROM Quotes WHERE id= @QuoteNo", conn);

                        cmdCheckQuote.Parameters.AddWithValue("@QuoteNo", id);
                        exist = (int)cmdCheckQuote.ExecuteScalar() > 0 ? true : false;
                    }
                    else if (table == "Online")
                    {
                        SqlCommand cmdCheckQuote = new SqlCommand("SELECT COUNT(*) FROM OnlineOrders WHERE order_no= @OrderNo", conn);

                        cmdCheckQuote.Parameters.AddWithValue("@OrderNo", id);
                        exist = (int)cmdCheckQuote.ExecuteScalar() > 0 ? true : false;
                    }
                    else if (table == "NewOrderPDF")
                    {
                        SqlCommand cmdCheckQuote = new SqlCommand("SELECT COUNT(*) FROM NewOrderPDF WHERE id= @ID", conn);

                        cmdCheckQuote.Parameters.AddWithValue("@ID", id);
                        exist = (int)cmdCheckQuote.ExecuteScalar() > 0 ? true : false;
                    }
                    else if (table == "QuoteSentToAdmin")
                    {
                        SqlCommand cmdCheckQuote = new SqlCommand("SELECT COUNT(*) FROM Quotes WHERE id= @ID AND sent_to_pending_sale='True'", conn);

                        cmdCheckQuote.Parameters.AddWithValue("@ID", id);
                        exist = (int)cmdCheckQuote.ExecuteScalar() > 0 ? true : false;
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error in Products or FreightCode details : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return exist;

        }


        public static CusAndPrePaid<long, string, string> GetCustomerAndPrepaidCusName(int cusId, Int64 salesNo)
        {
            CusAndPrePaid<long, string, string> cus = new CusAndPrePaid<long, string, string>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    SqlCommand cmdGetCustomerName = new SqlCommand("SELECT company_name FROM Customers WHERE id= @CusID", conn);
                    SqlCommand cmdGetPrePaidCustomerName = new SqlCommand("SELECT prepaid_customer_name FROM PrePaidCustomers WHERE sales_no= @SalesNo", conn);


                    if (cusId > 0)
                    {
                        cmdGetCustomerName.Parameters.AddWithValue("@CusID", cusId);
                        using (SqlDataReader dr = cmdGetCustomerName.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    cus.CusID = cusId;
                                    cus.Name = dr["company_name"].ToString();
                                    cus.CusType = "InDB";
                                }
                            }
                        }

                    }
                    else
                    {
                        cmdGetPrePaidCustomerName.Parameters.AddWithValue("@SalesNo", salesNo);
                        using (SqlDataReader dr = cmdGetPrePaidCustomerName.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    cus.CusID = salesNo;
                                    cus.Name = dr["prepaid_customer_name"].ToString();
                                    cus.CusType = "NotInDB";
                                }
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error in Products or FreightCode details : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return cus;
        }

        public static ObservableCollection<OnlineOrder> GetAllOnlineOrders()
        {
            ObservableCollection<OnlineOrder> onlineOrders = new ObservableCollection<OnlineOrder>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    SqlCommand cmdGetOnlineOrders = new SqlCommand("SELECT OnlineOrders.order_no,OnlineOrders.order_ref_no,OnlineOrders.user_id,OnlineOrders.user_nicename,OnlineOrders.user_email, " +
                                                                   "OnlineOrders.display_name,OnlineOrders.user_business_name,OnlineOrders.job_name,OnlineOrders.order_placed_by,OnlineOrders.gst,OnlineOrders.delivery_contact_no, " +
                                                                   "OnlineOrders.sub_total,OnlineOrders.less_discount,OnlineOrders.total_amount,OnlineOrders.is_length_required,OnlineOrders.lengths,OnlineOrders.delivery_comments, " +
                                                                   "OnlineOrders.delivery_method,OnlineOrders.collect_option,OnlineOrders.collect_date,OnlineOrders.order_time_stamp,OnlineOrders.collect_comments,"+
                                                                   "OnlineOrders.delivery_address,OnlineOrders.delivery_state,OnlineOrders.delivery_post_code,OnlineOrders.is_order_cancelled,OnlineOrders.active,OnlineOrders.is_dispatched " +
                                                                   "FROM dbo.OnlineOrders WHERE OnlineOrders.active='True'", conn);



                    using (SqlDataReader dr = cmdGetOnlineOrders.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    OnlineOrder ps = new OnlineOrder();
                                    ps.OnlineOrderNo = Convert.ToInt32(dr["order_no"]);
                                    ps.OnlineOrderCustomer = new OnlineOrderCustomer() { CustomerId = Convert.ToInt16(dr["user_id"]), UserNiceName = dr["user_nicename"].ToString(), UserEmail = dr["user_email"].ToString(), DisplayName = dr["display_name"].ToString(), CompanyName = dr["user_business_name"].ToString() };
                                    ps.OrderRefNo = dr["order_ref_no"].ToString();
                                    ps.JobName = dr["job_name"].ToString();
                                    ps.OrderPlacedBy = dr["order_placed_by"].ToString();
                                    ps.TotalAmount = Convert.ToDouble(dr["total_amount"]);
                                    ps.CollectOption = dr["collect_option"].ToString();
                                    ps.CollectDate = dr["collect_date"].ToString();
                                    ps.DeliveryContactNo = dr["delivery_contact_no"].ToString();
                                    ps.OrderTimeStamp = Convert.ToDateTime(dr["order_time_stamp"]);
                                    ps.DeliveryMethod = dr["delivery_method"].ToString();
                                    ps.CollectComments = dr["collect_comments"].ToString();
                                    ps.DeliveryAddress = dr["delivery_address"].ToString();
                                    ps.DeliveryState = dr["delivery_state"].ToString();
                                    ps.DeliveryPostCode = dr["delivery_post_code"].ToString();
                                    ps.Dispatched = Convert.ToBoolean(dr["is_dispatched"]);
                                    ps.OrderCancelled = Convert.ToBoolean(dr["active"]);
                                    ps.DeliveryComments = dr["delivery_comments"].ToString();
                                    //ps.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    ps.Active = Convert.ToBoolean(dr["active"]);
                                    onlineOrders.Add(ps);
                                }
                            }
                        }
                   

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error in Products or FreightCode details : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return onlineOrders;
        }

        public static int DeleteOnlineOrder(int orderNo)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdDeleteOnlineOrder = new SqlCommand("DELETE FROM OnlineOrders WHERE order_no=@OrderNo", conn);
                SqlCommand cmdDeleteOnlineOrderItem = new SqlCommand("DELETE FROM OnlineOrderItems WHERE order_no=@OrderNo", conn);  
                conn.Open();

                try
                {
                    cmdDeleteOnlineOrder.Parameters.AddWithValue("@OrderNo", orderNo);
                    int a = cmdDeleteOnlineOrder.ExecuteNonQuery();

                    cmdDeleteOnlineOrderItem.Parameters.AddWithValue("@OrderNo", orderNo);
                    int b = cmdDeleteOnlineOrderItem.ExecuteNonQuery();

                   if(a > 0 && b > 0)
                   {
                       result = 1;
                   }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Deleting quote" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int DeletePendingQuote(int orderNo)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdDeleteOnlineOrder = new SqlCommand("DELETE FROM Quotes WHERE id=@QuoteNo", conn);
                SqlCommand cmdDeleteOnlineOrderItem = new SqlCommand("DELETE FROM QuoteDetails WHERE quote_no=@QuoteNo", conn);
                conn.Open();

                try
                {
                    cmdDeleteOnlineOrder.Parameters.AddWithValue("@QuoteNo", orderNo);
                    int a = cmdDeleteOnlineOrder.ExecuteNonQuery();

                    cmdDeleteOnlineOrderItem.Parameters.AddWithValue("@QuoteNo", orderNo);
                    int b = cmdDeleteOnlineOrderItem.ExecuteNonQuery();

                    if (a > 0 && b > 0)
                    {
                        result = 1;
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Deleting quote" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static int SendtoPendingSale(PendingQuote pq)
        {
            int res = 0;

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                conn.Open();

                try
                {
                    SqlCommand cmdUpdateQuote = new SqlCommand("UPDATE Quotes SET sent_to_pending_sale = @SentToPendingSale, sent_to_pending_sale_by=@SentToPendingSaleBy, sent_to_pending_sale_date=@SentToPendingSaleDate, pending_sale_to_sale=@PendingSaleToSale " +
                                                               "WHERE id = @QuoteNo", conn);

                    cmdUpdateQuote.Parameters.AddWithValue("@QuoteNo", pq.QuoteNo);
                    cmdUpdateQuote.Parameters.AddWithValue("@SentToPendingSale", pq.SentToPendingSale);
                    cmdUpdateQuote.Parameters.AddWithValue("@SentToPendingSaleBy", pq.SentToPendingSaleBy.FullName);
                    cmdUpdateQuote.Parameters.AddWithValue("@SentToPendingSaleDate", pq.SentToPendingSaleDate);
                    cmdUpdateQuote.Parameters.AddWithValue("@PendingSaleToSale", pq.PendingSaleToSale);
                    res = cmdUpdateQuote.ExecuteNonQuery();

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return res;
        }

        public static ObservableCollection<PendingQuote> GetPendingQuotesToSale()
        {
            ObservableCollection<PendingQuote> quoteList = new ObservableCollection<PendingQuote>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    using (SqlCommand cmdGetQuotes = new SqlCommand("SELECT Quotes.id As QuoteNo,Quotes.customer_id,Quotes.project_name,Quotes.quote_date,Quotes.list_price_total,Quotes.discounted_total,Quotes.freight_total,Quotes.gst,Quotes.total_amount,Quotes.rep_id,Users.FirstName,Users.LastName,Quotes.instructions,Quotes.internal_comments,Quotes.last_updated_id,Quotes.last_updated_date,Quotes.time_stamp,Quotes.file_name,Quotes.sent_to_pending_sale_by,Quotes.sent_to_pending_sale_date, " +
                                                                    "ISNULL(Customers.company_name,'') AS company_name,Quotes.ship_address,Quotes.ship_city,Quotes.ship_country,Quotes.ship_postcode,Quotes.ship_state, " +
                                                                    "ISNULL(PrePaidCustomers.prepaid_customer_name,'') AS prepaid_customer_name " +
                                                                    "FROM Quotes " +
                                                                    "LEFT JOIN Customers ON Quotes.customer_id = Customers.id " +
                                                                    "LEFT JOIN PrePaidCustomers ON Quotes.id = PrePaidCustomers.quote_no " +
                                                                    "INNER JOIN Users ON Quotes.rep_id = Users.ID " +
                                                                    "WHERE Quotes.sent_to_pending_sale='True' AND pending_sale_to_sale='False' " +
                                                                    "ORDER BY Quotes.quote_date DESC", conn))
                    {
                        //cmdGetQuotes.Parameters.AddWithValue("@UserID", UserID);
                        using (SqlDataReader dr = cmdGetQuotes.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    PendingQuote q = new PendingQuote();
                                    q.QuoteNo = Convert.ToInt32(dr["QuoteNo"]);
                                    q.ProjectName = dr["project_name"].ToString();
                                    q.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"]), CompanyName = Convert.ToInt16(dr["customer_id"]) == 0 ? dr["prepaid_customer_name"].ToString() : dr["company_name"].ToString() };
                                    q.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                    q.ListPriceTotal = CheckNull<decimal>(dr["list_price_total"]);
                                    q.DiscountedTotal = CheckNull<decimal>(dr["discounted_total"]);
                                    q.FreightTotal = CheckNull<decimal>(dr["freight_total"]);
                                    q.Gst = CheckNull<decimal>(dr["gst"]);
                                    q.TotalAmount = CheckNull<decimal>(dr["total_amount"]);
                                    q.User = new User() { ID = Convert.ToInt16(dr["rep_id"]), FirstName = dr["FirstName"].ToString(), LastName = dr["LastName"].ToString(), FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString() };
                                    q.FileName = CheckNull<string>(dr["file_name"]);
                                    q.SentToPendingSaleBy = new User() { FullName = dr["sent_to_pending_sale_by"].ToString() };
                                    q.SentToPendingSaleDate = CheckNull<DateTime>(dr["sent_to_pending_sale_date"]);
                                    quoteList.Add(q);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return quoteList;
        }


        public static List<ContactPerson> GetContactPersonByCustomerID(int Id)
        {
            List<ContactPerson> contactPersonList = new List<ContactPerson>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT id,customer_id,contact_person_name, contact_phone_number1,contact_phone_number2, contact_email,active,time_stamp " +
                                                                    "FROM ContactPerson WHERE active='True' AND customer_id=@CustomerID ORDER BY customer_id", conn);


                    cmdGetContactPerson.Parameters.AddWithValue("@CustomerID", Id);
                    using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    ContactPerson cp = new ContactPerson();
                                    cp.ContactPersonID = Convert.ToInt16(dr["id"]);
                                    cp.CustomerID = Convert.ToInt16(dr["customer_id"]);
                                    cp.ContactPersonName = dr["contact_person_name"].ToString();
                                    //cp.PhoneNumber1 = String.IsNullOrWhiteSpace(dr["contact_phone_number1"].ToString()) ? "Not Available" : dr["contact_phone_number1"].ToString();
                                    //cp.PhoneNumber2 = String.IsNullOrWhiteSpace(dr["contact_phone_number2"].ToString()) ? "Not Available" : dr["contact_phone_number2"].ToString();
                                    cp.PhoneNumber1 = dr["contact_phone_number1"].ToString();
                                    cp.PhoneNumber2 = dr["contact_phone_number2"].ToString();
                                    cp.Email = dr["contact_email"].ToString();
                                    cp.Active = Convert.ToBoolean(dr["active"]);
                                    cp.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    contactPersonList.Add(cp);
                                }
                            }
                        }
                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            
            
            return contactPersonList;
        }


        public static List<Quote> SearchQuoteByParameters()
        {
            List<Quote> quoteList = new List<Quote>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetContactPerson = new SqlCommand("sp_FindStringInTable", conn);
                    cmdGetContactPerson.CommandType = CommandType.StoredProcedure;
                    cmdGetContactPerson.Parameters.AddWithValue("@stringToFind", "%No%");
                    cmdGetContactPerson.Parameters.AddWithValue("@table", "Quotes");

                    using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {

                                Quote q = new Quote();
                                q.QuoteNo = Convert.ToInt32(dr["id"]);
                                q.ProjectName = dr["project_name"].ToString();
                                q.Customer = new Customer() { CustomerId = Convert.ToInt16(dr["customer_id"])};
                                q.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                q.ListPriceTotal = CheckNull<decimal>(dr["list_price_total"]);
                                q.DiscountedTotal = CheckNull<decimal>(dr["discounted_total"]);
                                q.FreightTotal = CheckNull<decimal>(dr["freight_total"]);
                                q.Gst = CheckNull<decimal>(dr["gst"]);
                                q.TotalAmount = CheckNull<decimal>(dr["total_amount"]);
                                q.User = new User() { ID = Convert.ToInt16(dr["rep_id"]) };
                                q.FileName = CheckNull<string>(dr["file_name"]);
                                //q.FilePath = CheckNull<string>(dr["file_path"]);
                                quoteList.Add(q);
                            }
                        }
                        
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return quoteList;
            
        }

        public static string GetCustomerLatestDateTime(int Id)
        {
            List<Tuple<DateTime, string>> dateTimeList = new List<Tuple<DateTime, string>>();
            string dateTimeString = string.Empty;
          
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetCustomerDateTime = new SqlCommand("SELECT last_updated_datetime,last_updated_by FROM Customers WHERE id=@CustomerID", conn);

                    SqlCommand cmdGetContactPersonDateTime = new SqlCommand("SELECT TOP 1 updated_datetime, updated_by FROM ContactPerson WHERE customer_id = @CustomerID " + 
                                                                            "ORDER BY updated_datetime DESC", conn);

                    SqlCommand cmdGetDiscountDateTime = new SqlCommand("SELECT TOP 1 updated_date, updated_by FROM Discount WHERE customer_id = @CustomerID ORDER BY updated_date DESC", conn);

                    SqlCommand cmdGetCustomerNoteDateTime = new SqlCommand("SELECT TOP 1 date_time,created_by FROM CustomerNotes WHERE customer_id = @CustomerID ORDER BY date_time DESC", conn);

                    cmdGetCustomerDateTime.Parameters.AddWithValue("@CustomerID", Id);
                    using (SqlDataReader dr = cmdGetCustomerDateTime.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                dateTimeList.Add(Tuple.Create(CheckNull<DateTime>(dr["last_updated_datetime"]), dr["last_updated_by"].ToString()));                                
                            }
                        }
                    }

                    cmdGetContactPersonDateTime.Parameters.AddWithValue("@CustomerID", Id);
                    using (SqlDataReader dr = cmdGetContactPersonDateTime.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                dateTimeList.Add(Tuple.Create(CheckNull<DateTime>(dr["updated_datetime"]), dr["updated_by"].ToString()));
                            }
                        }
                    }

                    cmdGetDiscountDateTime.Parameters.AddWithValue("@CustomerID", Id);
                    using (SqlDataReader dr = cmdGetDiscountDateTime.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                dateTimeList.Add(Tuple.Create(CheckNull<DateTime>(dr["updated_date"]), dr["updated_by"].ToString()));
                            }
                        }
                    }

                    cmdGetCustomerNoteDateTime.Parameters.AddWithValue("@CustomerID", Id);
                    using (SqlDataReader dr = cmdGetCustomerNoteDateTime.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                dateTimeList.Add(Tuple.Create(CheckNull<DateTime>(dr["date_time"]), dr["created_by"].ToString()));
                            }
                        }
                    }

                    dateTimeList.RemoveAll(x => x.Item1 == DateTime.MinValue);

                    if (dateTimeList.Count > 0)
                    {
                        List<Tuple<DateTime,string>> sorted = dateTimeList.OrderByDescending(x=>x.Item1).ToList();

                        dateTimeString = sorted[0].Item2 + " at " + sorted[0].Item1;
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }



            return dateTimeString;
        }

        public static int DeleteContactPersonById(ContactPerson contactPerson)
        {
            int result = 0;
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {

                SqlCommand cmdDeleteQuote = new SqlCommand("DELETE FROM ContactPerson WHERE id=@ID", conn);

                SqlCommand cmdUpdateCustomerDateTime = new SqlCommand("UPDATE Customers SET last_updated_by = @LastUpdatedBy,last_updated_datetime= @LastUpdatedDatetime " +
                                                                      "WHERE id = @CustomerID", conn);

                SqlTransaction trans = null;
                conn.Open();
                trans = conn.BeginTransaction();

                try
                {
                    cmdDeleteQuote.Transaction = trans;
                    cmdDeleteQuote.Parameters.AddWithValue("@ID", contactPerson.ContactPersonID);
                    result = cmdDeleteQuote.ExecuteNonQuery();        
                    if(result > 0)
                    {
                        cmdUpdateCustomerDateTime.Transaction = trans;
                        cmdUpdateCustomerDateTime.Parameters.AddWithValue("@CustomerID", contactPerson.CustomerID);
                        cmdUpdateCustomerDateTime.Parameters.AddWithValue("@LastUpdatedBy", UserData.FirstName + " " + UserData.LastName);
                        cmdUpdateCustomerDateTime.Parameters.AddWithValue("@LastUpdatedDatetime", DateTime.Now);
                        cmdUpdateCustomerDateTime.ExecuteNonQuery();
                    }


                    trans.Commit();
                }
                catch (Exception e)
                {
                    trans.Rollback();
                    Debug.WriteLine("SQL DELETE COMMAND ERROR OCCURED :  Deleting quote" + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return result;
        }

        public static List<string> GetListOfContactPersonNames()
        {
            List<string> contactPersonList = new List<string>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetContactPerson = new SqlCommand("SELECT DISTINCT contact_person_name FROM ContactPerson " +
                                                                    "ORDER BY contact_person_name", conn);


                    using (SqlDataReader dr = cmdGetContactPerson.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {                                
                                contactPersonList.Add(dr["contact_person_name"].ToString());
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return contactPersonList;
        }

        public static ObservableCollection<OrdersNotInvoiced> GetListOfOrdersCompletedNotInvoiced(string state)
        {
            ObservableCollection<OrdersNotInvoiced> OrdersNotInvoicedList = new ObservableCollection<OrdersNotInvoiced>();

            if (state.Equals("QLD"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SHIPPER.SALES_ID, SALES_SHIPPER.ID, SALES_SHIPPER.ORDER_DATE, SALES_SHIPPER.SHIPPED_DATE, SALES_SHIPPER.NAME, SALES_SHIPPER.SHIPPER_STATUS, SALES_SHIPPER.SHIPPER_TYPE, " +
                                                                            "SALES_ORDER_LINE.PART_ID, SALES_ORDER_LINE.DESCRIPTION, SALES_ORDER_LINE.ORDER_QTY, SALES_ORDER_LINE.SELLING_UM, INVENTORY_PART.UNIT_MAT_COST AS UNIT_COST, " +
                                                                            "SALES_ORDER_LINE.ORDER_QTY * INVENTORY_PART.UNIT_MAT_COST AS VALUE " +
                                                                            "FROM SALES_SHIPPER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SHIPPER.SALES_ID = SALES_ORDER_LINE.SALES_ID INNER JOIN " +
                                                                            "INVENTORY_PART ON SALES_ORDER_LINE.PART_ID = INVENTORY_PART.ID " +
                                                                            "WHERE(SALES_SHIPPER.INVOICE_ID IS NULL) AND(SALES_SHIPPER.SHIPPER_TYPE = 'Shipment') AND(SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')  " +
                                                                            "ORDER BY SALES_SHIPPER.SHIPPED_DATE", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    OrdersNotInvoiced oni = new OrdersNotInvoiced();
                                    oni.SalesID = dr["SALES_ID"].ToString();
                                    oni.ShipperID = dr["ID"].ToString();
                                    oni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    oni.ShippedDate = Convert.ToDateTime(dr["SHIPPED_DATE"]);
                                    oni.Name = dr["NAME"].ToString();
                                    oni.ShipperStatus = dr["SHIPPER_STATUS"].ToString();
                                    oni.ShipperType = dr["SHIPPER_TYPE"].ToString();
                                    oni.PartID = dr["PART_ID"].ToString();
                                    oni.Description = dr["DESCRIPTION"].ToString();
                                    oni.OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]);
                                    oni.Unit = dr["SELLING_UM"].ToString();
                                    oni.UnitCost = Convert.ToDecimal(dr["UNIT_COST"]);
                                    oni.Total = Convert.ToDecimal(dr["VALUE"]);
                                    OrdersNotInvoicedList.Add(oni);
                                }
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

            }
            else if (state.Equals("NSW"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSNSWString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SHIPPER.SALES_ID, SALES_SHIPPER.ID, SALES_SHIPPER.ORDER_DATE, SALES_SHIPPER.SHIPPED_DATE, SALES_SHIPPER.NAME, SALES_SHIPPER.SHIPPER_STATUS, SALES_SHIPPER.SHIPPER_TYPE, " +
                                                                            "SALES_ORDER_LINE.PART_ID, SALES_ORDER_LINE.DESCRIPTION, SALES_ORDER_LINE.ORDER_QTY, SALES_ORDER_LINE.SELLING_UM, INVENTORY_PART.UNIT_MAT_COST AS UNIT_COST, " +
                                                                            "SALES_ORDER_LINE.ORDER_QTY * INVENTORY_PART.UNIT_MAT_COST AS VALUE " +
                                                                            "FROM SALES_SHIPPER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SHIPPER.SALES_ID = SALES_ORDER_LINE.SALES_ID INNER JOIN " +
                                                                            "INVENTORY_PART ON SALES_ORDER_LINE.PART_ID = INVENTORY_PART.ID " +
                                                                            "WHERE(SALES_SHIPPER.INVOICE_ID IS NULL) AND(SALES_SHIPPER.SHIPPER_TYPE = 'Shipment') AND(SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')  " +
                                                                            "ORDER BY SALES_SHIPPER.SHIPPED_DATE", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    OrdersNotInvoiced oni = new OrdersNotInvoiced();
                                    oni.SalesID = dr["SALES_ID"].ToString();
                                    oni.ShipperID = dr["ID"].ToString();
                                    oni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    oni.ShippedDate = Convert.ToDateTime(dr["SHIPPED_DATE"]);
                                    oni.Name = dr["NAME"].ToString();
                                    oni.ShipperStatus = dr["SHIPPER_STATUS"].ToString();
                                    oni.ShipperType = dr["SHIPPER_TYPE"].ToString();
                                    oni.PartID = dr["PART_ID"].ToString();
                                    oni.Description = dr["DESCRIPTION"].ToString();
                                    oni.OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]);
                                    oni.Unit = dr["SELLING_UM"].ToString();
                                    oni.UnitCost = Convert.ToDecimal(dr["UNIT_COST"]);
                                    oni.Total = Convert.ToDecimal(dr["VALUE"]);
                                    OrdersNotInvoicedList.Add(oni);
                                }
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            else if (state.Equals("VIC"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSVICString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SHIPPER.SALES_ID, SALES_SHIPPER.ID, SALES_SHIPPER.ORDER_DATE, SALES_SHIPPER.SHIPPED_DATE, SALES_SHIPPER.NAME, SALES_SHIPPER.SHIPPER_STATUS, SALES_SHIPPER.SHIPPER_TYPE, " +
                                                                            "SALES_ORDER_LINE.PART_ID, SALES_ORDER_LINE.DESCRIPTION, SALES_ORDER_LINE.ORDER_QTY, SALES_ORDER_LINE.SELLING_UM, INVENTORY_PART.UNIT_MAT_COST AS UNIT_COST, " +
                                                                            "SALES_ORDER_LINE.ORDER_QTY * INVENTORY_PART.UNIT_MAT_COST AS VALUE " +
                                                                            "FROM SALES_SHIPPER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SHIPPER.SALES_ID = SALES_ORDER_LINE.SALES_ID INNER JOIN " +
                                                                            "INVENTORY_PART ON SALES_ORDER_LINE.PART_ID = INVENTORY_PART.ID " +
                                                                            "WHERE(SALES_SHIPPER.INVOICE_ID IS NULL) AND(SALES_SHIPPER.SHIPPER_TYPE = 'Shipment') AND(SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')  " +
                                                                            "ORDER BY SALES_SHIPPER.SHIPPED_DATE", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    OrdersNotInvoiced oni = new OrdersNotInvoiced();
                                    oni.SalesID = dr["SALES_ID"].ToString();
                                    oni.ShipperID = dr["ID"].ToString();
                                    oni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    oni.ShippedDate = Convert.ToDateTime(dr["SHIPPED_DATE"]);
                                    oni.Name = dr["NAME"].ToString();
                                    oni.ShipperStatus = dr["SHIPPER_STATUS"].ToString();
                                    oni.ShipperType = dr["SHIPPER_TYPE"].ToString();
                                    oni.PartID = dr["PART_ID"].ToString();
                                    oni.Description = dr["DESCRIPTION"].ToString();
                                    oni.OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]);
                                    oni.Unit = dr["SELLING_UM"].ToString();
                                    oni.UnitCost = Convert.ToDecimal(dr["UNIT_COST"]);
                                    oni.Total = Convert.ToDecimal(dr["VALUE"]);
                                    OrdersNotInvoicedList.Add(oni);
                                }
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            return OrdersNotInvoicedList;
        }

        public static List<Quote> GetNoOfQuotesIssuedPerMonth(DateTime date)
        {
            List <Quote> quoteList = new List<Quote>();
            string startDate = date.AddMonths(-1).ToString("yyyy-MM-dd");
            string endDate = date.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetNoOfQuotes = new SqlCommand("SELECT id,quote_date FROM Quotes " +
                                                                 "WHERE CONVERT(date,quote_date) >= @StartDate AND CONVERT(date,quote_date) <= @EndDate AND Quotes.id NOT IN (SELECT quote_no FROM  NewOrderPDF)", conn);

                    cmdGetNoOfQuotes.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetNoOfQuotes.Parameters.AddWithValue("@EndDate", endDate);
                    using (SqlDataReader dr = cmdGetNoOfQuotes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Quote q = new Quote();
                                q.QuoteNo = Convert.ToInt32(dr["id"]);
                                q.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                quoteList.Add(q);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return quoteList;
        }

        public static List<NewOrderPDFM> GetConvertedQuotesByDate(DateTime date)
        {
            List<NewOrderPDFM> newOrderPDFList = new List<NewOrderPDFM>();
            string startDate = date.AddMonths(-1).ToString("yyyy-MM-dd");
            string endDate = date.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetNoOfQuotes = new SqlCommand("SELECT quote_no,new_order_date FROM NewOrderPDF " +
                                                                 "WHERE quote_no > 0 AND CONVERT(date,new_order_date) >= @StartDate AND CONVERT(date,new_order_date) <= @EndDate", conn);

                    cmdGetNoOfQuotes.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetNoOfQuotes.Parameters.AddWithValue("@EndDate", endDate);
                    using (SqlDataReader dr = cmdGetNoOfQuotes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                NewOrderPDFM nopdf = new NewOrderPDFM();
                                nopdf.QuoteNo = Convert.ToInt32(dr["quote_no"]);
                                nopdf.QuoteDate = Convert.ToDateTime(dr["new_order_date"]);
                                newOrderPDFList.Add(nopdf);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return newOrderPDFList;
        }

        public static ObservableCollection<OpenQuotes> GetAllOpenQuotes(DateTime date)
        {
            ObservableCollection<OpenQuotes> openQuoteList = new ObservableCollection<OpenQuotes>();
            string startDate = date.AddMonths(-1).ToString("yyyy-MM-dd");
            string endDate = date.ToString("yyyy-MM-dd");

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetNoOfQuotes = new SqlCommand("SELECT Quotes.id,Quotes.quote_date,ISNULL(Customers.company_name,'') as company_name, ISNULL(PrePaidCustomers.prepaid_customer_name,'') as prepaid_customer, " +
                                                                 "Quotes.project_name, Quotes.total_amount, ISNULL(ContactPerson.contact_person_name, '') as contact_person_name, ISNULL(ContactPerson.contact_phone_number1, '') as contact_phone_number1, " +
                                                                 "ISNULL(ContactPerson.contact_phone_number2, '') as contact_phone_number2, ISNULL(ContactPerson.contact_email, '') as contact_email, " +
                                                                 "QuoteDetails.qty, QuoteDetails.description, QuoteDetails.total, " +
                                                                 "ISNULL(PrepaidCustomerContactPersonDetails.contact_person_name,'') as contact_person_namePre,ISNULL(PrepaidCustomerContactPersonDetails.contact_phone_number1,'') as contact_phone_number1Pre,ISNULL(PrepaidCustomerContactPersonDetails.contact_phone_number2,'') as contact_phone_number2Pre,ISNULL(PrepaidCustomerContactPersonDetails.contact_email,'') as contact_emailPre, " +
                                                                 "Quotes.rep_id,Users.FirstName,Users.LastName,Quotes.total_amount " + 
                                                                 "FROM Quotes " +
                                                                 "LEFT JOIN Customers ON Quotes.customer_id = Customers.id " +
                                                                 "LEFT JOIN PrePaidCustomers ON Quotes.id = PrePaidCustomers.quote_no " +
                                                                 "LEFT JOIN ContactPerson ON Quotes.contact_person_id = ContactPerson.id " +
                                                                 "LEFT JOIN PrepaidCustomerContactPersonDetails ON Quotes.id = PrepaidCustomerContactPersonDetails.quote_no " +
                                                                 "INNER JOIN QuoteDetails ON Quotes.id = QuoteDetails.quote_no " +
                                                                 "INNER JOIN Users ON Quotes.rep_id = Users.ID "+
                                                                 "WHERE CONVERT(date,Quotes.quote_date) >= @StartDate AND CONVERT(date,Quotes.quote_date) <= @EndDate AND Quotes.id NOT IN (SELECT quote_no FROM  NewOrderPDF) " +
                                                                 "ORDER BY Quotes.quote_date desc", conn);

                    cmdGetNoOfQuotes.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetNoOfQuotes.Parameters.AddWithValue("@EndDate", endDate);
                    using (SqlDataReader dr = cmdGetNoOfQuotes.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                RegexOptions options = RegexOptions.None;
                                Regex regex = new Regex("[ ]{2,}", options);
                                string phone2 = !string.IsNullOrWhiteSpace(dr["contact_phone_number2"].ToString()) ? "" + System.Environment.NewLine + dr["contact_phone_number2"].ToString() : "";
                                string email = !string.IsNullOrWhiteSpace(dr["contact_email"].ToString()) ? "" + System.Environment.NewLine + dr["contact_email"].ToString() : "";
                                string contactPerson = !string.IsNullOrWhiteSpace(dr["contact_person_name"].ToString()) ? dr["contact_person_name"].ToString() + " " + dr["contact_phone_number1"].ToString() : 
                                    dr["contact_person_namePre"].ToString() + " " + dr["contact_phone_number1Pre"].ToString() + "" + System.Environment.NewLine + dr["contact_emailPre"].ToString();

                                if (openQuoteList.Count == 0)
                                {
                                    OpenQuotes oq = new OpenQuotes();
                                    oq.QuoteNo = Convert.ToInt32(dr["id"]);
                                    oq.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                    oq.Customer = new Customer();
                                    oq.Customer.CompanyName = String.IsNullOrWhiteSpace(dr["company_name"].ToString()) ? dr["prepaid_customer"].ToString() : dr["company_name"].ToString();
                                    oq.ProductDetails = "\u2022 " + Convert.ToInt16(dr["qty"]) + " x " + regex.Replace(dr["description"].ToString(), " ") + " - " + Convert.ToDecimal(dr["total"]).ToString("C", CultureInfo.CurrentCulture);
                                    oq.ProjectName = dr["project_name"].ToString();
                                    oq.ContactPerson = new ContactPerson();
                                    oq.ContactPerson.ContactPersonName = contactPerson + phone2 + email;
                                    oq.User = new User();
                                    oq.User.FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                                    oq.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                    openQuoteList.Add(oq);
                                }
                                else
                                {
                                    var data = openQuoteList.FirstOrDefault(x=>x.QuoteNo == Convert.ToInt32(dr["id"]));
                                    if(data != null)
                                    {
                                        data.ProductDetails += System.Environment.NewLine + "\u2022 " + Convert.ToInt16(dr["qty"]) + " x " + regex.Replace(dr["description"].ToString(), " ") + " - " + Convert.ToDecimal(dr["total"]).ToString("C", CultureInfo.CurrentCulture);
                                    }
                                    else
                                    {
                                        OpenQuotes oq = new OpenQuotes();
                                        oq.QuoteNo = Convert.ToInt32(dr["id"]);
                                        oq.QuoteDate = Convert.ToDateTime(dr["quote_date"]);
                                        oq.Customer = new Customer();
                                        oq.Customer.CompanyName = String.IsNullOrWhiteSpace(dr["company_name"].ToString()) ? dr["prepaid_customer"].ToString() : dr["company_name"].ToString();
                                        oq.ProductDetails = "\u2022 " + Convert.ToInt16(dr["qty"]) + " x " + regex.Replace(dr["description"].ToString(), " ") + " - " + Convert.ToDecimal(dr["total"]).ToString("C", CultureInfo.CurrentCulture);
                                        oq.ProjectName = dr["project_name"].ToString();
                                        oq.ContactPerson = new ContactPerson();
                                        oq.ContactPerson.ContactPersonName = contactPerson + phone2 + email;
                                        oq.User = new User();
                                        oq.User.FullName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                                        oq.TotalAmount = Convert.ToDecimal(dr["total_amount"]);
                                        openQuoteList.Add(oq);
                                    }
                                }
                             
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return openQuoteList;
        }

        public static ObservableCollection<OrdersNotInvoiced> GetAllOrdersByDateState(DateTime date)
        {
            ObservableCollection<OrdersNotInvoiced> orderList = new ObservableCollection<OrdersNotInvoiced>();
            string searchDate = date.ToString("yyyy-MM-dd");

            
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT id,ORDER_DATE,name,ORDER_AMOUNT FROM SALES_SALES_ORDER " +
                                                                            "WHERE CONVERT(date, ORDER_DATE) = @SearchDate " +
                                                                            "ORDER BY name", conn);

                        cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@SearchDate", searchDate);
                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {

                                    OrdersNotInvoiced oni = new OrdersNotInvoiced();
                                    oni.SalesID = dr["id"].ToString();
                                    oni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    oni.Name = dr["NAME"].ToString();
                                    oni.Total = Convert.ToDecimal(dr["ORDER_AMOUNT"]);
                                    oni.State = oni.Name.Equals("Sandleford Holdings Pty Ltd") ? "Sandleford Holdings Pty Ltd (QLD)" : "QLD";
                                    oni.OrderFormat = oni.State.Equals("Sandleford Holdings Pty Ltd (QLD)") ? 2 : 1;
                                    orderList.Add(oni);
                                }
                            }
                        }

                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

            orderList = new ObservableCollection<OrdersNotInvoiced>(orderList.OrderBy(x => x.State));


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSNSWString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT id,ORDER_DATE,name,ORDER_AMOUNT FROM SALES_SALES_ORDER " +
                                                                        "WHERE CONVERT(date, ORDER_DATE) = @SearchDate " +
                                                                        "ORDER BY name", conn);

                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@SearchDate", searchDate);
                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                OrdersNotInvoiced oni = new OrdersNotInvoiced();
                                oni.SalesID = dr["id"].ToString();
                                oni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                oni.Name = dr["NAME"].ToString();
                                oni.Total = Convert.ToDecimal(dr["ORDER_AMOUNT"]);
                                oni.State = oni.Name.Equals("Sandleford Holdings Pty Ltd") ? "Sandleford Holdings Pty Ltd (NSW)" : "NSW";
                                oni.OrderFormat = oni.State.Equals("Sandleford Holdings Pty Ltd (NSW)") ? 4 : 3;
                                orderList.Add(oni);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSVICString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT id,ORDER_DATE,name,ORDER_AMOUNT FROM SALES_SALES_ORDER " +
                                                                        "WHERE CONVERT(date, ORDER_DATE) = @SearchDate " +
                                                                        "ORDER BY name", conn);

                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@SearchDate", searchDate);
                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                OrdersNotInvoiced oni = new OrdersNotInvoiced();
                                oni.SalesID = dr["id"].ToString();
                                oni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                oni.Name = dr["NAME"].ToString();
                                oni.Total = Convert.ToDecimal(dr["ORDER_AMOUNT"]);
                                oni.State = oni.Name.Equals("Sandleford Holdings Pty Ltd") ? "Sandleford Holdings Pty Ltd (VIC)" : "VIC";
                                oni.OrderFormat = oni.State.Equals("Sandleford Holdings Pty Ltd (NSW)") ? 4 : 3;
                                orderList.Add(oni);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }


            return orderList;
        }

        public static ObservableCollection<VjsCustomer> GetVJSOrderCustomers()
        {
            ObservableCollection<VjsCustomer> CustomerList = new ObservableCollection<VjsCustomer>();
            
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT distinct Name " +
                                                                        "FROM SALES_SALES_ORDER " +
                                                                        "ORDER BY name", conn);

                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VjsCustomer customer = new VjsCustomer();
                                customer.Name = dr["name"].ToString();                                
                                CustomerList.Add(customer);
                            }
                        }
                    }

                    //SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_CUSTOMER.id, SALES_CUSTOMER.name,  SALES_CUSTOMER.CITY, SALES_CUSTOMER.STATE " +
                    //                                                    "FROM SALES_CUSTOMER " +
                    //                                                    "WHERE  SALES_CUSTOMER.NAME IS NOT NULL " +
                    //                                                    "ORDER BY SALES_CUSTOMER.name", conn);

                    //using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    //{
                    //    if (dr != null)
                    //    {
                    //        while (dr.Read())
                    //        {
                    //            VjsCustomer customer = new VjsCustomer();
                    //            customer.CustomerID = dr["id"].ToString();
                    //            if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                    //            {
                    //                customer.Name = dr["name"].ToString() + " " + dr["city"].ToString();
                    //            }
                    //            else
                    //            {
                    //                customer.Name = dr["name"].ToString();
                    //            }
                    //            customer.City = dr["city"].ToString();
                    //            customer.State = dr["state"].ToString();
                    //            CustomerList.Add(customer);
                    //        }
                    //    }
                    //}
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSNSWString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT distinct Name " +
                                                                        "FROM SALES_SALES_ORDER " +
                                                                        "ORDER BY name", conn);

                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if (CustomerList.Count == 0)
                                {
                                    VjsCustomer customer = new VjsCustomer();
                                    customer.Name = dr["name"].ToString();
                                    CustomerList.Add(customer);
                                }
                                else
                                {
                                    bool notAvailable = CustomerList.Any(x=>x.Name == dr["name"].ToString());
                                    if(!notAvailable)
                                    {
                                        VjsCustomer customer = new VjsCustomer();
                                        customer.Name = dr["name"].ToString();
                                        CustomerList.Add(customer);
                                    }
                                }
                            }
                        }
                    }                   
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            CustomerList = new ObservableCollection<VjsCustomer>(CustomerList.OrderBy(x=>x.Name));

            return CustomerList;
        }

        public static ObservableCollection<VjsPart> GetVJSProducts()
        {
            ObservableCollection<VjsPart> VjsPartList = new ObservableCollection<VjsPart>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT INVENTORY_PART.id,INVENTORY_PART.DESCRIPTION , COMMODITY_CODE,FABRICATED " + 
                                                                        "FROM INVENTORY_PART " +
                                                                        "WHERE FABRICATED = -1 AND ID <> 'AMEX Surcharge' AND ID <> '4GCB' AND ID <> 'ACBaseBatch' AND ID <> 'ACBBatch' AND ID <> 'ACGBatch' AND ID <> 'ACYBatch' AND " +
                                                                        "ID <> 'AQCB' AND ID <> 'AquaCSBRBatch' AND ID <> 'AuburnCSBRBatch' AND ID <> 'Beckothane M21/4X' AND ID <> 'BeigeCSBRBatch' AND ID <> 'BLK850Regrind' AND " +
                                                                        "ID <> 'BLKAcoustaCork 720' AND ID <> 'BLKAcoustamat 700' AND ID <> 'BLKAcoustamat 960' AND ID <> 'BLKAcoustamat Tile' AND ID <> 'BLKAquiliaHeavyDutyHomeGymGreyB' AND ID <> 'BLKAquiliaImpactTileGreyBGG' AND " +
                                                                        "ID <> 'BLKAR600' AND ID <> 'BLKARIND' AND ID <> 'BLKBunnBasket' AND ID <> 'BLKBunnBlue' AND ID <> 'BLKBunnCommercialGymBlack' AND ID <> 'BLKBunnCommercialGymBlack/Grey' AND " +
                                                                        "ID <> 'BLKBunnDarkGreen' AND ID <> 'BLKBunnGrey' AND ID <> 'BLKBunnGymBlack' AND ID <> 'BLKBunnGymBlack/Blue' AND ID <> 'BLKBunnGymBlack/Grey' AND ID <> 'BLKBunnGymBlack/Red' AND " +
                                                                        "ID <> 'BLKBunnHeavyDutyGymBlack' AND ID <> 'BLKBunnLandGreen' AND ID <> 'BLKBunnMulti' AND ID <> 'BLKBunnMultiLarge' AND ID <> 'BLKBunnPatio' AND ID <> 'BLKBunnRed' AND " +
                                                                        "ID <> 'BLKBunnShed' AND ID <> 'BLKBunnUte' AND ID <> 'BLKBunnUteTile' AND ID <> 'BLKClarkCommercialGymBlackBlue' AND ID <> 'BLKClarkHomeGymBlack' AND ID <> 'BLKClarkPatioBlack' AND " +
                                                                        "ID <> 'BLKClarkPatioGreen' AND ID <> 'BLKClarkPatioGrey' AND ID <> 'BLKClarkPatioRed' AND ID <> 'BLKCustom' AND ID <> 'BLKDLLP1000' AND ID <> 'BLKEMB10850D' AND " +
                                                                        "ID <> 'BLKEMB20' AND ID <> 'BLKGYMB' AND ID <> 'BLKGYMBB' AND ID <> 'BLKGYMC' AND ID <> 'BLKGYMGG' AND ID <> 'BLKGYMSR' AND ID <> 'BLKJAdagio' AND ID <> 'BLKJBaroque' AND " +
                                                                        "ID <> 'BLKJCadenza' AND ID <> 'BLKJCherryPie' AND ID <> 'BLKJDeepPurple' AND ID <> 'BLKJFugue' AND ID <> 'BLKJGrandioso' AND ID <> 'BLKJLargo' AND ID <> 'BLKJMezzo' AND ID <> 'BLKJMoonShadow' AND " +
                                                                        "ID <> 'BLKJOrangeCrush' AND ID <> 'BLKJPartita' AND ID <> 'BLKJPlusFitnessBlue' AND ID <> 'BLKJPumpingPurple' AND ID <> 'BLKJPurpleHaze' AND ID <> 'BLKJRequiem' AND ID <> 'BLKJShade/Berlin' AND ID <> 'BLKJSOS' AND " +
                                                                        "ID <> 'BLKJStellar' AND ID <> 'BLKJStretto' AND ID <> 'BLKJTriad' AND ID <> 'BLKLogCustom' AND ID <> 'BLKOfficeBlack/Blue' AND ID <> 'BLKPTB' AND ID <> 'BLKPTG' AND ID <> 'BLKPTLG' AND " +
                                                                        "ID <> 'BLKPTR' AND ID <> 'BLKRegAnt' AND ID <> 'BLKRegLoad' AND ID <> 'BLKSHOCK' AND ID <> 'BLKSHOCKOLYM' AND ID <> 'BLKSOS' AND ID <> 'BunningsCSBRDG' AND ID <> 'CarnivaleBerryBabyBluesBulk' AND ID <> 'CarnivaleVistaPacificBulk' AND " +
                                                                        "ID <> 'CarnivaleBerryHoneyDewBulk' AND ID <> 'CarnivaleBerryMintJulepBulk' AND ID <> 'CarnivaleBerryPassionPopBulk' AND ID <> 'CarnivaleBerryPumpkinPieBulk' AND ID <> 'CarnivaleBerryRubyRazzBulk' AND ID <> 'CarnivaleShadeCoastalBulk' AND ID <> 'CarnivaleShadeEnvyBulk' AND ID <> 'CarnivaleShadeGroundBulk' AND " +
                                                                        "ID <> 'CarnivaleShadeJungleBulk' AND ID <> 'CarnivaleShadeOceanicBulk' AND ID <> 'CarnivaleShadePhantomBulk' AND ID <> 'CarnivaleVistaDaintreeBulk' AND ID <> 'CarnivaleVistaHarbourBulk' AND ID <> 'CarnivaleVistaKakaduBulk' AND ID <> 'CarnivaleVistaKeppelBulk' AND ID <> 'CarnivaleVistaOutbackBulk' AND " +
                                                                        "ID <> 'ClaretCovaBatch' AND ID <> 'ClayCovaBatch' AND ID <> 'CocoaClarkBatch' AND ID <> 'CocoaCSBRBatch' AND ID <> 'CorkCovaBatch' AND ID <> 'Credit Card Surcharge' AND ID <> 'Curvedge Corners Green Batch' AND ID <> 'Curvedge Corners Red Batch' AND " +
                                                                        "ID <> 'Curvedges Green Batch' AND ID <> 'Curvedges Red Batch' AND ID <> 'DarkBlueClarkBatch' AND ID <> 'DarkBlueCSBRBatch' AND ID <> 'DarkGreenClarkBatch' AND ID <> 'DarkGreenCSBRBatch' AND ID <> 'EggshellClarkBatch' AND ID <> 'EggshellCSBRBatch' AND " +
                                                                        "ID <> 'EmeraldCSBRBatch' AND ID <> 'FairwayCovaBatch' AND ID <> 'GravelCovaBatch' AND ID <> 'GreyClarkBatch' AND ID <> 'GreyCSBRBatch' AND ID <> 'JazzCSBRBatch' AND ID <> 'JAZZWAITINGCSBR' AND ID <> 'JAZZWAITINGEPDM' AND ID <> 'RoseCSBRBatch' AND " +
                                                                        "ID <> 'Megathane200' AND ID <> 'MidBlueClarkBatch' AND ID <> 'MidBlueCSBRBatch' AND ID <> 'MidGreenClarkBatch' AND ID <> 'MidGreenCSBRBatch' AND ID <> 'MochaCovaBatch' AND ID <> 'NavyCovaBatch' AND ID <> 'OrchidClarkBatch' AND ID <> 'OrchidCSBRBatch' AND " +
                                                                        "ID <> 'PIP10KGGreen' AND ID <> 'Polysolv250ml' AND ID <> 'PurpleClarkBatch' AND ID <> 'PurpleCSBRBatch' AND ID <> 'RCB' AND ID <> 'RedClarkBatch' AND ID <> 'RedCSBRBatch' AND ID <> 'RhodiaSolv RPDEIBC' AND ID <> 'RMBRBulk' AND " +
                                                                        "ID <> 'SandYellowClarkBatch' AND ID <> 'SandYellowCSBRBatch' AND ID <> 'ShamrockCovaBatch' AND ID <> 'Stillage' AND ID <> 'SYCB' AND ID <> 'TabaccoCovaBatch' AND ID <> 'TCB' AND ID <> 'TerracottaClarkBatch' AND ID <> 'TerracottaCSBRBatch' AND " +
                                                                        "COMMODITY_CODE is null or COMMODITY_CODE <> 'A1 Internal Stock' AND COMMODITY_CODE <> 'Manufacturing' AND COMMODITY_CODE <> 'Buckets' AND " +
                                                                        "COMMODITY_CODE <> 'Coatings' AND COMMODITY_CODE <> 'Talcolour' AND COMMODITY_CODE <> 'Makeean' AND COMMODITY_CODE <> 'Oxide' AND INACTIVE = 0 " +
                                                                        "ORDER BY INVENTORY_PART.id", conn);

                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VjsPart part = new VjsPart();
                                part.ID = dr["id"].ToString();
                                part.Description = dr["description"].ToString();                              
                                VjsPartList.Add(part);
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return VjsPartList;
        }

        public static ObservableCollection<VjsOrder> GetVJSOrders(DateTime sd, DateTime ed, VjsCustomer customer, ObservableCollection<VjsPartCollection> vjsPartColl)
        {
            ObservableCollection<VjsOrder> VjsOrderList = new ObservableCollection<VjsOrder>();
            string startDate = sd.ToString("yyyy-MM-dd");
            string endDate = ed.ToString("yyyy-MM-dd");
            string where1 = string.Empty, where2 = string.Empty;            

            if(vjsPartColl != null && vjsPartColl.Count > 0)
            {
                
                bool run = false;

                foreach (var item in vjsPartColl)
                {
                    if (item.SelectedPart != null && !item.SelectedPart.ID.Equals("Select"))
                    {
                        if (!run)
                        {                            
                            run = true;
                            where1 += " AND (SALES_ORDER_LINE.PART_ID = '" + item.SelectedPart.ID + "'";
                        }
                        else
                        {
                            where1 += " OR SALES_ORDER_LINE.PART_ID = '" + item.SelectedPart.ID + "'";
                        }
                    }
                }

                if (!string.IsNullOrEmpty(where1))
                {
                    where1 += ")";
                }
            }

            if (customer != null && !customer.Name.Equals("No Customer"))
            {
                where2 = " AND SALES_SALES_ORDER.NAME LIKE '%" + customer.Name + "%'";
                
            }

            

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
            {
                try
                {
                    decimal qldTot = 0;
                    conn.Open();

                    SqlCommand cmdGetQLDTotalAmount = new SqlCommand("SELECT SUM(SALES_ORDER_LINE.ORDER_AMOUNT) As StateTotalAmount FROM SALES_ORDER_LINE " +
                                                                     "INNER JOIN SALES_SALES_ORDER ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.sales_id " +
                                                                     "LEFT JOIN SALES_CUSTOMER ON SALES_SALES_ORDER.CUSTOMER_ID = SALES_CUSTOMER.ID " +
                                                                     "WHERE CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) >= @StartDate AND CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) <= @EndDate " + where1 + where2, conn);

                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID, SALES_SALES_ORDER.ORDER_DATE, SALES_SALES_ORDER.NAME, SALES_ORDER_LINE.LINE_NO, SALES_ORDER_LINE.PART_ID, SALES_ORDER_LINE.DESCRIPTION, SALES_ORDER_LINE.ORDER_QTY, SALES_ORDER_LINE.SELLING_UM, " +
                                                                        "SALES_ORDER_LINE.UNIT_PRICE, SALES_ORDER_LINE.ORDER_AMOUNT,SALES_CUSTOMER.city,SALES_SALES_ORDER.ORDER_AMOUNT as SubTotal " +
                                                                        "FROM SALES_SALES_ORDER " +
                                                                        "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.sales_id " +
                                                                        "LEFT JOIN SALES_CUSTOMER ON SALES_SALES_ORDER.CUSTOMER_ID = SALES_CUSTOMER.ID " +
                                                                        "WHERE CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) >= @StartDate AND CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) <= @EndDate " + where1 + where2 +
                                                                        "ORDER BY SALES_SALES_ORDER.ORDER_DATE desc, SALES_ORDER_LINE.LINE_NO", conn);

                    cmdGetQLDTotalAmount.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetQLDTotalAmount.Parameters.AddWithValue("@EndDate", endDate);
                    qldTot = CheckNull<decimal>(cmdGetQLDTotalAmount.ExecuteScalar());

                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@EndDate", endDate);                   
                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {                                
                                if (VjsOrderList.Count == 0)
                                {
                                    VjsOrder vjsOrder = new VjsOrder();
                                    vjsOrder.State = "QLD";
                                    vjsOrder.OrderID = dr["id"].ToString();
                                    vjsOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    vjsOrder.TotalAmount = qldTot;
                                    if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                                    {
                                        vjsOrder.CustomerName = dr["name"].ToString() + " " + dr["city"].ToString();
                                    }
                                    else
                                    {
                                        vjsOrder.CustomerName = dr["name"].ToString();
                                    }
                                    vjsOrder.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjsOrder.VjsOrderDetails.Add(new VjsOrderDetails() 
                                    { 
                                        OrderID = dr["id"].ToString(), 
                                        LineNo = Convert.ToInt16(dr["line_no"]), 
                                        PartID = dr["part_id"].ToString(), 
                                        Description = dr["description"].ToString(), 
                                        OrderQty = Convert.ToDecimal(dr["order_qty"]), 
                                        Unit = dr["selling_um"].ToString(), 
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]), 
                                        OrderAmount = Convert.ToDecimal(dr["order_amount"])

                                    });
                                    VjsOrderList.Add(vjsOrder);
                                }
                                else
                                {
                                    var data = VjsOrderList.FirstOrDefault(x=>x.OrderID.Equals(dr["id"].ToString()));
                                    if(data != null)
                                    {
                                        data.VjsOrderDetails.Add(new VjsOrderDetails() 
                                        { 
                                            OrderID = dr["id"].ToString(),
                                            LineNo = Convert.ToInt16(dr["line_no"]), 
                                            PartID = dr["part_id"].ToString(), 
                                            Description = dr["description"].ToString(), 
                                            OrderQty = Convert.ToDecimal(dr["order_qty"]), 
                                            Unit = dr["selling_um"].ToString(), 
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]), 
                                            OrderAmount = Convert.ToDecimal(dr["order_amount"]) 

                                        });

                                    }
                                    else
                                    {
                                        VjsOrder vjsOrder = new VjsOrder();
                                        vjsOrder.State = "QLD";
                                        vjsOrder.OrderID = dr["id"].ToString();
                                        vjsOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                        vjsOrder.TotalAmount = qldTot;
                                        if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                                        {
                                            vjsOrder.CustomerName = dr["name"].ToString() + " " + dr["city"].ToString();
                                        }
                                        else
                                        {
                                            vjsOrder.CustomerName = dr["name"].ToString();
                                        }
                                        vjsOrder.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                        vjsOrder.VjsOrderDetails.Add(new VjsOrderDetails() 
                                        { 
                                            OrderID = dr["id"].ToString(), 
                                            LineNo = Convert.ToInt16(dr["line_no"]), 
                                            PartID = dr["part_id"].ToString(), 
                                            Description = dr["description"].ToString(), 
                                            OrderQty = Convert.ToDecimal(dr["order_qty"]), 
                                            Unit = dr["selling_um"].ToString(), 
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]), 
                                            OrderAmount = Convert.ToDecimal(dr["order_amount"]) 
                                        });
                                        VjsOrderList.Add(vjsOrder);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            //NSW
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSNSWString))
            {
                try
                {
                    decimal nswTot = 0;
                    conn.Open();

                    SqlCommand cmdGetNSWTotalAmount = new SqlCommand("SELECT SUM(SALES_ORDER_LINE.ORDER_AMOUNT) As StateTotalAmount FROM SALES_ORDER_LINE " +
                                                                     "INNER JOIN SALES_SALES_ORDER ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.sales_id " +
                                                                     "LEFT JOIN SALES_CUSTOMER ON SALES_SALES_ORDER.CUSTOMER_ID = SALES_CUSTOMER.ID " +
                                                                     "WHERE CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) >= @StartDate AND CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) <= @EndDate " + where1 + where2, conn);


                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID, SALES_SALES_ORDER.ORDER_DATE, SALES_SALES_ORDER.NAME, SALES_ORDER_LINE.LINE_NO, SALES_ORDER_LINE.PART_ID, SALES_ORDER_LINE.DESCRIPTION, SALES_ORDER_LINE.ORDER_QTY, SALES_ORDER_LINE.SELLING_UM, " +
                                                                        "SALES_ORDER_LINE.UNIT_PRICE, SALES_ORDER_LINE.ORDER_AMOUNT,SALES_CUSTOMER.city " +
                                                                        "FROM SALES_SALES_ORDER " +
                                                                        "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.sales_id " +
                                                                        "LEFT JOIN SALES_CUSTOMER ON SALES_SALES_ORDER.CUSTOMER_ID = SALES_CUSTOMER.ID " +
                                                                        "WHERE CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) >= @StartDate AND CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) <= @EndDate " + where1 + where2 +
                                                                        "ORDER BY SALES_SALES_ORDER.ORDER_DATE desc, SALES_ORDER_LINE.LINE_NO", conn);

                    cmdGetNSWTotalAmount.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetNSWTotalAmount.Parameters.AddWithValue("@EndDate", endDate);
                    nswTot = CheckNull<decimal>(cmdGetNSWTotalAmount.ExecuteScalar());

                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@EndDate", endDate);
                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if (VjsOrderList.Count == 0)
                                {
                                    VjsOrder vjsOrder = new VjsOrder();
                                    vjsOrder.State = "NSW";
                                    vjsOrder.OrderID = dr["id"].ToString();
                                    vjsOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    vjsOrder.TotalAmount = nswTot;
                                    if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                                    {
                                        vjsOrder.CustomerName = dr["name"].ToString() + " " + dr["city"].ToString();
                                    }
                                    else
                                    {
                                        vjsOrder.CustomerName = dr["name"].ToString();
                                    }
                                    vjsOrder.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjsOrder.VjsOrderDetails.Add(new VjsOrderDetails()
                                    {
                                        OrderID = dr["id"].ToString(),
                                        LineNo = Convert.ToInt16(dr["line_no"]),
                                        PartID = dr["part_id"].ToString(),
                                        Description = dr["description"].ToString(),
                                        OrderQty = Convert.ToDecimal(dr["order_qty"]),
                                        Unit = dr["selling_um"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        OrderAmount = Convert.ToDecimal(dr["order_amount"]),

                                    });
                                    VjsOrderList.Add(vjsOrder);
                                }
                                else
                                {
                                    var data = VjsOrderList.FirstOrDefault(x => x.OrderID.Equals(dr["id"].ToString()));
                                    if (data != null)
                                    {
                                        data.VjsOrderDetails.Add(new VjsOrderDetails()
                                        {
                                            OrderID = dr["id"].ToString(),
                                            LineNo = Convert.ToInt16(dr["line_no"]),
                                            PartID = dr["part_id"].ToString(),
                                            Description = dr["description"].ToString(),
                                            OrderQty = Convert.ToDecimal(dr["order_qty"]),
                                            Unit = dr["selling_um"].ToString(),
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                            OrderAmount = Convert.ToDecimal(dr["order_amount"])
                                        });
                                    }
                                    else
                                    {
                                        VjsOrder vjsOrder = new VjsOrder();
                                        vjsOrder.State = "NSW";
                                        vjsOrder.OrderID = dr["id"].ToString();
                                        vjsOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                        vjsOrder.TotalAmount = nswTot;
                                        if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                                        {
                                            vjsOrder.CustomerName = dr["name"].ToString() + " " + dr["city"].ToString();
                                        }
                                        else
                                        {
                                            vjsOrder.CustomerName = dr["name"].ToString();
                                        }
                                        vjsOrder.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                        vjsOrder.VjsOrderDetails.Add(new VjsOrderDetails()
                                        {
                                            OrderID = dr["id"].ToString(),
                                            LineNo = Convert.ToInt16(dr["line_no"]),
                                            PartID = dr["part_id"].ToString(),
                                            Description = dr["description"].ToString(),
                                            OrderQty = Convert.ToDecimal(dr["order_qty"]),
                                            Unit = dr["selling_um"].ToString(),
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                            OrderAmount = Convert.ToDecimal(dr["order_amount"])
                                        });
                                        VjsOrderList.Add(vjsOrder);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            //VIC
            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSVICString))
            {
                try
                {
                    decimal nswTot = 0;
                    conn.Open();

                    SqlCommand cmdGetNSWTotalAmount = new SqlCommand("SELECT SUM(SALES_ORDER_LINE.ORDER_AMOUNT) As StateTotalAmount FROM SALES_ORDER_LINE " +
                                                                     "INNER JOIN SALES_SALES_ORDER ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.sales_id " +
                                                                     "LEFT JOIN SALES_CUSTOMER ON SALES_SALES_ORDER.CUSTOMER_ID = SALES_CUSTOMER.ID " +
                                                                     "WHERE CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) >= @StartDate AND CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) <= @EndDate " + where1 + where2, conn);


                    SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID, SALES_SALES_ORDER.ORDER_DATE, SALES_SALES_ORDER.NAME, SALES_ORDER_LINE.LINE_NO, SALES_ORDER_LINE.PART_ID, SALES_ORDER_LINE.DESCRIPTION, SALES_ORDER_LINE.ORDER_QTY, SALES_ORDER_LINE.SELLING_UM, " +
                                                                        "SALES_ORDER_LINE.UNIT_PRICE, SALES_ORDER_LINE.ORDER_AMOUNT,SALES_CUSTOMER.city " +
                                                                        "FROM SALES_SALES_ORDER " +
                                                                        "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.sales_id " +
                                                                        "LEFT JOIN SALES_CUSTOMER ON SALES_SALES_ORDER.CUSTOMER_ID = SALES_CUSTOMER.ID " +
                                                                        "WHERE CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) >= @StartDate AND CONVERT(date, SALES_SALES_ORDER.ORDER_DATE) <= @EndDate " + where1 + where2 +
                                                                        "ORDER BY SALES_SALES_ORDER.ORDER_DATE desc, SALES_ORDER_LINE.LINE_NO", conn);

                    cmdGetNSWTotalAmount.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetNSWTotalAmount.Parameters.AddWithValue("@EndDate", endDate);
                    nswTot = CheckNull<decimal>(cmdGetNSWTotalAmount.ExecuteScalar());

                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@StartDate", startDate);
                    cmdGetOrdersNotInvoiced.Parameters.AddWithValue("@EndDate", endDate);
                    using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                if (VjsOrderList.Count == 0)
                                {
                                    VjsOrder vjsOrder = new VjsOrder();
                                    vjsOrder.State = "VIC";
                                    vjsOrder.OrderID = dr["id"].ToString();
                                    vjsOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                    vjsOrder.TotalAmount = nswTot;
                                    if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                                    {
                                        vjsOrder.CustomerName = dr["name"].ToString() + " " + dr["city"].ToString();
                                    }
                                    else
                                    {
                                        vjsOrder.CustomerName = dr["name"].ToString();
                                    }
                                    vjsOrder.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjsOrder.VjsOrderDetails.Add(new VjsOrderDetails()
                                    {
                                        OrderID = dr["id"].ToString(),
                                        LineNo = Convert.ToInt16(dr["line_no"]),
                                        PartID = dr["part_id"].ToString(),
                                        Description = dr["description"].ToString(),
                                        OrderQty = Convert.ToDecimal(dr["order_qty"]),
                                        Unit = dr["selling_um"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                        OrderAmount = Convert.ToDecimal(dr["order_amount"]),

                                    });
                                    VjsOrderList.Add(vjsOrder);
                                }
                                else
                                {
                                    var data = VjsOrderList.FirstOrDefault(x => x.OrderID.Equals(dr["id"].ToString()));
                                    if (data != null)
                                    {
                                        data.VjsOrderDetails.Add(new VjsOrderDetails()
                                        {
                                            OrderID = dr["id"].ToString(),
                                            LineNo = Convert.ToInt16(dr["line_no"]),
                                            PartID = dr["part_id"].ToString(),
                                            Description = dr["description"].ToString(),
                                            OrderQty = Convert.ToDecimal(dr["order_qty"]),
                                            Unit = dr["selling_um"].ToString(),
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                            OrderAmount = Convert.ToDecimal(dr["order_amount"])
                                        });
                                    }
                                    else
                                    {
                                        VjsOrder vjsOrder = new VjsOrder();
                                        vjsOrder.State = "VIC";
                                        vjsOrder.OrderID = dr["id"].ToString();
                                        vjsOrder.OrderDate = Convert.ToDateTime(dr["order_date"]);
                                        vjsOrder.TotalAmount = nswTot;
                                        if (dr["name"].ToString().Equals("Sandleford Holdings Pty Ltd"))
                                        {
                                            vjsOrder.CustomerName = dr["name"].ToString() + " " + dr["city"].ToString();
                                        }
                                        else
                                        {
                                            vjsOrder.CustomerName = dr["name"].ToString();
                                        }
                                        vjsOrder.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                        vjsOrder.VjsOrderDetails.Add(new VjsOrderDetails()
                                        {
                                            OrderID = dr["id"].ToString(),
                                            LineNo = Convert.ToInt16(dr["line_no"]),
                                            PartID = dr["part_id"].ToString(),
                                            Description = dr["description"].ToString(),
                                            OrderQty = Convert.ToDecimal(dr["order_qty"]),
                                            Unit = dr["selling_um"].ToString(),
                                            UnitPrice = Convert.ToDecimal(dr["unit_price"]),
                                            OrderAmount = Convert.ToDecimal(dr["order_amount"])
                                        });
                                        VjsOrderList.Add(vjsOrder);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return VjsOrderList;
        }

        public static List<VjsNotInvoiced> GetVJSNotInvoiced()
        {
            List<VjsNotInvoiced> vjsNotInvoiced = new List<VjsNotInvoiced>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetOrders = new SqlCommand("SELECT SALES_SALES_ORDER.ID, SALES_SALES_ORDER.NAME, SALES_SALES_ORDER.ORDER_DATE, SALES_SALES_ORDER.DESIRED_SHIP_DATE, ORDER_STATUS, " +
                                                                        "SALES_order_line.LINE_NO, SALES_order_line.PART_ID, SALES_order_line.DESCRIPTION, SALES_order_line.SELLING_UM, SALES_order_line.ORDER_QTY, SALES_order_line.UNIT_PRICE, SALES_order_line.ORDER_AMOUNT " +
                                                                        "FROM SALES_SALES_ORDER " +
                                                                        "INNER JOIN SALES_order_line on SALES_SALES_ORDER.id = SALES_order_line.SALES_ID " +
                                                                        "WHERE((ORDER_STATUS = 'RELEASED') OR " +
                                                                        "(ORDER_STATUS = 'HOLD') OR " +
                                                                        "(ORDER_STATUS = 'CLOSED')) AND CONVERT(date,SALES_SALES_ORDER.ORDER_DATE) >= '2022-05-02' " +
                                                                        "ORDER BY ORDER_DATE DESC", conn);

                    SqlCommand cmdShipping = new SqlCommand("SELECT INVOICE_ID FROM sales_shipper WHERE SALES_ID =@SalesID", conn);

                    using (SqlDataReader dr = cmdGetOrders.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                VjsNotInvoiced vni = new VjsNotInvoiced();
                                vni.ID = dr["id"].ToString();
                                vni.Name = dr["NAME"].ToString();
                                vni.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                vni.DesiredSipDate = Convert.ToDateTime(dr["DESIRED_SHIP_DATE"]);
                                vni.OrderStatus = dr["ORDER_STATUS"].ToString();
                                vni.LineNo = Convert.ToInt16(dr["line_no"]);
                                vni.PartID = dr["PART_ID"].ToString();
                                vni.Description = dr["DESCRIPTION"].ToString();
                                vni.Unit = dr["selling_um"].ToString();
                                vni.OrderQty = Convert.ToDecimal(dr["order_qty"]);
                                vni.UnitPrice = Convert.ToDecimal(dr["unit_price"]);
                                vni.TotalAmount = Convert.ToDecimal(dr["order_amount"]);
                                vjsNotInvoiced.Add(vni);
                            }
                        }
                    }

                    for (int i = vjsNotInvoiced.Count - 1; i >= 0; i--)
                    {
                        if (vjsNotInvoiced[i].OrderStatus.Equals("CLOSED"))
                        {
                            cmdShipping.Parameters.AddWithValue("@SalesID", vjsNotInvoiced[i].ID);
                            using (SqlDataReader dr2 = cmdShipping.ExecuteReader())
                            {
                                if (dr2 != null)
                                {
                                    while (dr2.Read())
                                    {
                                        string invoiceId = dr2["INVOICE_ID"].ToString();

                                        if (!string.IsNullOrWhiteSpace(invoiceId))
                                        {
                                            //vjsNotInvoiced.RemoveAll(x=>x.ID == vjsNotInvoiced[i].ID);
                                            vjsNotInvoiced.RemoveAt(i);
                                            break;
                                        }
                                    }
                                }
                            }
                            cmdShipping.Parameters.Clear();
                        }
                    }
                    
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return vjsNotInvoiced;
        }

        public static List<Country> GetAllCountries()
        {
            List<Country> CountryList = new List<Country>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();

                    SqlCommand cmdGetCountries = new SqlCommand("SELECT * FROM Countries ORDER BY is_favourite DESC, country_name", conn);

                    bool found = false;
                    using (SqlDataReader dr = cmdGetCountries.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Country c = new Country();
                                c.ID = Convert.ToInt16(dr["id"]);
                                c.CountryName = dr["country_name"].ToString();
                                c.IsFavourite = Convert.ToBoolean(dr["is_favourite"]);
                                c.IsEnabled = true;

                                if(!found && !c.IsFavourite)
                                {
                                    found = true;
                                    CountryList.Add(new Country() { ID= -1, CountryName = "-----------------------",IsEnabled=false});
                                    CountryList.Insert(0, new Country() { ID = 0, CountryName = "Select", IsEnabled = true });
                                }
                                CountryList.Add(c);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading User Privilages: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }

            return CountryList;
        }

        public static ObservableCollection<Customer> GetAllActiveCustomers()
        {
            ObservableCollection<Customer> customerList = new ObservableCollection<Customer>();

            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    conn.Open();
                    using (SqlCommand cmdGetId = new SqlCommand("SELECT * FROM Customers " +
                                                                "WHERE active ='True' ORDER BY company_name", conn))
                    {
                        using (SqlDataReader dr = cmdGetId.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    Customer customer = new Customer();
                                    customer.CustomerId = Convert.ToInt16(dr["id"]);
                                    customer.CustomerType = dr["customer_type"].ToString();
                                    customer.CompanyName = dr["company_name"].ToString();
                                    customer.CompanyAddress = dr["company_address"].ToString();
                                    customer.CompanyCity = dr["company_city"].ToString();
                                    customer.CompanyState = dr["company_state"].ToString();
                                    customer.CompanyPostCode = dr["company_postcode"].ToString();
                                    customer.CompanyCountry = dr["company_country"].ToString();
                                    customer.CompanyEmail = dr["company_email"].ToString();
                                    customer.CompanyTelephone = dr["company_telephone"].ToString();
                                    customer.CompanyFax = dr["company_fax"].ToString();
                                    customer.Designation1 = dr["designation1"].ToString();
                                    customer.FirstName1 = dr["first_name1"].ToString();
                                    customer.LastName1 = dr["last_name1"].ToString();
                                    customer.Telephone1 = dr["telephone1"].ToString();
                                    customer.Mobile1 = dr["mobile1"].ToString();
                                    customer.Email1 = dr["email1"].ToString();
                                    customer.Fax1 = dr["fax1"].ToString();
                                    customer.Designation2 = dr["designation2"].ToString();
                                    customer.FirstName2 = dr["first_name2"].ToString();
                                    customer.LastName2 = dr["last_name2"].ToString();
                                    customer.Telephone2 = dr["telephone2"].ToString();
                                    customer.Mobile2 = dr["mobile2"].ToString();
                                    customer.Email2 = dr["email2"].ToString();
                                    customer.Fax2 = dr["fax2"].ToString();
                                    customer.Designation3 = dr["designation3"].ToString();
                                    customer.FirstName3 = dr["first_name3"].ToString();
                                    customer.LastName3 = dr["last_name3"].ToString();
                                    customer.Telephone3 = dr["telephone3"].ToString();
                                    customer.Mobile3 = dr["mobile3"].ToString();
                                    customer.Email3 = dr["email3"].ToString();
                                    customer.Fax3 = dr["fax3"].ToString();
                                    customer.CreditLimit = CheckNull<decimal>(dr["credit_limit"]);
                                    customer.CreditRemaining = CheckNull<decimal>(dr["credit_remaining"]);
                                    customer.Debt = CheckNull<decimal>(dr["debt"]);
                                    customer.CreditOwed = CheckNull<decimal>(dr["credit_owed"]);
                                    customer.ShipAddress = dr["ship_address"].ToString();
                                    customer.ShipCity = dr["ship_city"].ToString();
                                    customer.ShipState = dr["ship_state"].ToString();
                                    customer.ShipPostCode = dr["ship_postcode"].ToString();
                                    customer.ShipCountry = dr["ship_country"].ToString();
                                    customer.LastUpdatedBy = dr["last_updated_by"].ToString();
                                    customer.LastUpdatedDateTime = CheckNull<DateTime>(dr["last_updated_datetime"]);
                                    customer.Active = Convert.ToBoolean(dr["active"]);
                                    customer.StopCredit = dr["stop_credit"].ToString();
                                    customer.TimeStamp = Convert.ToBase64String(dr["time_stamp"] as byte[]);
                                    customerList.Add(customer);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Error reading customer details: " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return customerList;
        }
        public static ObservableCollection<Customer> GetCustomersByStateByCategories(string selectedState, ObservableCollection<Models.Categories.CategoryCollection> categoryCollection)
        {
            ObservableCollection<Customer> customerList = new ObservableCollection<Customer>();

            string state = string.Empty, categoryWhere = string.Empty;

            if(!selectedState.Equals("Select"))
            {
                state = " AND Customers.company_state = '" + selectedState + "'";
            }

            if (categoryCollection != null && categoryCollection.Count > 0)
            {
                bool run = false;

                foreach (var item in categoryCollection)
                {
                    if (item.SelectedCategory != null && !item.SelectedCategory.CategoryName.Equals("Select"))
                    {
                        if (!run)
                        {
                            run = true;

                            categoryWhere += " AND (Category.category_name = '" + item.SelectedCategory.CategoryName + "'";
                        }
                        else
                        {
                            categoryWhere += " OR Category.category_name = '" + item.SelectedCategory.CategoryName + "'";
                        }
                    }
                }

                if (!string.IsNullOrEmpty(categoryWhere))
                {
                    categoryWhere += ")";
                }
            }


            using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnectionString))
            {
                try
                {
                    SqlCommand cmd = new SqlCommand("SELECT Customers.company_name,  Category.category_name, Discount.discount,Customers.company_email, Customers.company_state " +
                                                    "FROM Customers " +
                                                    "INNER JOIN Discount ON Customers.id = Discount.customer_id " +
                                                    "INNER JOIN Category ON Discount.category_id = Category.id " +
                                                    "WHERE Discount.discount > 0 AND Customers.company_email <> '' " + state + categoryWhere + " " +
                                                    "UNION " +
                                                    "SELECT Customers.company_name, Category.category_name, Discount.discount, ContactPerson.contact_email, Customers.company_state " +
                                                    "FROM Customers " +
                                                    "INNER JOIN Discount ON Customers.id = Discount.customer_id " +
                                                    "INNER JOIN Category ON Discount.category_id = Category.id " +
                                                    "LEFT JOIN ContactPerson ON Customers.id = ContactPerson.customer_id " +
                                                    "WHERE Discount.discount > 0 AND ContactPerson.contact_email <> '' " + state + categoryWhere + " " +
                                                    "ORDER BY Customers.company_name", conn);

                    conn.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr != null)
                        {
                            while (dr.Read())
                            {
                                Customer c = new Customer();
                                c.CompanyName = dr["company_name"].ToString();
                                c.PrimaryBusiness = new Category() { CategoryName = dr["category_name"].ToString() };
                                c.DiscountStructure = new ObservableCollection<DiscountStructure>() { new DiscountStructure() { Discount = Convert.ToInt16(dr["discount"])} };
                                c.CompanyEmail = dr["company_email"].ToString();
                                c.CompanyState = dr["company_state"].ToString();
                                customerList.Add(c);
                            }
                        }
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("SQL Vehicle Category ERROR : " + e);
                }
                finally
                {
                    conn.Close();
                }
            }
            return customerList;
        }


        public static ObservableCollection<VjsOrder> GetCurrentVjsOrders(string state, DateTime endDate)
        {
            ObservableCollection<VjsOrder> VjsOrderList = new ObservableCollection<VjsOrder>();
            string toDate = endDate.ToString("yyyy-MM-dd");

            if (state.Equals("QLD") || state.Equals("All"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID,SALES_SALES_ORDER.NAME,cast(SALES_SALES_ORDER.ORDER_DATE as date) AS ORDER_DATE,cast(SALES_SALES_ORDER.DESIRED_SHIP_DATE as date) AS DESIRED_SHIP_DATE,SALES_SALES_ORDER.ORDER_STATUS,SALES_ORDER_LINE.LINE_NO,SALES_ORDER_LINE.PART_ID,SALES_ORDER_LINE.DESCRIPTION,SALES_ORDER_LINE.ORDER_QTY,SALES_ORDER_LINE.SELLING_UM,SALES_ORDER_LINE.UNIT_PRICE,SALES_ORDER_LINE.TRADE_DISC_PERCENT,SALES_ORDER_LINE.ORDER_AMOUNT,SALES_SHIPPER.INVOICE_ID,SALES_SALES_ORDER.notes " +
                                                                            "FROM SALES_SALES_ORDER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.SALES_ID " +
                                                                            "LEFT JOIN SALES_SHIPPER ON SALES_SALES_ORDER.ID = SALES_SHIPPER.SALES_ID " +
                                                                            "WHERE SALES_SALES_ORDER.ORDER_DATE <= '" + toDate + "' AND SALES_SHIPPER.INVOICE_ID IS NULL AND (SALES_SALES_ORDER.ORDER_STATUS = 'FIRM' OR SALES_SALES_ORDER.ORDER_STATUS = 'RELEASED' OR SALES_SALES_ORDER.ORDER_STATUS = 'HOLD' OR (SALES_SALES_ORDER.ORDER_STATUS = 'CLOSED' AND SALES_SHIPPER.SHIPPER_TYPE = 'Shipment' AND SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')) " +
                                                                            "ORDER BY SALES_SALES_ORDER.ORDER_DATE DESC", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VjsOrder vjso = new VjsOrder();
                                    vjso.State = "QLD";
                                    vjso.OrderID = dr["ID"].ToString();
                                    vjso.CustomerName = dr["NAME"].ToString();
                                    vjso.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    vjso.DesiredShippingDate = Convert.ToDateTime(dr["DESIRED_SHIP_DATE"]);
                                    vjso.OrderStatus = dr["ORDER_STATUS"].ToString();
                                    vjso.Notes = dr["notes"].ToString();
                                    vjso.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjso.VjsOrderDetails.Add(new VjsOrderDetails()
                                    {
                                        LineNo = Convert.ToInt16(dr["LINE_NO"]),
                                        PartID = dr["PART_ID"].ToString(),
                                        Description = dr["DESCRIPTION"].ToString(),
                                        OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]),
                                        Unit = dr["SELLING_UM"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["UNIT_PRICE"]),
                                        Discount = Convert.ToDecimal(dr["TRADE_DISC_PERCENT"]),
                                        OrderAmount = Convert.ToDecimal(dr["ORDER_AMOUNT"])
                                    });
                                    VjsOrderList.Add(vjso);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

            }



            if (state.Equals("NSW") || state.Equals("All"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSNSWString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID,SALES_SALES_ORDER.NAME,cast(SALES_SALES_ORDER.ORDER_DATE as date) AS ORDER_DATE,cast(SALES_SALES_ORDER.DESIRED_SHIP_DATE as date) AS DESIRED_SHIP_DATE,SALES_SALES_ORDER.ORDER_STATUS,SALES_ORDER_LINE.LINE_NO,SALES_ORDER_LINE.PART_ID,SALES_ORDER_LINE.DESCRIPTION,SALES_ORDER_LINE.ORDER_QTY,SALES_ORDER_LINE.SELLING_UM,SALES_ORDER_LINE.UNIT_PRICE,SALES_ORDER_LINE.TRADE_DISC_PERCENT,SALES_ORDER_LINE.ORDER_AMOUNT,SALES_SHIPPER.INVOICE_ID " +
                                                                            "FROM SALES_SALES_ORDER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.SALES_ID " +
                                                                            "LEFT JOIN SALES_SHIPPER ON SALES_SALES_ORDER.ID = SALES_SHIPPER.SALES_ID " +
                                                                            "WHERE SALES_SALES_ORDER.ORDER_DATE <= '" + toDate + "' AND SALES_SHIPPER.INVOICE_ID IS NULL AND (SALES_SALES_ORDER.ORDER_STATUS = 'RELEASED' OR SALES_SALES_ORDER.ORDER_STATUS = 'HOLD' OR (SALES_SALES_ORDER.ORDER_STATUS = 'CLOSED' AND SALES_SHIPPER.SHIPPER_TYPE = 'Shipment' AND SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')) " +
                                                                            "ORDER BY SALES_SALES_ORDER.ORDER_DATE DESC", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VjsOrder vjso = new VjsOrder();
                                    vjso.State = "NSW";
                                    vjso.OrderID = dr["ID"].ToString();
                                    vjso.CustomerName = dr["NAME"].ToString();
                                    vjso.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    vjso.DesiredShippingDate = Convert.ToDateTime(dr["DESIRED_SHIP_DATE"]);
                                    vjso.OrderStatus = dr["ORDER_STATUS"].ToString();
                                    vjso.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjso.VjsOrderDetails.Add(new VjsOrderDetails()
                                    {
                                        LineNo = Convert.ToInt16(dr["LINE_NO"]),
                                        PartID = dr["PART_ID"].ToString(),
                                        Description = dr["DESCRIPTION"].ToString(),
                                        OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]),
                                        Unit = dr["SELLING_UM"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["UNIT_PRICE"]),
                                        Discount = Convert.ToDecimal(dr["TRADE_DISC_PERCENT"]),
                                        OrderAmount = Convert.ToDecimal(dr["ORDER_AMOUNT"])
                                    });
                                    VjsOrderList.Add(vjso);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }

            if (state.Equals("VIC") || state.Equals("All"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSVICString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID,SALES_SALES_ORDER.NAME,cast(SALES_SALES_ORDER.ORDER_DATE as date) AS ORDER_DATE,cast(SALES_SALES_ORDER.DESIRED_SHIP_DATE as date) AS DESIRED_SHIP_DATE,SALES_SALES_ORDER.ORDER_STATUS,SALES_ORDER_LINE.LINE_NO,SALES_ORDER_LINE.PART_ID,SALES_ORDER_LINE.DESCRIPTION,SALES_ORDER_LINE.ORDER_QTY,SALES_ORDER_LINE.SELLING_UM,SALES_ORDER_LINE.UNIT_PRICE,SALES_ORDER_LINE.TRADE_DISC_PERCENT,SALES_ORDER_LINE.ORDER_AMOUNT,SALES_SHIPPER.INVOICE_ID " +
                                                                            "FROM SALES_SALES_ORDER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.SALES_ID " +
                                                                            "LEFT JOIN SALES_SHIPPER ON SALES_SALES_ORDER.ID = SALES_SHIPPER.SALES_ID " +
                                                                            "WHERE SALES_SALES_ORDER.ORDER_DATE <= '" + toDate + "' AND SALES_SHIPPER.INVOICE_ID IS NULL AND (SALES_SALES_ORDER.ORDER_STATUS = 'RELEASED' OR SALES_SALES_ORDER.ORDER_STATUS = 'HOLD' OR (SALES_SALES_ORDER.ORDER_STATUS = 'CLOSED' AND SALES_SHIPPER.SHIPPER_TYPE = 'Shipment' AND SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')) " +
                                                                            "ORDER BY SALES_SALES_ORDER.ORDER_DATE DESC", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VjsOrder vjso = new VjsOrder();
                                    vjso.State = "VIC";
                                    vjso.OrderID = dr["ID"].ToString();
                                    vjso.CustomerName = dr["NAME"].ToString();
                                    vjso.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    vjso.DesiredShippingDate = Convert.ToDateTime(dr["DESIRED_SHIP_DATE"]);
                                    vjso.OrderStatus = dr["ORDER_STATUS"].ToString();
                                    vjso.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjso.VjsOrderDetails.Add(new VjsOrderDetails()
                                    {
                                        LineNo = Convert.ToInt16(dr["LINE_NO"]),
                                        PartID = dr["PART_ID"].ToString(),
                                        Description = dr["DESCRIPTION"].ToString(),
                                        OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]),
                                        Unit = dr["SELLING_UM"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["UNIT_PRICE"]),
                                        Discount = Convert.ToDecimal(dr["TRADE_DISC_PERCENT"]),
                                        OrderAmount = Convert.ToDecimal(dr["ORDER_AMOUNT"])
                                    });
                                    VjsOrderList.Add(vjso);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }

            return VjsOrderList;
        }


        public static ObservableCollection<VjsOrder> GetCurrentVjsOrdersForProduction(string state, DateTime endDate)
        {
            ObservableCollection<VjsOrder> VjsOrderList = new ObservableCollection<VjsOrder>();
            string toDate = endDate.ToString("yyyy-MM-dd");

            if (state.Equals("QLD") || state.Equals("All"))
            {
                using (SqlConnection conn = new SqlConnection(DBConfiguration.DbConnVJSQLDString))
                {
                    try
                    {
                        conn.Open();

                        SqlCommand cmdGetOrdersNotInvoiced = new SqlCommand("SELECT SALES_SALES_ORDER.ID,SALES_SALES_ORDER.NAME,cast(SALES_SALES_ORDER.ORDER_DATE as date) AS ORDER_DATE,cast(SALES_SALES_ORDER.DESIRED_SHIP_DATE as date) AS DESIRED_SHIP_DATE,SALES_SALES_ORDER.ORDER_STATUS,SALES_ORDER_LINE.LINE_NO,SALES_ORDER_LINE.PART_ID,SALES_ORDER_LINE.DESCRIPTION,SALES_ORDER_LINE.ORDER_QTY,SALES_ORDER_LINE.SELLING_UM,SALES_ORDER_LINE.UNIT_PRICE,SALES_ORDER_LINE.TRADE_DISC_PERCENT,SALES_ORDER_LINE.ORDER_AMOUNT,SALES_SHIPPER.INVOICE_ID,SALES_SALES_ORDER.notes " +
                                                                            "FROM SALES_SALES_ORDER " +
                                                                            "INNER JOIN SALES_ORDER_LINE ON SALES_SALES_ORDER.ID = SALES_ORDER_LINE.SALES_ID " +
                                                                            "LEFT JOIN SALES_SHIPPER ON SALES_SALES_ORDER.ID = SALES_SHIPPER.SALES_ID " +
                                                                            "WHERE SALES_SALES_ORDER.ORDER_DATE <= '" + toDate + "' AND SALES_SHIPPER.INVOICE_ID IS NULL AND " +
                                                                            "SALES_SALES_ORDER.NAME <> 'Sandleford Holdings Pty Ltd' AND SALES_SALES_ORDER.NAME <> 'Chip Tyre' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%CSBR%' AND " +
                                                                            "SALES_SALES_ORDER.ID NOT LIKE '%CO%' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Freight%' AND " +
                                                                            "SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Carnivale%' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%EPDM%' AND " +
                                                                            "SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Granule%' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%* Stock Allocation Occurs after Payment%' AND " +
                                                                            "SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%4 mesh buffings - 50L Box%' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Procure%' AND " +
                                                                            "SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Rotatub%' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Unimastic%' AND " +
                                                                            "SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%Curvedge%' AND SALES_ORDER_LINE.DESCRIPTION NOT LIKE '%AntiStumble%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Prepayment Note%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%S211B%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52583%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52575%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52588%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52586%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52570%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52569%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52576%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52572%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52582%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%CR52571%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Visipol 15%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Visipol 15M%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%HalfSphere 40 Blue%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Slithery Snake Red%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Nosey Platypus Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Little Frog Green%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Slithery Snake Green%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Very Slow Turtle Red%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Spike Lizard Red%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Medium Rock Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Scary Crocodile Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Scary Crocodile Green%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%HalfSphere 80 Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Very Slow Turtle Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Nosey Platypus Red%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%HalfSphere 60 Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Spike Lizard Green%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Scary Crocodile Red%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Large Rock Red%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Gentle Dolphin Blue%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%HalfSphere 60 Green%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%HalfSphere 80 Green%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Nosey Platypus Green%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Credit Card Surcharge%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%Chain for Playform%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%Stillage%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%RMBRBulk%' AND " +
                                                                            "SALES_ORDER_LINE.PART_ID NOT LIKE '%PGloss20%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%HDCE600%' AND SALES_ORDER_LINE.PART_ID NOT LIKE '%HC24%' AND " +
                                                                            "SALES_SALES_ORDER.ORDER_STATUS <> 'HOLD' AND SALES_SALES_ORDER.ORDER_STATUS <> 'CLOSED' AND" +
                                                                            "(SALES_SALES_ORDER.ORDER_STATUS = 'FIRM' OR SALES_SALES_ORDER.ORDER_STATUS = 'RELEASED' OR  (SALES_SHIPPER.SHIPPER_TYPE = 'Shipment' AND SALES_SHIPPER.SHIPPER_STATUS = 'APPROVED')) " +
                                                                            "ORDER BY SALES_SALES_ORDER.ORDER_DATE DESC", conn);

                        using (SqlDataReader dr = cmdGetOrdersNotInvoiced.ExecuteReader())
                        {
                            if (dr != null)
                            {
                                while (dr.Read())
                                {
                                    VjsOrder vjso = new VjsOrder();
                                    vjso.State = "QLD";
                                    vjso.OrderID = dr["ID"].ToString();
                                    vjso.CustomerName = dr["NAME"].ToString();
                                    vjso.OrderDate = Convert.ToDateTime(dr["ORDER_DATE"]);
                                    vjso.DesiredShippingDate = Convert.ToDateTime(dr["DESIRED_SHIP_DATE"]);
                                    vjso.OrderStatus = dr["ORDER_STATUS"].ToString();
                                    vjso.Notes = dr["notes"].ToString();
                                    vjso.VjsOrderDetails = new ObservableCollection<VjsOrderDetails>();
                                    vjso.VjsOrderDetails.Add(new VjsOrderDetails()
                                    {
                                        LineNo = Convert.ToInt16(dr["LINE_NO"]),
                                        PartID = dr["PART_ID"].ToString(),
                                        Description = dr["DESCRIPTION"].ToString(),
                                        OrderQty = Convert.ToDecimal(dr["ORDER_QTY"]),
                                        Unit = dr["SELLING_UM"].ToString(),
                                        UnitPrice = Convert.ToDecimal(dr["UNIT_PRICE"]),
                                        Discount = Convert.ToDecimal(dr["TRADE_DISC_PERCENT"]),
                                        OrderAmount = Convert.ToDecimal(dr["ORDER_AMOUNT"])
                                    });
                                    VjsOrderList.Add(vjso);
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error reading User Privilages: " + e);
                    }
                    finally
                    {
                        conn.Close();
                    }
                }

            }                        

            return VjsOrderList;
        }

    }


}
